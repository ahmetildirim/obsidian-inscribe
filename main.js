/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => Inscribe
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// node_modules/codemirror-companion-extension/dist/extension.js
var import_view = require("@codemirror/view");
var import_state = require("@codemirror/state");

// node_modules/codemirror-companion-extension/dist/lib/utils.js
function a(n, i, t = void 0) {
  const c2 = {
    force: () => {
    }
  };
  let e = null;
  async function* f(...u2) {
    e && clearTimeout(e);
    let r2 = null;
    try {
      await new Promise((o) => {
        r2 = e = setTimeout(() => o(), i), c2.force = () => {
          e && clearTimeout(e), o();
        };
      });
    } catch (e2) {
      if (t !== void 0)
        throw t;
    }
    for await (const o of n(...u2)) {
      if (r2 !== e)
        break;
      yield o;
    }
  }
  return { debounced: f, force: () => c2.force() };
}

// node_modules/codemirror-companion-extension/dist/extension.js
var F = Object.defineProperty;
var I = (n, t, e) => t in n ? F(n, t, { enumerable: true, configurable: true, writable: true, value: e }) : n[t] = e;
var c = (n, t, e) => (I(n, typeof t != "symbol" ? t + "" : t, e), e);
var r = import_state.StateField.define({
  create() {
    return { suggestion: null };
  },
  update(n, t) {
    const e = t.effects.find(
      (s) => s.is(d)
    );
    return t.state.doc && e && (e.value.doc == null || t.state.doc == e.value.doc) ? { suggestion: e.value.suggestion } : { suggestion: null };
  }
});
var d = import_state.StateEffect.define();
function E(n, t) {
  const e = n.state.selection.main.head, s = [], o = import_view.Decoration.widget({
    widget: new P(t),
    side: 1
  });
  return s.push(o.range(e)), import_view.Decoration.set(s);
}
var P = class extends import_view.WidgetType {
  constructor(e) {
    super();
    c(this, "suggestion");
    this.suggestion = e;
  }
  toDOM() {
    const e = document.createElement("span");
    return e.style.opacity = "0.4", e.className = "cm-inline-suggestion", e.textContent = this.suggestion, e;
  }
};
var g = (n) => {
  let t = 0;
  return import_view.ViewPlugin.fromClass(
    class {
      async update(s) {
        const o = s.state.doc;
        if (!s.docChanged)
          return;
        const i = ++t;
        for await (const a2 of n(s.state)) {
          if (i != t)
            return;
          s.view.dispatch({
            effects: d.of({
              suggestion: a2,
              doc: o
            })
          });
        }
      }
    }
  );
};
var T = class {
  constructor() {
    c(this, "decorations");
    this.decorations = import_view.Decoration.none;
  }
  update(t) {
    var s;
    const e = (s = t.state.field(
      r
    )) == null ? void 0 : s.suggestion;
    if (!e) {
      this.decorations = import_view.Decoration.none;
      return;
    }
    this.decorations = E(
      t.view,
      e.display_suggestion
    );
  }
};
var l = import_view.ViewPlugin.fromClass(T, {
  decorations: (n) => n.decorations
});
var _ = class {
  constructor(t, e) {
    c(this, "suggestFn");
    c(this, "keymap");
    c(this, "completionId");
    c(this, "run", (t2) => {
      var o, i;
      const e2 = (o = t2.state.field(
        r
      )) == null ? void 0 : o.suggestion;
      return e2 ? (t2.dispatch({
        ...x(
          t2.state,
          e2.complete_suggestion,
          t2.state.selection.main.head,
          t2.state.selection.main.head
        )
      }), (i = e2.accept_hook) == null || i.call(e2), (async () => {
        if (this.suggestFn == null)
          return;
        const a2 = ++this.completionId;
        for await (const f of this.suggestFn(t2.state)) {
          if (a2 != this.completionId)
            return;
          t2.dispatch({
            effects: d.of({
              suggestion: {
                complete_suggestion: f.complete_suggestion,
                display_suggestion: f.display_suggestion,
                accept_hook: f.accept_hook
              },
              doc: null
            })
          });
        }
      })(), true) : false;
    });
    this.suggestFn = t, this.keymap = import_state.Prec.highest(
      import_view.keymap.of([
        {
          key: e,
          run: (s) => this.run(s)
        }
      ])
    ), this.completionId = 0;
  }
};
function x(n, t, e, s) {
  return {
    ...n.changeByRange((o) => {
      if (o == n.selection.main)
        return {
          changes: { from: e, to: s, insert: t },
          range: import_state.EditorSelection.cursor(e + t.length)
        };
      const i = s - e;
      return !o.empty || i && n.sliceDoc(o.from - i, o.from) != n.sliceDoc(e, s) ? { range: o } : {
        changes: { from: o.from - i, to: o.from, insert: t },
        range: import_state.EditorSelection.cursor(o.from - i + t.length)
      };
    }),
    userEvent: "input.complete"
  };
}
function p(n) {
  return typeof n == "string" ? {
    complete_suggestion: n,
    display_suggestion: n
  } : n;
}
function S(n) {
  return async function* (t) {
    const e = await n(t);
    if (typeof e == "string" || "complete_suggestion" in e) {
      yield p(e);
      return;
    }
    for await (const s of e)
      yield p(s);
  };
}
function G(n) {
  const { delay: t = 500, accept_shortcut: e = "Tab" } = n, s = S(n.fetchFn), { debounced: o } = a(
    s,
    t
  );
  return e ? [
    r,
    g(o),
    l,
    new _(
      n.continue_suggesting ? s : null,
      e
    ).keymap
  ] : [
    r,
    g(o),
    l
  ];
}

// node_modules/whatwg-fetch/fetch.js
var g2 = typeof globalThis !== "undefined" && globalThis || typeof self !== "undefined" && self || // eslint-disable-next-line no-undef
typeof global !== "undefined" && global || {};
var support = {
  searchParams: "URLSearchParams" in g2,
  iterable: "Symbol" in g2 && "iterator" in Symbol,
  blob: "FileReader" in g2 && "Blob" in g2 && function() {
    try {
      new Blob();
      return true;
    } catch (e) {
      return false;
    }
  }(),
  formData: "FormData" in g2,
  arrayBuffer: "ArrayBuffer" in g2
};
function isDataView(obj) {
  return obj && DataView.prototype.isPrototypeOf(obj);
}
if (support.arrayBuffer) {
  viewClasses = [
    "[object Int8Array]",
    "[object Uint8Array]",
    "[object Uint8ClampedArray]",
    "[object Int16Array]",
    "[object Uint16Array]",
    "[object Int32Array]",
    "[object Uint32Array]",
    "[object Float32Array]",
    "[object Float64Array]"
  ];
  isArrayBufferView = ArrayBuffer.isView || function(obj) {
    return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
  };
}
var viewClasses;
var isArrayBufferView;
function normalizeName(name) {
  if (typeof name !== "string") {
    name = String(name);
  }
  if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === "") {
    throw new TypeError('Invalid character in header field name: "' + name + '"');
  }
  return name.toLowerCase();
}
function normalizeValue(value) {
  if (typeof value !== "string") {
    value = String(value);
  }
  return value;
}
function iteratorFor(items) {
  var iterator = {
    next: function() {
      var value = items.shift();
      return { done: value === void 0, value };
    }
  };
  if (support.iterable) {
    iterator[Symbol.iterator] = function() {
      return iterator;
    };
  }
  return iterator;
}
function Headers(headers) {
  this.map = {};
  if (headers instanceof Headers) {
    headers.forEach(function(value, name) {
      this.append(name, value);
    }, this);
  } else if (Array.isArray(headers)) {
    headers.forEach(function(header) {
      if (header.length != 2) {
        throw new TypeError("Headers constructor: expected name/value pair to be length 2, found" + header.length);
      }
      this.append(header[0], header[1]);
    }, this);
  } else if (headers) {
    Object.getOwnPropertyNames(headers).forEach(function(name) {
      this.append(name, headers[name]);
    }, this);
  }
}
Headers.prototype.append = function(name, value) {
  name = normalizeName(name);
  value = normalizeValue(value);
  var oldValue = this.map[name];
  this.map[name] = oldValue ? oldValue + ", " + value : value;
};
Headers.prototype["delete"] = function(name) {
  delete this.map[normalizeName(name)];
};
Headers.prototype.get = function(name) {
  name = normalizeName(name);
  return this.has(name) ? this.map[name] : null;
};
Headers.prototype.has = function(name) {
  return this.map.hasOwnProperty(normalizeName(name));
};
Headers.prototype.set = function(name, value) {
  this.map[normalizeName(name)] = normalizeValue(value);
};
Headers.prototype.forEach = function(callback, thisArg) {
  for (var name in this.map) {
    if (this.map.hasOwnProperty(name)) {
      callback.call(thisArg, this.map[name], name, this);
    }
  }
};
Headers.prototype.keys = function() {
  var items = [];
  this.forEach(function(value, name) {
    items.push(name);
  });
  return iteratorFor(items);
};
Headers.prototype.values = function() {
  var items = [];
  this.forEach(function(value) {
    items.push(value);
  });
  return iteratorFor(items);
};
Headers.prototype.entries = function() {
  var items = [];
  this.forEach(function(value, name) {
    items.push([name, value]);
  });
  return iteratorFor(items);
};
if (support.iterable) {
  Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
}
function consumed(body) {
  if (body._noBody)
    return;
  if (body.bodyUsed) {
    return Promise.reject(new TypeError("Already read"));
  }
  body.bodyUsed = true;
}
function fileReaderReady(reader) {
  return new Promise(function(resolve2, reject) {
    reader.onload = function() {
      resolve2(reader.result);
    };
    reader.onerror = function() {
      reject(reader.error);
    };
  });
}
function readBlobAsArrayBuffer(blob) {
  var reader = new FileReader();
  var promise = fileReaderReady(reader);
  reader.readAsArrayBuffer(blob);
  return promise;
}
function readBlobAsText(blob) {
  var reader = new FileReader();
  var promise = fileReaderReady(reader);
  var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);
  var encoding = match ? match[1] : "utf-8";
  reader.readAsText(blob, encoding);
  return promise;
}
function readArrayBufferAsText(buf) {
  var view = new Uint8Array(buf);
  var chars = new Array(view.length);
  for (var i = 0; i < view.length; i++) {
    chars[i] = String.fromCharCode(view[i]);
  }
  return chars.join("");
}
function bufferClone(buf) {
  if (buf.slice) {
    return buf.slice(0);
  } else {
    var view = new Uint8Array(buf.byteLength);
    view.set(new Uint8Array(buf));
    return view.buffer;
  }
}
function Body() {
  this.bodyUsed = false;
  this._initBody = function(body) {
    this.bodyUsed = this.bodyUsed;
    this._bodyInit = body;
    if (!body) {
      this._noBody = true;
      this._bodyText = "";
    } else if (typeof body === "string") {
      this._bodyText = body;
    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
      this._bodyBlob = body;
    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
      this._bodyFormData = body;
    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
      this._bodyText = body.toString();
    } else if (support.arrayBuffer && support.blob && isDataView(body)) {
      this._bodyArrayBuffer = bufferClone(body.buffer);
      this._bodyInit = new Blob([this._bodyArrayBuffer]);
    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
      this._bodyArrayBuffer = bufferClone(body);
    } else {
      this._bodyText = body = Object.prototype.toString.call(body);
    }
    if (!this.headers.get("content-type")) {
      if (typeof body === "string") {
        this.headers.set("content-type", "text/plain;charset=UTF-8");
      } else if (this._bodyBlob && this._bodyBlob.type) {
        this.headers.set("content-type", this._bodyBlob.type);
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
      }
    }
  };
  if (support.blob) {
    this.blob = function() {
      var rejected = consumed(this);
      if (rejected) {
        return rejected;
      }
      if (this._bodyBlob) {
        return Promise.resolve(this._bodyBlob);
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(new Blob([this._bodyArrayBuffer]));
      } else if (this._bodyFormData) {
        throw new Error("could not read FormData body as blob");
      } else {
        return Promise.resolve(new Blob([this._bodyText]));
      }
    };
  }
  this.arrayBuffer = function() {
    if (this._bodyArrayBuffer) {
      var isConsumed = consumed(this);
      if (isConsumed) {
        return isConsumed;
      } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
        return Promise.resolve(
          this._bodyArrayBuffer.buffer.slice(
            this._bodyArrayBuffer.byteOffset,
            this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
          )
        );
      } else {
        return Promise.resolve(this._bodyArrayBuffer);
      }
    } else if (support.blob) {
      return this.blob().then(readBlobAsArrayBuffer);
    } else {
      throw new Error("could not read as ArrayBuffer");
    }
  };
  this.text = function() {
    var rejected = consumed(this);
    if (rejected) {
      return rejected;
    }
    if (this._bodyBlob) {
      return readBlobAsText(this._bodyBlob);
    } else if (this._bodyArrayBuffer) {
      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
    } else if (this._bodyFormData) {
      throw new Error("could not read FormData body as text");
    } else {
      return Promise.resolve(this._bodyText);
    }
  };
  if (support.formData) {
    this.formData = function() {
      return this.text().then(decode);
    };
  }
  this.json = function() {
    return this.text().then(JSON.parse);
  };
  return this;
}
var methods = ["CONNECT", "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT", "TRACE"];
function normalizeMethod(method) {
  var upcased = method.toUpperCase();
  return methods.indexOf(upcased) > -1 ? upcased : method;
}
function Request(input, options) {
  if (!(this instanceof Request)) {
    throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
  }
  options = options || {};
  var body = options.body;
  if (input instanceof Request) {
    if (input.bodyUsed) {
      throw new TypeError("Already read");
    }
    this.url = input.url;
    this.credentials = input.credentials;
    if (!options.headers) {
      this.headers = new Headers(input.headers);
    }
    this.method = input.method;
    this.mode = input.mode;
    this.signal = input.signal;
    if (!body && input._bodyInit != null) {
      body = input._bodyInit;
      input.bodyUsed = true;
    }
  } else {
    this.url = String(input);
  }
  this.credentials = options.credentials || this.credentials || "same-origin";
  if (options.headers || !this.headers) {
    this.headers = new Headers(options.headers);
  }
  this.method = normalizeMethod(options.method || this.method || "GET");
  this.mode = options.mode || this.mode || null;
  this.signal = options.signal || this.signal || function() {
    if ("AbortController" in g2) {
      var ctrl = new AbortController();
      return ctrl.signal;
    }
  }();
  this.referrer = null;
  if ((this.method === "GET" || this.method === "HEAD") && body) {
    throw new TypeError("Body not allowed for GET or HEAD requests");
  }
  this._initBody(body);
  if (this.method === "GET" || this.method === "HEAD") {
    if (options.cache === "no-store" || options.cache === "no-cache") {
      var reParamSearch = /([?&])_=[^&]*/;
      if (reParamSearch.test(this.url)) {
        this.url = this.url.replace(reParamSearch, "$1_=" + new Date().getTime());
      } else {
        var reQueryString = /\?/;
        this.url += (reQueryString.test(this.url) ? "&" : "?") + "_=" + new Date().getTime();
      }
    }
  }
}
Request.prototype.clone = function() {
  return new Request(this, { body: this._bodyInit });
};
function decode(body) {
  var form = new FormData();
  body.trim().split("&").forEach(function(bytes) {
    if (bytes) {
      var split = bytes.split("=");
      var name = split.shift().replace(/\+/g, " ");
      var value = split.join("=").replace(/\+/g, " ");
      form.append(decodeURIComponent(name), decodeURIComponent(value));
    }
  });
  return form;
}
function parseHeaders(rawHeaders) {
  var headers = new Headers();
  var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
  preProcessedHeaders.split("\r").map(function(header) {
    return header.indexOf("\n") === 0 ? header.substr(1, header.length) : header;
  }).forEach(function(line) {
    var parts = line.split(":");
    var key = parts.shift().trim();
    if (key) {
      var value = parts.join(":").trim();
      try {
        headers.append(key, value);
      } catch (error) {
        console.warn("Response " + error.message);
      }
    }
  });
  return headers;
}
Body.call(Request.prototype);
function Response(bodyInit, options) {
  if (!(this instanceof Response)) {
    throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
  }
  if (!options) {
    options = {};
  }
  this.type = "default";
  this.status = options.status === void 0 ? 200 : options.status;
  if (this.status < 200 || this.status > 599) {
    throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].");
  }
  this.ok = this.status >= 200 && this.status < 300;
  this.statusText = options.statusText === void 0 ? "" : "" + options.statusText;
  this.headers = new Headers(options.headers);
  this.url = options.url || "";
  this._initBody(bodyInit);
}
Body.call(Response.prototype);
Response.prototype.clone = function() {
  return new Response(this._bodyInit, {
    status: this.status,
    statusText: this.statusText,
    headers: new Headers(this.headers),
    url: this.url
  });
};
Response.error = function() {
  var response = new Response(null, { status: 200, statusText: "" });
  response.ok = false;
  response.status = 0;
  response.type = "error";
  return response;
};
var redirectStatuses = [301, 302, 303, 307, 308];
Response.redirect = function(url, status) {
  if (redirectStatuses.indexOf(status) === -1) {
    throw new RangeError("Invalid status code");
  }
  return new Response(null, { status, headers: { location: url } });
};
var DOMException = g2.DOMException;
try {
  new DOMException();
} catch (err) {
  DOMException = function(message, name) {
    this.message = message;
    this.name = name;
    var error = Error(message);
    this.stack = error.stack;
  };
  DOMException.prototype = Object.create(Error.prototype);
  DOMException.prototype.constructor = DOMException;
}
function fetch2(input, init) {
  return new Promise(function(resolve2, reject) {
    var request = new Request(input, init);
    if (request.signal && request.signal.aborted) {
      return reject(new DOMException("Aborted", "AbortError"));
    }
    var xhr = new XMLHttpRequest();
    function abortXhr() {
      xhr.abort();
    }
    xhr.onload = function() {
      var options = {
        statusText: xhr.statusText,
        headers: parseHeaders(xhr.getAllResponseHeaders() || "")
      };
      if (request.url.indexOf("file://") === 0 && (xhr.status < 200 || xhr.status > 599)) {
        options.status = 200;
      } else {
        options.status = xhr.status;
      }
      options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
      var body = "response" in xhr ? xhr.response : xhr.responseText;
      setTimeout(function() {
        resolve2(new Response(body, options));
      }, 0);
    };
    xhr.onerror = function() {
      setTimeout(function() {
        reject(new TypeError("Network request failed"));
      }, 0);
    };
    xhr.ontimeout = function() {
      setTimeout(function() {
        reject(new TypeError("Network request timed out"));
      }, 0);
    };
    xhr.onabort = function() {
      setTimeout(function() {
        reject(new DOMException("Aborted", "AbortError"));
      }, 0);
    };
    function fixUrl(url) {
      try {
        return url === "" && g2.location.href ? g2.location.href : url;
      } catch (e) {
        return url;
      }
    }
    xhr.open(request.method, fixUrl(request.url), true);
    if (request.credentials === "include") {
      xhr.withCredentials = true;
    } else if (request.credentials === "omit") {
      xhr.withCredentials = false;
    }
    if ("responseType" in xhr) {
      if (support.blob) {
        xhr.responseType = "blob";
      } else if (support.arrayBuffer) {
        xhr.responseType = "arraybuffer";
      }
    }
    if (init && typeof init.headers === "object" && !(init.headers instanceof Headers || g2.Headers && init.headers instanceof g2.Headers)) {
      var names = [];
      Object.getOwnPropertyNames(init.headers).forEach(function(name) {
        names.push(normalizeName(name));
        xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
      });
      request.headers.forEach(function(value, name) {
        if (names.indexOf(name) === -1) {
          xhr.setRequestHeader(name, value);
        }
      });
    } else {
      request.headers.forEach(function(value, name) {
        xhr.setRequestHeader(name, value);
      });
    }
    if (request.signal) {
      request.signal.addEventListener("abort", abortXhr);
      xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
          request.signal.removeEventListener("abort", abortXhr);
        }
      };
    }
    xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
  });
}
fetch2.polyfill = true;
if (!g2.fetch) {
  g2.fetch = fetch2;
  g2.Headers = Headers;
  g2.Request = Request;
  g2.Response = Response;
}

// node_modules/ollama/dist/shared/ollama.cddbc85b.mjs
var version = "0.5.11";
var __defProp$1 = Object.defineProperty;
var __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField$1 = (obj, key, value) => {
  __defNormalProp$1(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var ResponseError = class extends Error {
  constructor(error, status_code) {
    super(error);
    this.error = error;
    this.status_code = status_code;
    this.name = "ResponseError";
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, ResponseError);
    }
  }
};
var AbortableAsyncIterator = class {
  constructor(abortController, itr, doneCallback) {
    __publicField$1(this, "abortController");
    __publicField$1(this, "itr");
    __publicField$1(this, "doneCallback");
    this.abortController = abortController;
    this.itr = itr;
    this.doneCallback = doneCallback;
  }
  abort() {
    this.abortController.abort();
  }
  async *[Symbol.asyncIterator]() {
    for await (const message of this.itr) {
      if ("error" in message) {
        throw new Error(message.error);
      }
      yield message;
      if (message.done || message.status === "success") {
        this.doneCallback();
        return;
      }
    }
    throw new Error("Did not receive done or success response in stream.");
  }
};
var checkOk = async (response) => {
  var _a;
  if (response.ok) {
    return;
  }
  let message = `Error ${response.status}: ${response.statusText}`;
  let errorData = null;
  if ((_a = response.headers.get("content-type")) == null ? void 0 : _a.includes("application/json")) {
    try {
      errorData = await response.json();
      message = errorData.error || message;
    } catch (error) {
      console.log("Failed to parse error response as JSON");
    }
  } else {
    try {
      console.log("Getting text from response");
      const textResponse = await response.text();
      message = textResponse || message;
    } catch (error) {
      console.log("Failed to get text from error response");
    }
  }
  throw new ResponseError(message, response.status);
};
function getPlatform() {
  if (typeof window !== "undefined" && window.navigator) {
    return `${window.navigator.platform.toLowerCase()} Browser/${navigator.userAgent};`;
  } else if (typeof process !== "undefined") {
    return `${process.arch} ${process.platform} Node.js/${process.version}`;
  }
  return "";
}
var fetchWithHeaders = async (fetch3, url, options = {}) => {
  const defaultHeaders = {
    "Content-Type": "application/json",
    Accept: "application/json",
    "User-Agent": `ollama-js/${version} (${getPlatform()})`
  };
  if (!options.headers) {
    options.headers = {};
  }
  const customHeaders = Object.fromEntries(
    Object.entries(options.headers).filter(([key]) => !Object.keys(defaultHeaders).some((defaultKey) => defaultKey.toLowerCase() === key.toLowerCase()))
  );
  options.headers = {
    ...defaultHeaders,
    ...customHeaders
  };
  return fetch3(url, options);
};
var get = async (fetch3, host, options) => {
  const response = await fetchWithHeaders(fetch3, host, {
    headers: options == null ? void 0 : options.headers
  });
  await checkOk(response);
  return response;
};
var head = async (fetch3, host) => {
  const response = await fetchWithHeaders(fetch3, host, {
    method: "HEAD"
  });
  await checkOk(response);
  return response;
};
var post = async (fetch3, host, data, options) => {
  const isRecord = (input) => {
    return input !== null && typeof input === "object" && !Array.isArray(input);
  };
  const formattedData = isRecord(data) ? JSON.stringify(data) : data;
  const response = await fetchWithHeaders(fetch3, host, {
    method: "POST",
    body: formattedData,
    signal: options == null ? void 0 : options.signal,
    headers: options == null ? void 0 : options.headers
  });
  await checkOk(response);
  return response;
};
var del = async (fetch3, host, data, options) => {
  const response = await fetchWithHeaders(fetch3, host, {
    method: "DELETE",
    body: JSON.stringify(data),
    headers: options == null ? void 0 : options.headers
  });
  await checkOk(response);
  return response;
};
var parseJSON = async function* (itr) {
  var _a;
  const decoder = new TextDecoder("utf-8");
  let buffer = "";
  const reader = itr.getReader();
  while (true) {
    const { done, value: chunk } = await reader.read();
    if (done) {
      break;
    }
    buffer += decoder.decode(chunk);
    const parts = buffer.split("\n");
    buffer = (_a = parts.pop()) != null ? _a : "";
    for (const part of parts) {
      try {
        yield JSON.parse(part);
      } catch (error) {
        console.warn("invalid json: ", part);
      }
    }
  }
  for (const part of buffer.split("\n").filter((p2) => p2 !== "")) {
    try {
      yield JSON.parse(part);
    } catch (error) {
      console.warn("invalid json: ", part);
    }
  }
};
var formatHost = (host) => {
  if (!host) {
    return "http://127.0.0.1:11434";
  }
  let isExplicitProtocol = host.includes("://");
  if (host.startsWith(":")) {
    host = `http://127.0.0.1${host}`;
    isExplicitProtocol = true;
  }
  if (!isExplicitProtocol) {
    host = `http://${host}`;
  }
  const url = new URL(host);
  let port = url.port;
  if (!port) {
    if (!isExplicitProtocol) {
      port = "11434";
    } else {
      port = url.protocol === "https:" ? "443" : "80";
    }
  }
  let formattedHost = `${url.protocol}//${url.hostname}:${port}${url.pathname}`;
  if (formattedHost.endsWith("/")) {
    formattedHost = formattedHost.slice(0, -1);
  }
  return formattedHost;
};
var __defProp2 = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var Ollama$1 = class Ollama {
  constructor(config) {
    var _a, _b;
    __publicField(this, "config");
    __publicField(this, "fetch");
    __publicField(this, "ongoingStreamedRequests", []);
    this.config = {
      host: "",
      headers: config == null ? void 0 : config.headers
    };
    if (!(config == null ? void 0 : config.proxy)) {
      this.config.host = formatHost((_a = config == null ? void 0 : config.host) != null ? _a : "http://127.0.0.1:11434");
    }
    this.fetch = (_b = config == null ? void 0 : config.fetch) != null ? _b : fetch;
  }
  // Abort any ongoing streamed requests to Ollama
  abort() {
    for (const request of this.ongoingStreamedRequests) {
      request.abort();
    }
    this.ongoingStreamedRequests.length = 0;
  }
  /**
   * Processes a request to the Ollama server. If the request is streamable, it will return a
   * AbortableAsyncIterator that yields the response messages. Otherwise, it will return the response
   * object.
   * @param endpoint {string} - The endpoint to send the request to.
   * @param request {object} - The request object to send to the endpoint.
   * @protected {T | AbortableAsyncIterator<T>} - The response object or a AbortableAsyncIterator that yields
   * response messages.
   * @throws {Error} - If the response body is missing or if the response is an error.
   * @returns {Promise<T | AbortableAsyncIterator<T>>} - The response object or a AbortableAsyncIterator that yields the streamed response.
   */
  async processStreamableRequest(endpoint, request) {
    var _a;
    request.stream = (_a = request.stream) != null ? _a : false;
    const host = `${this.config.host}/api/${endpoint}`;
    if (request.stream) {
      const abortController = new AbortController();
      const response2 = await post(this.fetch, host, request, {
        signal: abortController.signal,
        headers: this.config.headers
      });
      if (!response2.body) {
        throw new Error("Missing body");
      }
      const itr = parseJSON(response2.body);
      const abortableAsyncIterator = new AbortableAsyncIterator(
        abortController,
        itr,
        () => {
          const i = this.ongoingStreamedRequests.indexOf(abortableAsyncIterator);
          if (i > -1) {
            this.ongoingStreamedRequests.splice(i, 1);
          }
        }
      );
      this.ongoingStreamedRequests.push(abortableAsyncIterator);
      return abortableAsyncIterator;
    }
    const response = await post(this.fetch, host, request, {
      headers: this.config.headers
    });
    return await response.json();
  }
  /**
  * Encodes an image to base64 if it is a Uint8Array.
  * @param image {Uint8Array | string} - The image to encode.
  * @returns {Promise<string>} - The base64 encoded image.
  */
  async encodeImage(image) {
    if (typeof image !== "string") {
      const uint8Array = new Uint8Array(image);
      let byteString = "";
      const len = uint8Array.byteLength;
      for (let i = 0; i < len; i++) {
        byteString += String.fromCharCode(uint8Array[i]);
      }
      return btoa(byteString);
    }
    return image;
  }
  /**
   * Generates a response from a text prompt.
   * @param request {GenerateRequest} - The request object.
   * @returns {Promise<GenerateResponse | AbortableAsyncIterator<GenerateResponse>>} - The response object or
   * an AbortableAsyncIterator that yields response messages.
   */
  async generate(request) {
    if (request.images) {
      request.images = await Promise.all(request.images.map(this.encodeImage.bind(this)));
    }
    return this.processStreamableRequest("generate", request);
  }
  /**
   * Chats with the model. The request object can contain messages with images that are either
   * Uint8Arrays or base64 encoded strings. The images will be base64 encoded before sending the
   * request.
   * @param request {ChatRequest} - The request object.
   * @returns {Promise<ChatResponse | AbortableAsyncIterator<ChatResponse>>} - The response object or an
   * AbortableAsyncIterator that yields response messages.
   */
  async chat(request) {
    if (request.messages) {
      for (const message of request.messages) {
        if (message.images) {
          message.images = await Promise.all(
            message.images.map(this.encodeImage.bind(this))
          );
        }
      }
    }
    return this.processStreamableRequest("chat", request);
  }
  /**
   * Creates a new model from a stream of data.
   * @param request {CreateRequest} - The request object.
   * @returns {Promise<ProgressResponse | AbortableAsyncIterator<ProgressResponse>>} - The response object or a stream of progress responses.
   */
  async create(request) {
    return this.processStreamableRequest("create", {
      name: request.model,
      stream: request.stream,
      modelfile: request.modelfile,
      quantize: request.quantize
    });
  }
  /**
   * Pulls a model from the Ollama registry. The request object can contain a stream flag to indicate if the
   * response should be streamed.
   * @param request {PullRequest} - The request object.
   * @returns {Promise<ProgressResponse | AbortableAsyncIterator<ProgressResponse>>} - The response object or
   * an AbortableAsyncIterator that yields response messages.
   */
  async pull(request) {
    return this.processStreamableRequest("pull", {
      name: request.model,
      stream: request.stream,
      insecure: request.insecure
    });
  }
  /**
   * Pushes a model to the Ollama registry. The request object can contain a stream flag to indicate if the
   * response should be streamed.
   * @param request {PushRequest} - The request object.
   * @returns {Promise<ProgressResponse | AbortableAsyncIterator<ProgressResponse>>} - The response object or
   * an AbortableAsyncIterator that yields response messages.
   */
  async push(request) {
    return this.processStreamableRequest("push", {
      name: request.model,
      stream: request.stream,
      insecure: request.insecure
    });
  }
  /**
   * Deletes a model from the server. The request object should contain the name of the model to
   * delete.
   * @param request {DeleteRequest} - The request object.
   * @returns {Promise<StatusResponse>} - The response object.
   */
  async delete(request) {
    await del(
      this.fetch,
      `${this.config.host}/api/delete`,
      { name: request.model },
      { headers: this.config.headers }
    );
    return { status: "success" };
  }
  /**
   * Copies a model from one name to another. The request object should contain the name of the
   * model to copy and the new name.
   * @param request {CopyRequest} - The request object.
   * @returns {Promise<StatusResponse>} - The response object.
   */
  async copy(request) {
    await post(this.fetch, `${this.config.host}/api/copy`, { ...request }, {
      headers: this.config.headers
    });
    return { status: "success" };
  }
  /**
   * Lists the models on the server.
   * @returns {Promise<ListResponse>} - The response object.
   * @throws {Error} - If the response body is missing.
   */
  async list() {
    const response = await get(this.fetch, `${this.config.host}/api/tags`, {
      headers: this.config.headers
    });
    return await response.json();
  }
  /**
   * Shows the metadata of a model. The request object should contain the name of the model.
   * @param request {ShowRequest} - The request object.
   * @returns {Promise<ShowResponse>} - The response object.
   */
  async show(request) {
    const response = await post(this.fetch, `${this.config.host}/api/show`, {
      ...request
    }, {
      headers: this.config.headers
    });
    return await response.json();
  }
  /**
   * Embeds text input into vectors.
   * @param request {EmbedRequest} - The request object.
   * @returns {Promise<EmbedResponse>} - The response object.
   */
  async embed(request) {
    const response = await post(this.fetch, `${this.config.host}/api/embed`, {
      ...request
    }, {
      headers: this.config.headers
    });
    return await response.json();
  }
  /**
   * Embeds a text prompt into a vector.
   * @param request {EmbeddingsRequest} - The request object.
   * @returns {Promise<EmbeddingsResponse>} - The response object.
   */
  async embeddings(request) {
    const response = await post(this.fetch, `${this.config.host}/api/embeddings`, {
      ...request
    }, {
      headers: this.config.headers
    });
    return await response.json();
  }
  /**
   * Lists the running models on the server
   * @returns {Promise<ListResponse>} - The response object.
   * @throws {Error} - If the response body is missing.
   */
  async ps() {
    const response = await get(this.fetch, `${this.config.host}/api/ps`, {
      headers: this.config.headers
    });
    return await response.json();
  }
};
var browser = new Ollama$1();

// node_modules/ollama/dist/index.mjs
var import_fs = __toESM(require("fs"), 1);
var import_path = require("path");
var import_crypto = require("crypto");
var import_os = require("os");
var Ollama2 = class extends Ollama$1 {
  async encodeImage(image) {
    if (typeof image !== "string") {
      return Buffer.from(image).toString("base64");
    }
    try {
      if (import_fs.default.existsSync(image)) {
        const fileBuffer = await import_fs.promises.readFile((0, import_path.resolve)(image));
        return Buffer.from(fileBuffer).toString("base64");
      }
    } catch (e) {
    }
    return image;
  }
  /**
   * Parse the modelfile and replace the FROM and ADAPTER commands with the corresponding blob hashes.
   * @param modelfile {string} - The modelfile content
   * @param mfDir {string} - The directory of the modelfile
   * @private @internal
   */
  async parseModelfile(modelfile, mfDir = process.cwd()) {
    const out = [];
    const lines = modelfile.split("\n");
    for (const line of lines) {
      const [command, args] = line.split(" ", 2);
      if (["FROM", "ADAPTER"].includes(command.toUpperCase())) {
        const path = this.resolvePath(args.trim(), mfDir);
        if (await this.fileExists(path)) {
          out.push(`${command} @${await this.createBlob(path)}`);
        } else {
          out.push(`${command} ${args}`);
        }
      } else {
        out.push(line);
      }
    }
    return out.join("\n");
  }
  /**
   * Resolve the path to an absolute path.
   * @param inputPath {string} - The input path
   * @param mfDir {string} - The directory of the modelfile
   * @private @internal
   */
  resolvePath(inputPath, mfDir) {
    if (inputPath.startsWith("~")) {
      return (0, import_path.join)((0, import_os.homedir)(), inputPath.slice(1));
    }
    return (0, import_path.resolve)(mfDir, inputPath);
  }
  /**
   * checks if a file exists
   * @param path {string} - The path to the file
   * @private @internal
   * @returns {Promise<boolean>} - Whether the file exists or not
   */
  async fileExists(path) {
    try {
      await import_fs.promises.access(path);
      return true;
    } catch (e) {
      return false;
    }
  }
  async createBlob(path) {
    if (typeof ReadableStream === "undefined") {
      throw new Error("Streaming uploads are not supported in this environment.");
    }
    const fileStream = (0, import_fs.createReadStream)(path);
    const sha256sum = await new Promise((resolve2, reject) => {
      const hash = (0, import_crypto.createHash)("sha256");
      fileStream.on("data", (data) => hash.update(data));
      fileStream.on("end", () => resolve2(hash.digest("hex")));
      fileStream.on("error", reject);
    });
    const digest = `sha256:${sha256sum}`;
    try {
      await head(this.fetch, `${this.config.host}/api/blobs/${digest}`);
    } catch (e) {
      if (e instanceof Error && e.message.includes("404")) {
        const readableStream = new ReadableStream({
          start(controller) {
            fileStream.on("data", (chunk) => {
              controller.enqueue(chunk);
            });
            fileStream.on("end", () => {
              controller.close();
            });
            fileStream.on("error", (err) => {
              controller.error(err);
            });
          }
        });
        await post(
          this.fetch,
          `${this.config.host}/api/blobs/${digest}`,
          readableStream
        );
      } else {
        throw e;
      }
    }
    return digest;
  }
  async create(request) {
    let modelfileContent = "";
    if (request.path) {
      modelfileContent = await import_fs.promises.readFile(request.path, { encoding: "utf8" });
      modelfileContent = await this.parseModelfile(
        modelfileContent,
        (0, import_path.dirname)(request.path)
      );
    } else if (request.modelfile) {
      modelfileContent = await this.parseModelfile(request.modelfile);
    } else {
      throw new Error("Must provide either path or modelfile to create a model");
    }
    request.modelfile = modelfileContent;
    if (request.stream) {
      return super.create(request);
    } else {
      return super.create(request);
    }
  }
};
var index = new Ollama2();

// src/providers/ollama.ts
var OllamaProvider = class {
  constructor(settins) {
    this.id = "ollama";
    this.name = "Ollama";
    this.description = "Ollama model for completion";
    this.settings = settins;
    this.ollama = new Ollama2({ host: this.settings.host });
  }
  async load() {
    console.log("Loading Ollama model");
    this.ollama = new Ollama2({ host: this.settings.host });
  }
  async *generate(prefix, suffix) {
    console.log("fetching completion");
    const promiseIterator = await this.ollama.generate({
      model: this.settings.model,
      prompt: prefix,
      stream: true
    });
    let completion = "";
    for await (let response of promiseIterator) {
      completion += response.response;
      yield { complete_suggestion: completion, display_suggestion: completion };
    }
  }
  async abort() {
    console.log("canceling completion");
    this.ollama.abort();
  }
};

// src/settings/settings.ts
var DEFAULT_SETTINGS = {
  provider: "ollama" /* OLLAMA */,
  providerSettings: {
    openai: {
      apiKey: "",
      model: "gpt-4"
    },
    ollama: {
      host: "http://localhost:11434",
      model: "mistral-nemo"
    }
  }
};

// src/settings/settings-tab.ts
var import_obsidian = require("obsidian");
var InscribeSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  async display() {
    const { containerEl } = this;
    new ProviderSettings(this.plugin, containerEl).display();
  }
};
var InscribeSettings = class {
  constructor(plugin, containerEl) {
    this.plugin = plugin;
    this.containerEl = containerEl;
  }
};
var ProviderSettings = class extends InscribeSettings {
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "Provider Settings" });
    new import_obsidian.Setting(containerEl).setName("AI Provider").setDesc("Choose your preferred AI provider.").addDropdown((dropdown) => {
      dropdown.addOption("openai" /* OPENAI */, "OpenAI").addOption("ollama" /* OLLAMA */, "Ollama").setValue(this.plugin.settings.provider).onChange(async (value) => {
        this.plugin.settings.provider = value;
        await this.plugin.saveSettings();
        this.display();
      });
    });
    switch (this.plugin.settings.provider) {
      case "openai":
        this.openAISettings(containerEl);
        break;
      case "ollama":
        this.ollamaSettings(containerEl);
        break;
    }
  }
  openAISettings(containerEl) {
    containerEl.createEl("h3", { text: "OpenAI Settings" });
    new import_obsidian.Setting(containerEl).setName("API Key").setDesc("Enter your OpenAI API Key.").addText(
      (text) => text.setPlaceholder("sk-...").setValue(this.plugin.settings.providerSettings.openai.apiKey).onChange(async (value) => {
        this.plugin.settings.providerSettings.openai.apiKey = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Model").setDesc("Choose the OpenAI model.").addDropdown((dropdown) => {
      dropdown.addOption("gpt-4", "GPT-4").addOption("gpt-3.5", "GPT-3.5").setValue(this.plugin.settings.providerSettings.openai.model).onChange(async (value) => {
        this.plugin.settings.providerSettings.openai.model = value;
        await this.plugin.saveSettings();
      });
    });
  }
  ollamaSettings(containerEl) {
    containerEl.createEl("h3", { text: "Ollama Settings" });
    new import_obsidian.Setting(containerEl).setName("Host").setDesc("Enter the Ollama host.").addText(
      (text) => text.setPlaceholder(this.plugin.settings.providerSettings.ollama.host).setValue(this.plugin.settings.providerSettings.ollama.host).onChange(async (value) => {
        this.plugin.settings.providerSettings.ollama.host = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Model").setDesc("Choose the Ollama model.").addDropdown((dropdown) => {
      dropdown.addOption("mistral-nemo", "Mistral-Nemo").addOption("mistral-gpt", "Mistral-GPT").setValue(this.plugin.settings.providerSettings.ollama.model).onChange(async (value) => {
        this.plugin.settings.providerSettings.ollama.model = value;
        await this.plugin.saveSettings();
      });
    });
  }
};

// src/main.ts
var Inscribe = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    await this.loadModel();
    await this.setupExtention();
    this.addSettingTab(new InscribeSettingsTab(this.app, this));
  }
  onunload() {
  }
  async loadModel() {
    this.provider = new OllamaProvider(this.settings.providerSettings.ollama);
  }
  async setupExtention() {
    const extension = G({
      fetchFn: () => this.generateSuggestions(),
      delay: 500,
      continue_suggesting: false,
      accept_shortcut: "Tab"
    });
    this.registerEditorExtension(extension);
  }
  async *generateSuggestions() {
    let markdownFileInfo = this.app.workspace.activeEditor;
    if (!markdownFileInfo)
      return;
    const editor = markdownFileInfo.editor;
    const cursor = editor.getCursor();
    const currentLine = editor.getLine(cursor.line);
    if (!currentLine.length) {
      yield {
        display_suggestion: "",
        complete_suggestion: ""
      };
      return;
    }
    const lastChar = currentLine[cursor.ch - 1];
    if (lastChar !== " ") {
      yield { display_suggestion: "", complete_suggestion: "" };
      return;
    }
    const beforeCursor = editor.getRange({ line: 0, ch: 0 }, cursor);
    const afterCursor = editor.getRange(
      cursor,
      { line: editor.lastLine(), ch: editor.getLine(editor.lastLine()).length }
    );
    this.provider.abort();
    yield* this.provider.generate(beforeCursor, afterCursor);
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
    await this.loadModel();
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21haW4udHMiLCAibm9kZV9tb2R1bGVzL2NvZGVtaXJyb3ItY29tcGFuaW9uLWV4dGVuc2lvbi9zcmMvbGliL3V0aWxzLnRzIiwgIm5vZGVfbW9kdWxlcy9jb2RlbWlycm9yLWNvbXBhbmlvbi1leHRlbnNpb24vc3JjL2V4dGVuc2lvbi50cyIsICJub2RlX21vZHVsZXMvd2hhdHdnLWZldGNoL2ZldGNoLmpzIiwgIm5vZGVfbW9kdWxlcy9vbGxhbWEvZGlzdC9zaGFyZWQvb2xsYW1hLmNkZGJjODViLm1qcyIsICJub2RlX21vZHVsZXMvb2xsYW1hL2Rpc3QvaW5kZXgubWpzIiwgInNyYy9wcm92aWRlcnMvb2xsYW1hLnRzIiwgInNyYy9zZXR0aW5ncy9zZXR0aW5ncy50cyIsICJzcmMvc2V0dGluZ3Mvc2V0dGluZ3MtdGFiLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgeyBFZGl0b3IsIFBsdWdpbiB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7IGlubGluZVN1Z2dlc3Rpb24sIFN1Z2dlc3Rpb24gfSBmcm9tIFwiY29kZW1pcnJvci1jb21wYW5pb24tZXh0ZW5zaW9uXCI7XG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJy4vcHJvdmlkZXJzL3Byb3ZpZGVyJztcbmltcG9ydCBPbGxhbWFQcm92aWRlciBmcm9tICcuL3Byb3ZpZGVycy9vbGxhbWEnO1xuaW1wb3J0IHsgU2V0dGluZ3MsIERFRkFVTFRfU0VUVElOR1MgfSBmcm9tICcuL3NldHRpbmdzL3NldHRpbmdzJztcbmltcG9ydCB7IEluc2NyaWJlU2V0dGluZ3NUYWIgfSBmcm9tICcuL3NldHRpbmdzL3NldHRpbmdzLXRhYic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEluc2NyaWJlIGV4dGVuZHMgUGx1Z2luIHtcblx0c2V0dGluZ3M6IFNldHRpbmdzO1xuXHRwcm92aWRlcjogUHJvdmlkZXJcblxuXHRhc3luYyBvbmxvYWQoKSB7XG5cdFx0YXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcblx0XHRhd2FpdCB0aGlzLmxvYWRNb2RlbCgpO1xuXHRcdGF3YWl0IHRoaXMuc2V0dXBFeHRlbnRpb24oKTtcblx0XHR0aGlzLmFkZFNldHRpbmdUYWIobmV3IEluc2NyaWJlU2V0dGluZ3NUYWIodGhpcy5hcHAsIHRoaXMpKTtcblx0fVxuXG5cdG9udW5sb2FkKCkgeyB9XG5cblx0YXN5bmMgbG9hZE1vZGVsKCkge1xuXHRcdHRoaXMucHJvdmlkZXIgPSBuZXcgT2xsYW1hUHJvdmlkZXIodGhpcy5zZXR0aW5ncy5wcm92aWRlclNldHRpbmdzLm9sbGFtYSk7XG5cdH1cblxuXHRhc3luYyBzZXR1cEV4dGVudGlvbigpIHtcblx0XHRjb25zdCBleHRlbnNpb24gPSBpbmxpbmVTdWdnZXN0aW9uKHtcblx0XHRcdGZldGNoRm46ICgpID0+IHRoaXMuZ2VuZXJhdGVTdWdnZXN0aW9ucygpLFxuXHRcdFx0ZGVsYXk6IDUwMCxcblx0XHRcdGNvbnRpbnVlX3N1Z2dlc3Rpbmc6IGZhbHNlLFxuXHRcdFx0YWNjZXB0X3Nob3J0Y3V0OiAnVGFiJyxcblx0XHR9KTtcblxuXHRcdHRoaXMucmVnaXN0ZXJFZGl0b3JFeHRlbnNpb24oZXh0ZW5zaW9uKTtcblx0fVxuXG5cdGFzeW5jICpnZW5lcmF0ZVN1Z2dlc3Rpb25zKCk6IEFzeW5jR2VuZXJhdG9yPFN1Z2dlc3Rpb24sIHZvaWQsIHVua25vd24+IHtcblx0XHRsZXQgbWFya2Rvd25GaWxlSW5mbyA9IHRoaXMuYXBwLndvcmtzcGFjZS5hY3RpdmVFZGl0b3I7XG5cdFx0aWYgKCFtYXJrZG93bkZpbGVJbmZvKSByZXR1cm47XG5cblx0XHRjb25zdCBlZGl0b3IgPSBtYXJrZG93bkZpbGVJbmZvLmVkaXRvciBhcyBFZGl0b3I7XG5cdFx0Y29uc3QgY3Vyc29yID0gZWRpdG9yLmdldEN1cnNvcigpO1xuXG5cdFx0Ly8gSWYgdGhlIGN1cnJlbnQgbGluZSBpcyBlbXB0eSwgZG9uJ3Qgc3VnZ2VzdCBhbnl0aGluZy5cblx0XHRjb25zdCBjdXJyZW50TGluZSA9IGVkaXRvci5nZXRMaW5lKGN1cnNvci5saW5lKTtcblx0XHRpZiAoIWN1cnJlbnRMaW5lLmxlbmd0aCkge1xuXHRcdFx0eWllbGQge1xuXHRcdFx0XHRkaXNwbGF5X3N1Z2dlc3Rpb246IFwiXCIsXG5cdFx0XHRcdGNvbXBsZXRlX3N1Z2dlc3Rpb246IFwiXCIsXG5cdFx0XHR9O1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9ubHkgaWYgdGhlIGxhc3QgY2hhcmFjdGVyIGlzIGEgc3BhY2Ugb3IgZG90LCBzdWdnZXN0IGNvbXBsZXRpb25zLlxuXHRcdGNvbnN0IGxhc3RDaGFyID0gY3VycmVudExpbmVbY3Vyc29yLmNoIC0gMV07XG5cdFx0aWYgKGxhc3RDaGFyICE9PSBcIiBcIikge1xuXHRcdFx0eWllbGQgeyBkaXNwbGF5X3N1Z2dlc3Rpb246IFwiXCIsIGNvbXBsZXRlX3N1Z2dlc3Rpb246IFwiXCIgfTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb25zdCBiZWZvcmVDdXJzb3IgPSBlZGl0b3IuZ2V0UmFuZ2UoeyBsaW5lOiAwLCBjaDogMCB9LCBjdXJzb3IpO1xuXHRcdGNvbnN0IGFmdGVyQ3Vyc29yID0gZWRpdG9yLmdldFJhbmdlKGN1cnNvcixcblx0XHRcdHsgbGluZTogZWRpdG9yLmxhc3RMaW5lKCksIGNoOiBlZGl0b3IuZ2V0TGluZShlZGl0b3IubGFzdExpbmUoKSkubGVuZ3RoIH0pO1xuXG5cdFx0dGhpcy5wcm92aWRlci5hYm9ydCgpO1xuXHRcdHlpZWxkKiB0aGlzLnByb3ZpZGVyLmdlbmVyYXRlKGJlZm9yZUN1cnNvciwgYWZ0ZXJDdXJzb3IpO1xuXHR9XG5cblx0YXN5bmMgbG9hZFNldHRpbmdzKCkge1xuXHRcdHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKFxuXHRcdFx0e30sXG5cdFx0XHRERUZBVUxUX1NFVFRJTkdTLFxuXHRcdFx0YXdhaXQgdGhpcy5sb2FkRGF0YSgpXG5cdFx0KTtcblx0fVxuXG5cdGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcblx0XHRhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xuXHRcdGF3YWl0IHRoaXMubG9hZE1vZGVsKCk7XG5cdH1cbn1cbiIsICIvKipcbiAqIEBwYXJhbSBmIGNhbGxiYWNrXG4gKiBAcGFyYW0gd2FpdCBtaWxsaXNlY29uZHNcbiAqIEBwYXJhbSBhYm9ydFZhbHVlIGlmIGhhcyBhYm9ydFZhbHVlLCBwcm9taXNlIHdpbGwgcmVqZWN0IGl0IGlmXG4gKiBAcmV0dXJucyBkZWJvdW5jZWQ6IFByb21pc2UsIGZvcmNlOiAoKSA9PiB2b2lkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWJvdW5jZVByb21pc2U8VCBleHRlbmRzICguLi5hcmdzOiBhbnlbXSkgPT4gYW55PihcbiAgZm46IFQsXG4gIHdhaXQ6IG51bWJlcixcbiAgYWJvcnRWYWx1ZTogYW55ID0gdW5kZWZpbmVkXG4pOiB7XG4gIGRlYm91bmNlZDogKC4uLmFyZ3M6IFBhcmFtZXRlcnM8VD4pID0+IFByb21pc2U8QXdhaXRlZDxSZXR1cm5UeXBlPFQ+Pj47XG4gIGZvcmNlOiAoKSA9PiB2b2lkO1xufSB7XG4gIGxldCBjYW5jZWwgPSAoKSA9PiB7XG4gICAgLy8gZG8gbm90aGluZ1xuICB9O1xuICBjb25zdCBmb3JjZSA9IHtcbiAgICBmb3JjZTogKCkgPT4ge1xuICAgICAgLy8gZG8gbm90aGluZ1xuICAgIH0sXG4gIH07XG4gIC8vIHR5cGUgQXdhaXRlZDxUPiA9IFQgZXh0ZW5kcyBQcm9taXNlTGlrZTxpbmZlciBVPiA/IFUgOiBUXG4gIHR5cGUgUmV0dXJuVCA9IEF3YWl0ZWQ8UmV0dXJuVHlwZTxUPj47XG4gIGNvbnN0IHdyYXBGdW5jID0gKC4uLmFyZ3M6IFBhcmFtZXRlcnM8VD4pOiBQcm9taXNlPFJldHVyblQ+ID0+IHtcbiAgICBjYW5jZWwoKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgdGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHJlc29sdmUoZm4oLi4uYXJncykpLCB3YWl0KTtcbiAgICAgIGNhbmNlbCA9ICgpID0+IHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgICAgaWYgKGFib3J0VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJlamVjdChhYm9ydFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGZvcmNlLmZvcmNlID0gKCkgPT4ge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICByZXNvbHZlKGZuKC4uLmFyZ3MpKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIHsgZGVib3VuY2VkOiB3cmFwRnVuYywgZm9yY2U6ICgpID0+IGZvcmNlLmZvcmNlKCkgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlYm91bmNlQXN5bmNHZW5lcmF0b3I8VFBhcmFtcywgVD4oXG4gIGZuOiAoLi4uYXJnczogVFBhcmFtc1tdKSA9PiBBc3luY0dlbmVyYXRvcjxULCB2b2lkLCB2b2lkPixcbiAgd2FpdDogbnVtYmVyLFxuICBhYm9ydFZhbHVlOiBhbnkgPSB1bmRlZmluZWRcbik6IHtcbiAgZGVib3VuY2VkOiAoLi4uYXJnczogVFBhcmFtc1tdKSA9PiBBc3luY0dlbmVyYXRvcjxULCB2b2lkLCB2b2lkPjtcbiAgZm9yY2U6ICgpID0+IHZvaWQ7XG59IHtcbiAgY29uc3QgZm9yY2UgPSB7XG4gICAgZm9yY2U6ICgpID0+IHtcbiAgICAgIC8vIGRvIG5vdGhpbmdcbiAgICB9LFxuICB9O1xuICBsZXQgdGltZXI6IG51bWJlciB8IG51bGwgPSBudWxsO1xuXG4gIGFzeW5jIGZ1bmN0aW9uKiB3cmFwRnVuYyguLi5hcmdzOiBUUGFyYW1zW10pOiBBc3luY0dlbmVyYXRvcjxULCB2b2lkLCB2b2lkPiB7XG4gICAgdGltZXIgJiYgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICBsZXQgb3duX3RpbWVyOiBudW1iZXIgfCBudWxsID0gbnVsbDtcblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSkgPT4ge1xuICAgICAgICBvd25fdGltZXIgPSB0aW1lciA9IHNldFRpbWVvdXQoKCkgPT4gcmVzb2x2ZSgpLCB3YWl0KTtcbiAgICAgICAgZm9yY2UuZm9yY2UgPSAoKSA9PiB7XG4gICAgICAgICAgdGltZXIgJiYgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoYWJvcnRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IGFib3J0VmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIGF3YWl0IChjb25zdCBpdGVtIG9mIGZuKC4uLmFyZ3MpKSB7XG4gICAgICBpZiAob3duX3RpbWVyICE9PSB0aW1lcikge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHlpZWxkIGl0ZW07XG4gICAgfVxuICB9XG4gIHJldHVybiB7IGRlYm91bmNlZDogd3JhcEZ1bmMsIGZvcmNlOiAoKSA9PiBmb3JjZS5mb3JjZSgpIH07XG59XG4iLCAiaW1wb3J0IHtcbiAgVmlld1BsdWdpbixcbiAgRGVjb3JhdGlvblNldCxcbiAgRWRpdG9yVmlldyxcbiAgVmlld1VwZGF0ZSxcbiAgRGVjb3JhdGlvbixcbiAgV2lkZ2V0VHlwZSxcbiAga2V5bWFwLFxufSBmcm9tICdAY29kZW1pcnJvci92aWV3JztcbmltcG9ydCB7XG4gIFN0YXRlRWZmZWN0LFxuICBUZXh0LFxuICBQcmVjLFxuICBTdGF0ZUZpZWxkLFxuICBFZGl0b3JTdGF0ZSxcbiAgRWRpdG9yU2VsZWN0aW9uLFxuICBUcmFuc2FjdGlvblNwZWMsXG59IGZyb20gJ0Bjb2RlbWlycm9yL3N0YXRlJztcbmltcG9ydCB7IGRlYm91bmNlQXN5bmNHZW5lcmF0b3IgfSBmcm9tICcuL2xpYi91dGlscyc7XG5cbi8vIFNwbGl0dGluZyB0aGlzIHVwIHRvIGFsbG93ICBzb21lb25lIHRvIGRpc3BsYXkgYSB3aG9sZSBzZW50ZW5jZSBhcyBhIHN1Z2dlc3Rpb25cbi8vIHdoaWxlIG9ubHkgbGV0dGluZyB0aGUgdGFiIGtleSBpbnNlcnQgdGhlIG5leHQgd29yZCBldGMuXG5leHBvcnQgdHlwZSBTdWdnZXN0aW9uID0ge1xuICBjb21wbGV0ZV9zdWdnZXN0aW9uOiBzdHJpbmc7XG4gIGRpc3BsYXlfc3VnZ2VzdGlvbjogc3RyaW5nO1xuICBhY2NlcHRfaG9vaz86ICgpID0+IHZvaWQ7XG59O1xuXG4vLyBDdXJyZW50IHN0YXRlIG9mIHRoZSBhdXRvc3VnZ2VzdGlvblxuY29uc3QgSW5saW5lU3VnZ2VzdGlvblN0YXRlID0gU3RhdGVGaWVsZC5kZWZpbmU8e1xuICBzdWdnZXN0aW9uOiBudWxsIHwgU3VnZ2VzdGlvbjtcbn0+KHtcbiAgY3JlYXRlKCkge1xuICAgIHJldHVybiB7IHN1Z2dlc3Rpb246IG51bGwgfTtcbiAgfSxcbiAgdXBkYXRlKF9fOiBhbnksIHRyOiBhbnkpIHtcbiAgICBjb25zdCBpbmxpbmVTdWdnZXN0aW9uID0gdHIuZWZmZWN0cy5maW5kKChlOiBhbnkpID0+XG4gICAgICBlLmlzKElubGluZVN1Z2dlc3Rpb25FZmZlY3QpXG4gICAgKTtcbiAgICBpZiAodHIuc3RhdGUuZG9jKVxuICAgICAgaWYgKFxuICAgICAgICBpbmxpbmVTdWdnZXN0aW9uICYmXG4gICAgICAgIChpbmxpbmVTdWdnZXN0aW9uLnZhbHVlLmRvYyA9PSBudWxsIHx8XG4gICAgICAgICAgdHIuc3RhdGUuZG9jID09IGlubGluZVN1Z2dlc3Rpb24udmFsdWUuZG9jKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB7IHN1Z2dlc3Rpb246IGlubGluZVN1Z2dlc3Rpb24udmFsdWUuc3VnZ2VzdGlvbiB9O1xuICAgICAgfVxuICAgIHJldHVybiB7IHN1Z2dlc3Rpb246IG51bGwgfTtcbiAgfSxcbn0pO1xuXG5jb25zdCBJbmxpbmVTdWdnZXN0aW9uRWZmZWN0ID0gU3RhdGVFZmZlY3QuZGVmaW5lPHtcbiAgc3VnZ2VzdGlvbjogU3VnZ2VzdGlvbiB8IG51bGw7XG4gIGRvYzogVGV4dCB8IG51bGw7XG59PigpO1xuXG4vKipcbiAqIFByb3ZpZGVzIGEgc3VnZ2VzdGlvbiBmb3IgdGhlIG5leHQgd29yZFxuICovXG5mdW5jdGlvbiBpbmxpbmVTdWdnZXN0aW9uRGVjb3JhdGlvbih2aWV3OiBFZGl0b3JWaWV3LCBwcmVmaXg6IHN0cmluZykge1xuICBjb25zdCBwb3MgPSB2aWV3LnN0YXRlLnNlbGVjdGlvbi5tYWluLmhlYWQ7XG4gIGNvbnN0IHdpZGdldHMgPSBbXTtcbiAgY29uc3QgdyA9IERlY29yYXRpb24ud2lkZ2V0KHtcbiAgICB3aWRnZXQ6IG5ldyBJbmxpbmVTdWdnZXN0aW9uV2lkZ2V0KHByZWZpeCksXG4gICAgc2lkZTogMSxcbiAgfSk7XG4gIHdpZGdldHMucHVzaCh3LnJhbmdlKHBvcykpO1xuICByZXR1cm4gRGVjb3JhdGlvbi5zZXQod2lkZ2V0cyk7XG59XG5cbmNsYXNzIElubGluZVN1Z2dlc3Rpb25XaWRnZXQgZXh0ZW5kcyBXaWRnZXRUeXBlIHtcbiAgc3VnZ2VzdGlvbjogc3RyaW5nO1xuICBjb25zdHJ1Y3RvcihzdWdnZXN0aW9uOiBzdHJpbmcpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuc3VnZ2VzdGlvbiA9IHN1Z2dlc3Rpb247XG4gIH1cbiAgdG9ET00oKSB7XG4gICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIGRpdi5zdHlsZS5vcGFjaXR5ID0gJzAuNCc7XG4gICAgZGl2LmNsYXNzTmFtZSA9ICdjbS1pbmxpbmUtc3VnZ2VzdGlvbic7XG4gICAgZGl2LnRleHRDb250ZW50ID0gdGhpcy5zdWdnZXN0aW9uO1xuICAgIHJldHVybiBkaXY7XG4gIH1cbn1cblxudHlwZSBJbmxpbmVGZXRjaEZuID0gKHN0YXRlOiBFZGl0b3JTdGF0ZSkgPT4gQXN5bmNHZW5lcmF0b3I8U3VnZ2VzdGlvbj47XG5cbmV4cG9ydCBjb25zdCBmZXRjaFN1Z2dlc3Rpb24gPSAoZmV0Y2hGbjogSW5saW5lRmV0Y2hGbikgPT4ge1xuICBsZXQgc3VnZ2VzdGlvbklkID0gMDtcbiAgcmV0dXJuIFZpZXdQbHVnaW4uZnJvbUNsYXNzKFxuICAgIGNsYXNzIEZldGNoUGx1Z2luIHtcbiAgICAgIGFzeW5jIHVwZGF0ZSh1cGRhdGU6IFZpZXdVcGRhdGUpIHtcbiAgICAgICAgY29uc3QgZG9jID0gdXBkYXRlLnN0YXRlLmRvYztcbiAgICAgICAgLy8gT25seSBmZXRjaCBpZiB0aGUgZG9jdW1lbnQgaGFzIGNoYW5nZWRcbiAgICAgICAgaWYgKCF1cGRhdGUuZG9jQ2hhbmdlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjdXJyZW50U3VnZ2VzdGlvbklkID0gKytzdWdnZXN0aW9uSWQ7XG4gICAgICAgIGZvciBhd2FpdCAoY29uc3QgcmVzdWx0IG9mIGZldGNoRm4odXBkYXRlLnN0YXRlKSkge1xuICAgICAgICAgIGlmIChjdXJyZW50U3VnZ2VzdGlvbklkICE9IHN1Z2dlc3Rpb25JZCkgcmV0dXJuO1xuICAgICAgICAgIHVwZGF0ZS52aWV3LmRpc3BhdGNoKHtcbiAgICAgICAgICAgIGVmZmVjdHM6IElubGluZVN1Z2dlc3Rpb25FZmZlY3Qub2Yoe1xuICAgICAgICAgICAgICBzdWdnZXN0aW9uOiByZXN1bHQsXG4gICAgICAgICAgICAgIGRvYzogZG9jLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICk7XG59O1xuXG5jbGFzcyBSZW5kZXJQbHVnaW4ge1xuICBkZWNvcmF0aW9uczogRGVjb3JhdGlvblNldDtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLy8gRW1wdHkgZGVjb3JhdGlvbnNcbiAgICB0aGlzLmRlY29yYXRpb25zID0gRGVjb3JhdGlvbi5ub25lO1xuICB9XG4gIHVwZGF0ZSh1cGRhdGU6IFZpZXdVcGRhdGUpIHtcbiAgICBjb25zdCBzdWdnZXN0aW9uOiBTdWdnZXN0aW9uIHwgbnVsbCA9IHVwZGF0ZS5zdGF0ZS5maWVsZChcbiAgICAgIElubGluZVN1Z2dlc3Rpb25TdGF0ZVxuICAgICk/LnN1Z2dlc3Rpb247XG4gICAgaWYgKCFzdWdnZXN0aW9uKSB7XG4gICAgICB0aGlzLmRlY29yYXRpb25zID0gRGVjb3JhdGlvbi5ub25lO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmRlY29yYXRpb25zID0gaW5saW5lU3VnZ2VzdGlvbkRlY29yYXRpb24oXG4gICAgICB1cGRhdGUudmlldyxcbiAgICAgIHN1Z2dlc3Rpb24uZGlzcGxheV9zdWdnZXN0aW9uXG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCByZW5kZXJJbmxpbmVTdWdnZXN0aW9uUGx1Z2luID0gVmlld1BsdWdpbi5mcm9tQ2xhc3MoUmVuZGVyUGx1Z2luLCB7XG4gIGRlY29yYXRpb25zOiAodjogUmVuZGVyUGx1Z2luKSA9PiB2LmRlY29yYXRpb25zLFxufSk7XG5cbmNsYXNzIGlubGluZVN1Z2dlc3Rpb25LZXltYXAge1xuICBzdWdnZXN0Rm46IElubGluZUZldGNoRm4gfCBudWxsO1xuICBrZXltYXA6IGFueTtcbiAgY29tcGxldGlvbklkOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3Ioc3VnZ2VzdEZuOiBJbmxpbmVGZXRjaEZuIHwgbnVsbCwgYWNjZXB0X3Nob3J0Y3V0OiBzdHJpbmcpIHtcbiAgICB0aGlzLnN1Z2dlc3RGbiA9IHN1Z2dlc3RGbjtcbiAgICB0aGlzLmtleW1hcCA9IFByZWMuaGlnaGVzdChcbiAgICAgIGtleW1hcC5vZihbXG4gICAgICAgIHtcbiAgICAgICAgICBrZXk6IGFjY2VwdF9zaG9ydGN1dCxcbiAgICAgICAgICBydW46ICh2aWV3OiBFZGl0b3JWaWV3KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ydW4odmlldyk7XG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIF0pXG4gICAgKTtcbiAgICB0aGlzLmNvbXBsZXRpb25JZCA9IDA7XG4gIH1cblxuICBydW4gPSAodmlldzogRWRpdG9yVmlldykgPT4ge1xuICAgIGNvbnN0IHN1Z2dlc3Rpb246IFN1Z2dlc3Rpb24gfCBudWxsID0gdmlldy5zdGF0ZS5maWVsZChcbiAgICAgIElubGluZVN1Z2dlc3Rpb25TdGF0ZVxuICAgICk/LnN1Z2dlc3Rpb247XG5cbiAgICAvLyBJZiB0aGVyZSBpcyBubyBzdWdnZXN0aW9uLCBkbyBub3RoaW5nIGFuZCBsZXQgdGhlIGRlZmF1bHQga2V5bWFwIGhhbmRsZSBpdFxuICAgIGlmICghc3VnZ2VzdGlvbikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZpZXcuZGlzcGF0Y2goe1xuICAgICAgLi4uaW5zZXJ0Q29tcGxldGlvblRleHQoXG4gICAgICAgIHZpZXcuc3RhdGUsXG4gICAgICAgIHN1Z2dlc3Rpb24uY29tcGxldGVfc3VnZ2VzdGlvbixcbiAgICAgICAgdmlldy5zdGF0ZS5zZWxlY3Rpb24ubWFpbi5oZWFkLFxuICAgICAgICB2aWV3LnN0YXRlLnNlbGVjdGlvbi5tYWluLmhlYWRcbiAgICAgICksXG4gICAgfSk7XG4gICAgc3VnZ2VzdGlvbi5hY2NlcHRfaG9vaz8uKCk7XG5cbiAgICAvLyBSZS10cmlnZ2VyIHRoZSBzdWdnZXN0aW9uXG4gICAgY29uc3QgcmV0cmlnZ2VyID0gYXN5bmMgKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuc3VnZ2VzdEZuID09IG51bGwpIHJldHVybjtcbiAgICAgIGNvbnN0IGNvbXBsZXRpb25JZCA9ICsrdGhpcy5jb21wbGV0aW9uSWQ7XG4gICAgICBmb3IgYXdhaXQgKGNvbnN0IHJlc3VsdCBvZiB0aGlzLnN1Z2dlc3RGbih2aWV3LnN0YXRlKSkge1xuICAgICAgICBpZiAoY29tcGxldGlvbklkICE9IHRoaXMuY29tcGxldGlvbklkKSByZXR1cm47XG4gICAgICAgIHZpZXcuZGlzcGF0Y2goe1xuICAgICAgICAgIGVmZmVjdHM6IElubGluZVN1Z2dlc3Rpb25FZmZlY3Qub2Yoe1xuICAgICAgICAgICAgc3VnZ2VzdGlvbjoge1xuICAgICAgICAgICAgICBjb21wbGV0ZV9zdWdnZXN0aW9uOiByZXN1bHQuY29tcGxldGVfc3VnZ2VzdGlvbixcbiAgICAgICAgICAgICAgZGlzcGxheV9zdWdnZXN0aW9uOiByZXN1bHQuZGlzcGxheV9zdWdnZXN0aW9uLFxuICAgICAgICAgICAgICBhY2NlcHRfaG9vazogcmVzdWx0LmFjY2VwdF9ob29rLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRvYzogbnVsbCxcbiAgICAgICAgICB9KSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXRyaWdnZXIoKTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBpbnNlcnRDb21wbGV0aW9uVGV4dChcbiAgc3RhdGU6IEVkaXRvclN0YXRlLFxuICB0ZXh0OiBzdHJpbmcsXG4gIGZyb206IG51bWJlcixcbiAgdG86IG51bWJlclxuKTogVHJhbnNhY3Rpb25TcGVjIHtcbiAgcmV0dXJuIHtcbiAgICAuLi5zdGF0ZS5jaGFuZ2VCeVJhbmdlKChyYW5nZSkgPT4ge1xuICAgICAgaWYgKHJhbmdlID09IHN0YXRlLnNlbGVjdGlvbi5tYWluKVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNoYW5nZXM6IHsgZnJvbTogZnJvbSwgdG86IHRvLCBpbnNlcnQ6IHRleHQgfSxcbiAgICAgICAgICByYW5nZTogRWRpdG9yU2VsZWN0aW9uLmN1cnNvcihmcm9tICsgdGV4dC5sZW5ndGgpLFxuICAgICAgICB9O1xuICAgICAgY29uc3QgbGVuID0gdG8gLSBmcm9tO1xuICAgICAgaWYgKFxuICAgICAgICAhcmFuZ2UuZW1wdHkgfHxcbiAgICAgICAgKGxlbiAmJlxuICAgICAgICAgIHN0YXRlLnNsaWNlRG9jKHJhbmdlLmZyb20gLSBsZW4sIHJhbmdlLmZyb20pICE9XG4gICAgICAgICAgICBzdGF0ZS5zbGljZURvYyhmcm9tLCB0bykpXG4gICAgICApXG4gICAgICAgIHJldHVybiB7IHJhbmdlIH07XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjaGFuZ2VzOiB7IGZyb206IHJhbmdlLmZyb20gLSBsZW4sIHRvOiByYW5nZS5mcm9tLCBpbnNlcnQ6IHRleHQgfSxcbiAgICAgICAgcmFuZ2U6IEVkaXRvclNlbGVjdGlvbi5jdXJzb3IocmFuZ2UuZnJvbSAtIGxlbiArIHRleHQubGVuZ3RoKSxcbiAgICAgIH07XG4gICAgfSksXG4gICAgdXNlckV2ZW50OiAnaW5wdXQuY29tcGxldGUnLFxuICB9O1xufVxuXG50eXBlIElubGluZVN1Z2dlc3Rpb25PcHRpb25zID0ge1xuICBmZXRjaEZuOiAoXG4gICAgc3RhdGU6IEVkaXRvclN0YXRlXG4gICkgPT4gUHJvbWlzZTxzdHJpbmcgfCBTdWdnZXN0aW9uPiB8IEFzeW5jR2VuZXJhdG9yPFN1Z2dlc3Rpb24+O1xuICBkZWxheT86IG51bWJlcjtcbiAgY29udGludWVfc3VnZ2VzdGluZz86IGJvb2xlYW47XG4gIGFjY2VwdF9zaG9ydGN1dD86IHN0cmluZyB8IG51bGw7XG59O1xuXG4vLyBUaGlzIGlzIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuZnVuY3Rpb24gdG9TdWdnZXN0aW9uKHN1Z2dlc3Rpb246IHN0cmluZyB8IFN1Z2dlc3Rpb24pOiBTdWdnZXN0aW9uIHtcbiAgaWYgKHR5cGVvZiBzdWdnZXN0aW9uID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB7XG4gICAgICBjb21wbGV0ZV9zdWdnZXN0aW9uOiBzdWdnZXN0aW9uLFxuICAgICAgZGlzcGxheV9zdWdnZXN0aW9uOiBzdWdnZXN0aW9uLFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHN1Z2dlc3Rpb247XG59XG5cbmZ1bmN0aW9uIHRvU3VnZ2VzdGlvbkZuKFxuICBmZXRjaEZuOiAoXG4gICAgc3RhdGU6IEVkaXRvclN0YXRlXG4gICkgPT4gUHJvbWlzZTxzdHJpbmcgfCBTdWdnZXN0aW9uPiB8IEFzeW5jR2VuZXJhdG9yPFN1Z2dlc3Rpb24+XG4pOiBJbmxpbmVGZXRjaEZuIHtcbiAgcmV0dXJuIGFzeW5jIGZ1bmN0aW9uKiAoc3RhdGU6IEVkaXRvclN0YXRlKSB7XG4gICAgY29uc3Qgc3VnZ2VzdGlvbiA9IGF3YWl0IGZldGNoRm4oc3RhdGUpO1xuXG4gICAgLy8gSWYgaXQncyBhIHN0cmluZyBvciBhIFN1Z2dlc3Rpb25cbiAgICBpZiAodHlwZW9mIHN1Z2dlc3Rpb24gPT09ICdzdHJpbmcnIHx8ICdjb21wbGV0ZV9zdWdnZXN0aW9uJyBpbiBzdWdnZXN0aW9uKSB7XG4gICAgICB5aWVsZCB0b1N1Z2dlc3Rpb24oc3VnZ2VzdGlvbik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yIGF3YWl0IChjb25zdCBzIG9mIHN1Z2dlc3Rpb24pIHtcbiAgICAgIHlpZWxkIHRvU3VnZ2VzdGlvbihzKTtcbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbmxpbmVTdWdnZXN0aW9uKG9wdGlvbnM6IElubGluZVN1Z2dlc3Rpb25PcHRpb25zKSB7XG4gIGNvbnN0IHsgZGVsYXkgPSA1MDAsIGFjY2VwdF9zaG9ydGN1dCA9ICdUYWInIH0gPSBvcHRpb25zO1xuICBjb25zdCBmZXRjaEZuID0gdG9TdWdnZXN0aW9uRm4ob3B0aW9ucy5mZXRjaEZuKTtcbiAgY29uc3QgeyBkZWJvdW5jZWQ6IGRlYm91bmNlZF9mZXRjaEZuIH0gPSBkZWJvdW5jZUFzeW5jR2VuZXJhdG9yKFxuICAgIGZldGNoRm4sXG4gICAgZGVsYXlcbiAgKTtcbiAgcmV0dXJuIGFjY2VwdF9zaG9ydGN1dFxuICAgID8gW1xuICAgICAgICBJbmxpbmVTdWdnZXN0aW9uU3RhdGUsXG4gICAgICAgIGZldGNoU3VnZ2VzdGlvbihkZWJvdW5jZWRfZmV0Y2hGbiksXG4gICAgICAgIHJlbmRlcklubGluZVN1Z2dlc3Rpb25QbHVnaW4sXG4gICAgICAgIG5ldyBpbmxpbmVTdWdnZXN0aW9uS2V5bWFwKFxuICAgICAgICAgIG9wdGlvbnMuY29udGludWVfc3VnZ2VzdGluZyA/IGZldGNoRm4gOiBudWxsLFxuICAgICAgICAgIGFjY2VwdF9zaG9ydGN1dFxuICAgICAgICApLmtleW1hcCxcbiAgICAgIF1cbiAgICA6IFtcbiAgICAgICAgSW5saW5lU3VnZ2VzdGlvblN0YXRlLFxuICAgICAgICBmZXRjaFN1Z2dlc3Rpb24oZGVib3VuY2VkX2ZldGNoRm4pLFxuICAgICAgICByZW5kZXJJbmxpbmVTdWdnZXN0aW9uUGx1Z2luLFxuICAgICAgXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcmNlYWJsZUlubGluZVN1Z2dlc3Rpb24ob3B0aW9uczogSW5saW5lU3VnZ2VzdGlvbk9wdGlvbnMpIHtcbiAgY29uc3QgeyBkZWxheSA9IDUwMCwgYWNjZXB0X3Nob3J0Y3V0ID0gJ1RhYicgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IGZldGNoRm4gPSB0b1N1Z2dlc3Rpb25GbihvcHRpb25zLmZldGNoRm4pO1xuICBjb25zdCB7IGRlYm91bmNlZDogZGVib3VuY2VkX2ZldGNoRm4sIGZvcmNlOiBmb3JjZV9mZXRjaCB9ID1cbiAgICBkZWJvdW5jZUFzeW5jR2VuZXJhdG9yKGZldGNoRm4sIGRlbGF5KTtcbiAgcmV0dXJuIHtcbiAgICBleHRlbnNpb246IGFjY2VwdF9zaG9ydGN1dFxuICAgICAgPyBbXG4gICAgICAgICAgSW5saW5lU3VnZ2VzdGlvblN0YXRlLFxuICAgICAgICAgIGZldGNoU3VnZ2VzdGlvbihkZWJvdW5jZWRfZmV0Y2hGbiksXG4gICAgICAgICAgcmVuZGVySW5saW5lU3VnZ2VzdGlvblBsdWdpbixcbiAgICAgICAgICBuZXcgaW5saW5lU3VnZ2VzdGlvbktleW1hcChcbiAgICAgICAgICAgIG9wdGlvbnMuY29udGludWVfc3VnZ2VzdGluZyA/IGZldGNoRm4gOiBudWxsLFxuICAgICAgICAgICAgYWNjZXB0X3Nob3J0Y3V0XG4gICAgICAgICAgKS5rZXltYXAsXG4gICAgICAgIF1cbiAgICAgIDogW1xuICAgICAgICAgIElubGluZVN1Z2dlc3Rpb25TdGF0ZSxcbiAgICAgICAgICBmZXRjaFN1Z2dlc3Rpb24oZGVib3VuY2VkX2ZldGNoRm4pLFxuICAgICAgICAgIHJlbmRlcklubGluZVN1Z2dlc3Rpb25QbHVnaW4sXG4gICAgICAgIF0sXG4gICAgZm9yY2VfZmV0Y2g6IGZvcmNlX2ZldGNoLFxuICB9O1xufVxuIiwgIi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvdHlwZS1idWlsdGlucyAqL1xudmFyIGcgPVxuICAodHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbFRoaXMpIHx8XG4gICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZikgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWwpIHx8XG4gIHt9XG5cbnZhciBzdXBwb3J0ID0ge1xuICBzZWFyY2hQYXJhbXM6ICdVUkxTZWFyY2hQYXJhbXMnIGluIGcsXG4gIGl0ZXJhYmxlOiAnU3ltYm9sJyBpbiBnICYmICdpdGVyYXRvcicgaW4gU3ltYm9sLFxuICBibG9iOlxuICAgICdGaWxlUmVhZGVyJyBpbiBnICYmXG4gICAgJ0Jsb2InIGluIGcgJiZcbiAgICAoZnVuY3Rpb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICBuZXcgQmxvYigpXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH0pKCksXG4gIGZvcm1EYXRhOiAnRm9ybURhdGEnIGluIGcsXG4gIGFycmF5QnVmZmVyOiAnQXJyYXlCdWZmZXInIGluIGdcbn1cblxuZnVuY3Rpb24gaXNEYXRhVmlldyhvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBEYXRhVmlldy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihvYmopXG59XG5cbmlmIChzdXBwb3J0LmFycmF5QnVmZmVyKSB7XG4gIHZhciB2aWV3Q2xhc3NlcyA9IFtcbiAgICAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDMyQXJyYXldJyxcbiAgICAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICAnW29iamVjdCBGbG9hdDY0QXJyYXldJ1xuICBdXG5cbiAgdmFyIGlzQXJyYXlCdWZmZXJWaWV3ID1cbiAgICBBcnJheUJ1ZmZlci5pc1ZpZXcgfHxcbiAgICBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdmlld0NsYXNzZXMuaW5kZXhPZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSkgPiAtMVxuICAgIH1cbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplTmFtZShuYW1lKSB7XG4gIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICBuYW1lID0gU3RyaW5nKG5hbWUpXG4gIH1cbiAgaWYgKC9bXmEtejAtOVxcLSMkJSYnKisuXl9gfH4hXS9pLnRlc3QobmFtZSkgfHwgbmFtZSA9PT0gJycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGNoYXJhY3RlciBpbiBoZWFkZXIgZmllbGQgbmFtZTogXCInICsgbmFtZSArICdcIicpXG4gIH1cbiAgcmV0dXJuIG5hbWUudG9Mb3dlckNhc2UoKVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKVxuICB9XG4gIHJldHVybiB2YWx1ZVxufVxuXG4vLyBCdWlsZCBhIGRlc3RydWN0aXZlIGl0ZXJhdG9yIGZvciB0aGUgdmFsdWUgbGlzdFxuZnVuY3Rpb24gaXRlcmF0b3JGb3IoaXRlbXMpIHtcbiAgdmFyIGl0ZXJhdG9yID0ge1xuICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHZhbHVlID0gaXRlbXMuc2hpZnQoKVxuICAgICAgcmV0dXJuIHtkb25lOiB2YWx1ZSA9PT0gdW5kZWZpbmVkLCB2YWx1ZTogdmFsdWV9XG4gICAgfVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuaXRlcmFibGUpIHtcbiAgICBpdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gaXRlcmF0b3JcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaXRlcmF0b3Jcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEhlYWRlcnMoaGVhZGVycykge1xuICB0aGlzLm1hcCA9IHt9XG5cbiAgaWYgKGhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzKSB7XG4gICAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICB0aGlzLmFwcGVuZChuYW1lLCB2YWx1ZSlcbiAgICB9LCB0aGlzKVxuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaGVhZGVycykpIHtcbiAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24oaGVhZGVyKSB7XG4gICAgICBpZiAoaGVhZGVyLmxlbmd0aCAhPSAyKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0hlYWRlcnMgY29uc3RydWN0b3I6IGV4cGVjdGVkIG5hbWUvdmFsdWUgcGFpciB0byBiZSBsZW5ndGggMiwgZm91bmQnICsgaGVhZGVyLmxlbmd0aClcbiAgICAgIH1cbiAgICAgIHRoaXMuYXBwZW5kKGhlYWRlclswXSwgaGVhZGVyWzFdKVxuICAgIH0sIHRoaXMpXG4gIH0gZWxzZSBpZiAoaGVhZGVycykge1xuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGhlYWRlcnMpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgICAgdGhpcy5hcHBlbmQobmFtZSwgaGVhZGVyc1tuYW1lXSlcbiAgICB9LCB0aGlzKVxuICB9XG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpXG4gIHZhbHVlID0gbm9ybWFsaXplVmFsdWUodmFsdWUpXG4gIHZhciBvbGRWYWx1ZSA9IHRoaXMubWFwW25hbWVdXG4gIHRoaXMubWFwW25hbWVdID0gb2xkVmFsdWUgPyBvbGRWYWx1ZSArICcsICcgKyB2YWx1ZSA6IHZhbHVlXG59XG5cbkhlYWRlcnMucHJvdG90eXBlWydkZWxldGUnXSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgZGVsZXRlIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgbmFtZSA9IG5vcm1hbGl6ZU5hbWUobmFtZSlcbiAgcmV0dXJuIHRoaXMuaGFzKG5hbWUpID8gdGhpcy5tYXBbbmFtZV0gOiBudWxsXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIHRoaXMubWFwLmhhc093blByb3BlcnR5KG5vcm1hbGl6ZU5hbWUobmFtZSkpXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldID0gbm9ybWFsaXplVmFsdWUodmFsdWUpXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbihjYWxsYmFjaywgdGhpc0FyZykge1xuICBmb3IgKHZhciBuYW1lIGluIHRoaXMubWFwKSB7XG4gICAgaWYgKHRoaXMubWFwLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHRoaXMubWFwW25hbWVdLCBuYW1lLCB0aGlzKVxuICAgIH1cbiAgfVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5rZXlzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpdGVtcyA9IFtdXG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgIGl0ZW1zLnB1c2gobmFtZSlcbiAgfSlcbiAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGl0ZW1zID0gW11cbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaXRlbXMucHVzaCh2YWx1ZSlcbiAgfSlcbiAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpdGVtcyA9IFtdXG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgIGl0ZW1zLnB1c2goW25hbWUsIHZhbHVlXSlcbiAgfSlcbiAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxufVxuXG5pZiAoc3VwcG9ydC5pdGVyYWJsZSkge1xuICBIZWFkZXJzLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID0gSGVhZGVycy5wcm90b3R5cGUuZW50cmllc1xufVxuXG5mdW5jdGlvbiBjb25zdW1lZChib2R5KSB7XG4gIGlmIChib2R5Ll9ub0JvZHkpIHJldHVyblxuICBpZiAoYm9keS5ib2R5VXNlZCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKSlcbiAgfVxuICBib2R5LmJvZHlVc2VkID0gdHJ1ZVxufVxuXG5mdW5jdGlvbiBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXNvbHZlKHJlYWRlci5yZXN1bHQpXG4gICAgfVxuICAgIHJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICByZWplY3QocmVhZGVyLmVycm9yKVxuICAgIH1cbiAgfSlcbn1cblxuZnVuY3Rpb24gcmVhZEJsb2JBc0FycmF5QnVmZmVyKGJsb2IpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgdmFyIHByb21pc2UgPSBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoYmxvYilcbiAgcmV0dXJuIHByb21pc2Vcbn1cblxuZnVuY3Rpb24gcmVhZEJsb2JBc1RleHQoYmxvYikge1xuICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICB2YXIgcHJvbWlzZSA9IGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpXG4gIHZhciBtYXRjaCA9IC9jaGFyc2V0PShbQS1aYS16MC05Xy1dKykvLmV4ZWMoYmxvYi50eXBlKVxuICB2YXIgZW5jb2RpbmcgPSBtYXRjaCA/IG1hdGNoWzFdIDogJ3V0Zi04J1xuICByZWFkZXIucmVhZEFzVGV4dChibG9iLCBlbmNvZGluZylcbiAgcmV0dXJuIHByb21pc2Vcbn1cblxuZnVuY3Rpb24gcmVhZEFycmF5QnVmZmVyQXNUZXh0KGJ1Zikge1xuICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1ZilcbiAgdmFyIGNoYXJzID0gbmV3IEFycmF5KHZpZXcubGVuZ3RoKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmlldy5sZW5ndGg7IGkrKykge1xuICAgIGNoYXJzW2ldID0gU3RyaW5nLmZyb21DaGFyQ29kZSh2aWV3W2ldKVxuICB9XG4gIHJldHVybiBjaGFycy5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBidWZmZXJDbG9uZShidWYpIHtcbiAgaWYgKGJ1Zi5zbGljZSkge1xuICAgIHJldHVybiBidWYuc2xpY2UoMClcbiAgfSBlbHNlIHtcbiAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1Zi5ieXRlTGVuZ3RoKVxuICAgIHZpZXcuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZikpXG4gICAgcmV0dXJuIHZpZXcuYnVmZmVyXG4gIH1cbn1cblxuZnVuY3Rpb24gQm9keSgpIHtcbiAgdGhpcy5ib2R5VXNlZCA9IGZhbHNlXG5cbiAgdGhpcy5faW5pdEJvZHkgPSBmdW5jdGlvbihib2R5KSB7XG4gICAgLypcbiAgICAgIGZldGNoLW1vY2sgd3JhcHMgdGhlIFJlc3BvbnNlIG9iamVjdCBpbiBhbiBFUzYgUHJveHkgdG9cbiAgICAgIHByb3ZpZGUgdXNlZnVsIHRlc3QgaGFybmVzcyBmZWF0dXJlcyBzdWNoIGFzIGZsdXNoLiBIb3dldmVyLCBvblxuICAgICAgRVM1IGJyb3dzZXJzIHdpdGhvdXQgZmV0Y2ggb3IgUHJveHkgc3VwcG9ydCBwb2xseWZpbGxzIG11c3QgYmUgdXNlZDtcbiAgICAgIHRoZSBwcm94eS1wb2xseWZpbGwgaXMgdW5hYmxlIHRvIHByb3h5IGFuIGF0dHJpYnV0ZSB1bmxlc3MgaXQgZXhpc3RzXG4gICAgICBvbiB0aGUgb2JqZWN0IGJlZm9yZSB0aGUgUHJveHkgaXMgY3JlYXRlZC4gVGhpcyBjaGFuZ2UgZW5zdXJlc1xuICAgICAgUmVzcG9uc2UuYm9keVVzZWQgZXhpc3RzIG9uIHRoZSBpbnN0YW5jZSwgd2hpbGUgbWFpbnRhaW5pbmcgdGhlXG4gICAgICBzZW1hbnRpYyBvZiBzZXR0aW5nIFJlcXVlc3QuYm9keVVzZWQgaW4gdGhlIGNvbnN0cnVjdG9yIGJlZm9yZVxuICAgICAgX2luaXRCb2R5IGlzIGNhbGxlZC5cbiAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWFzc2lnblxuICAgIHRoaXMuYm9keVVzZWQgPSB0aGlzLmJvZHlVc2VkXG4gICAgdGhpcy5fYm9keUluaXQgPSBib2R5XG4gICAgaWYgKCFib2R5KSB7XG4gICAgICB0aGlzLl9ub0JvZHkgPSB0cnVlO1xuICAgICAgdGhpcy5fYm9keVRleHQgPSAnJ1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYmxvYiAmJiBCbG9iLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5QmxvYiA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuZm9ybURhdGEgJiYgRm9ybURhdGEucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlGb3JtRGF0YSA9IGJvZHlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuc2VhcmNoUGFyYW1zICYmIFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5LnRvU3RyaW5nKClcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgc3VwcG9ydC5ibG9iICYmIGlzRGF0YVZpZXcoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkuYnVmZmVyKVxuICAgICAgLy8gSUUgMTAtMTEgY2FuJ3QgaGFuZGxlIGEgRGF0YVZpZXcgYm9keS5cbiAgICAgIHRoaXMuX2JvZHlJbml0ID0gbmV3IEJsb2IoW3RoaXMuX2JvZHlBcnJheUJ1ZmZlcl0pXG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIChBcnJheUJ1ZmZlci5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSB8fCBpc0FycmF5QnVmZmVyVmlldyhib2R5KSkpIHtcbiAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChib2R5KVxuICAgIH1cblxuICAgIGlmICghdGhpcy5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJykpIHtcbiAgICAgIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCcpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlCbG9iICYmIHRoaXMuX2JvZHlCbG9iLnR5cGUpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgdGhpcy5fYm9keUJsb2IudHlwZSlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD1VVEYtOCcpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuYmxvYikge1xuICAgIHRoaXMuYmxvYiA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUJsb2IpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKSlcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyBibG9iJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlUZXh0XSkpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdGhpcy5hcnJheUJ1ZmZlciA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgIHZhciBpc0NvbnN1bWVkID0gY29uc3VtZWQodGhpcylcbiAgICAgIGlmIChpc0NvbnN1bWVkKSB7XG4gICAgICAgIHJldHVybiBpc0NvbnN1bWVkXG4gICAgICB9IGVsc2UgaWYgKEFycmF5QnVmZmVyLmlzVmlldyh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoXG4gICAgICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyLmJ1ZmZlci5zbGljZShcbiAgICAgICAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlci5ieXRlT2Zmc2V0LFxuICAgICAgICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyLmJ5dGVPZmZzZXQgKyB0aGlzLl9ib2R5QXJyYXlCdWZmZXIuYnl0ZUxlbmd0aFxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmJsb2IpIHtcbiAgICAgIHJldHVybiB0aGlzLmJsb2IoKS50aGVuKHJlYWRCbG9iQXNBcnJheUJ1ZmZlcilcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBhcyBBcnJheUJ1ZmZlcicpXG4gICAgfVxuICB9XG5cbiAgdGhpcy50ZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiByZWplY3RlZFxuICAgIH1cblxuICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgcmV0dXJuIHJlYWRCbG9iQXNUZXh0KHRoaXMuX2JvZHlCbG9iKVxuICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlYWRBcnJheUJ1ZmZlckFzVGV4dCh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpKVxuICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgdGV4dCcpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keVRleHQpXG4gICAgfVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuZm9ybURhdGEpIHtcbiAgICB0aGlzLmZvcm1EYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihkZWNvZGUpXG4gICAgfVxuICB9XG5cbiAgdGhpcy5qc29uID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oSlNPTi5wYXJzZSlcbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhUVFAgbWV0aG9kcyB3aG9zZSBjYXBpdGFsaXphdGlvbiBzaG91bGQgYmUgbm9ybWFsaXplZFxudmFyIG1ldGhvZHMgPSBbJ0NPTk5FQ1QnLCAnREVMRVRFJywgJ0dFVCcsICdIRUFEJywgJ09QVElPTlMnLCAnUEFUQ0gnLCAnUE9TVCcsICdQVVQnLCAnVFJBQ0UnXVxuXG5mdW5jdGlvbiBub3JtYWxpemVNZXRob2QobWV0aG9kKSB7XG4gIHZhciB1cGNhc2VkID0gbWV0aG9kLnRvVXBwZXJDYXNlKClcbiAgcmV0dXJuIG1ldGhvZHMuaW5kZXhPZih1cGNhc2VkKSA+IC0xID8gdXBjYXNlZCA6IG1ldGhvZFxufVxuXG5leHBvcnQgZnVuY3Rpb24gUmVxdWVzdChpbnB1dCwgb3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVxdWVzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQbGVhc2UgdXNlIHRoZSBcIm5ld1wiIG9wZXJhdG9yLCB0aGlzIERPTSBvYmplY3QgY29uc3RydWN0b3IgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLicpXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICB2YXIgYm9keSA9IG9wdGlvbnMuYm9keVxuXG4gIGlmIChpbnB1dCBpbnN0YW5jZW9mIFJlcXVlc3QpIHtcbiAgICBpZiAoaW5wdXQuYm9keVVzZWQpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpXG4gICAgfVxuICAgIHRoaXMudXJsID0gaW5wdXQudXJsXG4gICAgdGhpcy5jcmVkZW50aWFscyA9IGlucHV0LmNyZWRlbnRpYWxzXG4gICAgaWYgKCFvcHRpb25zLmhlYWRlcnMpIHtcbiAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKGlucHV0LmhlYWRlcnMpXG4gICAgfVxuICAgIHRoaXMubWV0aG9kID0gaW5wdXQubWV0aG9kXG4gICAgdGhpcy5tb2RlID0gaW5wdXQubW9kZVxuICAgIHRoaXMuc2lnbmFsID0gaW5wdXQuc2lnbmFsXG4gICAgaWYgKCFib2R5ICYmIGlucHV0Ll9ib2R5SW5pdCAhPSBudWxsKSB7XG4gICAgICBib2R5ID0gaW5wdXQuX2JvZHlJbml0XG4gICAgICBpbnB1dC5ib2R5VXNlZCA9IHRydWVcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy51cmwgPSBTdHJpbmcoaW5wdXQpXG4gIH1cblxuICB0aGlzLmNyZWRlbnRpYWxzID0gb3B0aW9ucy5jcmVkZW50aWFscyB8fCB0aGlzLmNyZWRlbnRpYWxzIHx8ICdzYW1lLW9yaWdpbidcbiAgaWYgKG9wdGlvbnMuaGVhZGVycyB8fCAhdGhpcy5oZWFkZXJzKSB7XG4gICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuICB9XG4gIHRoaXMubWV0aG9kID0gbm9ybWFsaXplTWV0aG9kKG9wdGlvbnMubWV0aG9kIHx8IHRoaXMubWV0aG9kIHx8ICdHRVQnKVxuICB0aGlzLm1vZGUgPSBvcHRpb25zLm1vZGUgfHwgdGhpcy5tb2RlIHx8IG51bGxcbiAgdGhpcy5zaWduYWwgPSBvcHRpb25zLnNpZ25hbCB8fCB0aGlzLnNpZ25hbCB8fCAoZnVuY3Rpb24gKCkge1xuICAgIGlmICgnQWJvcnRDb250cm9sbGVyJyBpbiBnKSB7XG4gICAgICB2YXIgY3RybCA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICAgIHJldHVybiBjdHJsLnNpZ25hbDtcbiAgICB9XG4gIH0oKSk7XG4gIHRoaXMucmVmZXJyZXIgPSBudWxsXG5cbiAgaWYgKCh0aGlzLm1ldGhvZCA9PT0gJ0dFVCcgfHwgdGhpcy5tZXRob2QgPT09ICdIRUFEJykgJiYgYm9keSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JvZHkgbm90IGFsbG93ZWQgZm9yIEdFVCBvciBIRUFEIHJlcXVlc3RzJylcbiAgfVxuICB0aGlzLl9pbml0Qm9keShib2R5KVxuXG4gIGlmICh0aGlzLm1ldGhvZCA9PT0gJ0dFVCcgfHwgdGhpcy5tZXRob2QgPT09ICdIRUFEJykge1xuICAgIGlmIChvcHRpb25zLmNhY2hlID09PSAnbm8tc3RvcmUnIHx8IG9wdGlvbnMuY2FjaGUgPT09ICduby1jYWNoZScpIHtcbiAgICAgIC8vIFNlYXJjaCBmb3IgYSAnXycgcGFyYW1ldGVyIGluIHRoZSBxdWVyeSBzdHJpbmdcbiAgICAgIHZhciByZVBhcmFtU2VhcmNoID0gLyhbPyZdKV89W14mXSovXG4gICAgICBpZiAocmVQYXJhbVNlYXJjaC50ZXN0KHRoaXMudXJsKSkge1xuICAgICAgICAvLyBJZiBpdCBhbHJlYWR5IGV4aXN0cyB0aGVuIHNldCB0aGUgdmFsdWUgd2l0aCB0aGUgY3VycmVudCB0aW1lXG4gICAgICAgIHRoaXMudXJsID0gdGhpcy51cmwucmVwbGFjZShyZVBhcmFtU2VhcmNoLCAnJDFfPScgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE90aGVyd2lzZSBhZGQgYSBuZXcgJ18nIHBhcmFtZXRlciB0byB0aGUgZW5kIHdpdGggdGhlIGN1cnJlbnQgdGltZVxuICAgICAgICB2YXIgcmVRdWVyeVN0cmluZyA9IC9cXD8vXG4gICAgICAgIHRoaXMudXJsICs9IChyZVF1ZXJ5U3RyaW5nLnRlc3QodGhpcy51cmwpID8gJyYnIDogJz8nKSArICdfPScgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5SZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFJlcXVlc3QodGhpcywge2JvZHk6IHRoaXMuX2JvZHlJbml0fSlcbn1cblxuZnVuY3Rpb24gZGVjb2RlKGJvZHkpIHtcbiAgdmFyIGZvcm0gPSBuZXcgRm9ybURhdGEoKVxuICBib2R5XG4gICAgLnRyaW0oKVxuICAgIC5zcGxpdCgnJicpXG4gICAgLmZvckVhY2goZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgIGlmIChieXRlcykge1xuICAgICAgICB2YXIgc3BsaXQgPSBieXRlcy5zcGxpdCgnPScpXG4gICAgICAgIHZhciBuYW1lID0gc3BsaXQuc2hpZnQoKS5yZXBsYWNlKC9cXCsvZywgJyAnKVxuICAgICAgICB2YXIgdmFsdWUgPSBzcGxpdC5qb2luKCc9JykucmVwbGFjZSgvXFwrL2csICcgJylcbiAgICAgICAgZm9ybS5hcHBlbmQoZGVjb2RlVVJJQ29tcG9uZW50KG5hbWUpLCBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpKVxuICAgICAgfVxuICAgIH0pXG4gIHJldHVybiBmb3JtXG59XG5cbmZ1bmN0aW9uIHBhcnNlSGVhZGVycyhyYXdIZWFkZXJzKSB7XG4gIHZhciBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKVxuICAvLyBSZXBsYWNlIGluc3RhbmNlcyBvZiBcXHJcXG4gYW5kIFxcbiBmb2xsb3dlZCBieSBhdCBsZWFzdCBvbmUgc3BhY2Ugb3IgaG9yaXpvbnRhbCB0YWIgd2l0aCBhIHNwYWNlXG4gIC8vIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM3MjMwI3NlY3Rpb24tMy4yXG4gIHZhciBwcmVQcm9jZXNzZWRIZWFkZXJzID0gcmF3SGVhZGVycy5yZXBsYWNlKC9cXHI/XFxuW1xcdCBdKy9nLCAnICcpXG4gIC8vIEF2b2lkaW5nIHNwbGl0IHZpYSByZWdleCB0byB3b3JrIGFyb3VuZCBhIGNvbW1vbiBJRTExIGJ1ZyB3aXRoIHRoZSBjb3JlLWpzIDMuNi4wIHJlZ2V4IHBvbHlmaWxsXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9naXRodWIvZmV0Y2gvaXNzdWVzLzc0OFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNzUxXG4gIHByZVByb2Nlc3NlZEhlYWRlcnNcbiAgICAuc3BsaXQoJ1xccicpXG4gICAgLm1hcChmdW5jdGlvbihoZWFkZXIpIHtcbiAgICAgIHJldHVybiBoZWFkZXIuaW5kZXhPZignXFxuJykgPT09IDAgPyBoZWFkZXIuc3Vic3RyKDEsIGhlYWRlci5sZW5ndGgpIDogaGVhZGVyXG4gICAgfSlcbiAgICAuZm9yRWFjaChmdW5jdGlvbihsaW5lKSB7XG4gICAgICB2YXIgcGFydHMgPSBsaW5lLnNwbGl0KCc6JylcbiAgICAgIHZhciBrZXkgPSBwYXJ0cy5zaGlmdCgpLnRyaW0oKVxuICAgICAgaWYgKGtleSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBwYXJ0cy5qb2luKCc6JykudHJpbSgpXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaGVhZGVycy5hcHBlbmQoa2V5LCB2YWx1ZSlcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ1Jlc3BvbnNlICcgKyBlcnJvci5tZXNzYWdlKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgcmV0dXJuIGhlYWRlcnNcbn1cblxuQm9keS5jYWxsKFJlcXVlc3QucHJvdG90eXBlKVxuXG5leHBvcnQgZnVuY3Rpb24gUmVzcG9uc2UoYm9keUluaXQsIG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlc3BvbnNlKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1BsZWFzZSB1c2UgdGhlIFwibmV3XCIgb3BlcmF0b3IsIHRoaXMgRE9NIG9iamVjdCBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uJylcbiAgfVxuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge31cbiAgfVxuXG4gIHRoaXMudHlwZSA9ICdkZWZhdWx0J1xuICB0aGlzLnN0YXR1cyA9IG9wdGlvbnMuc3RhdHVzID09PSB1bmRlZmluZWQgPyAyMDAgOiBvcHRpb25zLnN0YXR1c1xuICBpZiAodGhpcy5zdGF0dXMgPCAyMDAgfHwgdGhpcy5zdGF0dXMgPiA1OTkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkZhaWxlZCB0byBjb25zdHJ1Y3QgJ1Jlc3BvbnNlJzogVGhlIHN0YXR1cyBwcm92aWRlZCAoMCkgaXMgb3V0c2lkZSB0aGUgcmFuZ2UgWzIwMCwgNTk5XS5cIilcbiAgfVxuICB0aGlzLm9rID0gdGhpcy5zdGF0dXMgPj0gMjAwICYmIHRoaXMuc3RhdHVzIDwgMzAwXG4gIHRoaXMuc3RhdHVzVGV4dCA9IG9wdGlvbnMuc3RhdHVzVGV4dCA9PT0gdW5kZWZpbmVkID8gJycgOiAnJyArIG9wdGlvbnMuc3RhdHVzVGV4dFxuICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpXG4gIHRoaXMudXJsID0gb3B0aW9ucy51cmwgfHwgJydcbiAgdGhpcy5faW5pdEJvZHkoYm9keUluaXQpXG59XG5cbkJvZHkuY2FsbChSZXNwb25zZS5wcm90b3R5cGUpXG5cblJlc3BvbnNlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFJlc3BvbnNlKHRoaXMuX2JvZHlJbml0LCB7XG4gICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICBzdGF0dXNUZXh0OiB0aGlzLnN0YXR1c1RleHQsXG4gICAgaGVhZGVyczogbmV3IEhlYWRlcnModGhpcy5oZWFkZXJzKSxcbiAgICB1cmw6IHRoaXMudXJsXG4gIH0pXG59XG5cblJlc3BvbnNlLmVycm9yID0gZnVuY3Rpb24oKSB7XG4gIHZhciByZXNwb25zZSA9IG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiAyMDAsIHN0YXR1c1RleHQ6ICcnfSlcbiAgcmVzcG9uc2Uub2sgPSBmYWxzZVxuICByZXNwb25zZS5zdGF0dXMgPSAwXG4gIHJlc3BvbnNlLnR5cGUgPSAnZXJyb3InXG4gIHJldHVybiByZXNwb25zZVxufVxuXG52YXIgcmVkaXJlY3RTdGF0dXNlcyA9IFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF1cblxuUmVzcG9uc2UucmVkaXJlY3QgPSBmdW5jdGlvbih1cmwsIHN0YXR1cykge1xuICBpZiAocmVkaXJlY3RTdGF0dXNlcy5pbmRleE9mKHN0YXR1cykgPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgc3RhdHVzIGNvZGUnKVxuICB9XG5cbiAgcmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiBzdGF0dXMsIGhlYWRlcnM6IHtsb2NhdGlvbjogdXJsfX0pXG59XG5cbmV4cG9ydCB2YXIgRE9NRXhjZXB0aW9uID0gZy5ET01FeGNlcHRpb25cbnRyeSB7XG4gIG5ldyBET01FeGNlcHRpb24oKVxufSBjYXRjaCAoZXJyKSB7XG4gIERPTUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKG1lc3NhZ2UsIG5hbWUpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlXG4gICAgdGhpcy5uYW1lID0gbmFtZVxuICAgIHZhciBlcnJvciA9IEVycm9yKG1lc3NhZ2UpXG4gICAgdGhpcy5zdGFjayA9IGVycm9yLnN0YWNrXG4gIH1cbiAgRE9NRXhjZXB0aW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKVxuICBET01FeGNlcHRpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRE9NRXhjZXB0aW9uXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmZXRjaChpbnB1dCwgaW5pdCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgUmVxdWVzdChpbnB1dCwgaW5pdClcblxuICAgIGlmIChyZXF1ZXN0LnNpZ25hbCAmJiByZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICByZXR1cm4gcmVqZWN0KG5ldyBET01FeGNlcHRpb24oJ0Fib3J0ZWQnLCAnQWJvcnRFcnJvcicpKVxuICAgIH1cblxuICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKVxuXG4gICAgZnVuY3Rpb24gYWJvcnRYaHIoKSB7XG4gICAgICB4aHIuYWJvcnQoKVxuICAgIH1cblxuICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICBzdGF0dXNUZXh0OiB4aHIuc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcGFyc2VIZWFkZXJzKHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSB8fCAnJylcbiAgICAgIH1cbiAgICAgIC8vIFRoaXMgY2hlY2sgaWYgc3BlY2lmaWNhbGx5IGZvciB3aGVuIGEgdXNlciBmZXRjaGVzIGEgZmlsZSBsb2NhbGx5IGZyb20gdGhlIGZpbGUgc3lzdGVtXG4gICAgICAvLyBPbmx5IGlmIHRoZSBzdGF0dXMgaXMgb3V0IG9mIGEgbm9ybWFsIHJhbmdlXG4gICAgICBpZiAocmVxdWVzdC51cmwuaW5kZXhPZignZmlsZTovLycpID09PSAwICYmICh4aHIuc3RhdHVzIDwgMjAwIHx8IHhoci5zdGF0dXMgPiA1OTkpKSB7XG4gICAgICAgIG9wdGlvbnMuc3RhdHVzID0gMjAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3B0aW9ucy5zdGF0dXMgPSB4aHIuc3RhdHVzO1xuICAgICAgfVxuICAgICAgb3B0aW9ucy51cmwgPSAncmVzcG9uc2VVUkwnIGluIHhociA/IHhoci5yZXNwb25zZVVSTCA6IG9wdGlvbnMuaGVhZGVycy5nZXQoJ1gtUmVxdWVzdC1VUkwnKVxuICAgICAgdmFyIGJvZHkgPSAncmVzcG9uc2UnIGluIHhociA/IHhoci5yZXNwb25zZSA6IHhoci5yZXNwb25zZVRleHRcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlc29sdmUobmV3IFJlc3BvbnNlKGJvZHksIG9wdGlvbnMpKVxuICAgICAgfSwgMClcbiAgICB9XG5cbiAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICAgIH0sIDApXG4gICAgfVxuXG4gICAgeGhyLm9udGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCB0aW1lZCBvdXQnKSlcbiAgICAgIH0sIDApXG4gICAgfVxuXG4gICAgeGhyLm9uYWJvcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChuZXcgRE9NRXhjZXB0aW9uKCdBYm9ydGVkJywgJ0Fib3J0RXJyb3InKSlcbiAgICAgIH0sIDApXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZml4VXJsKHVybCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHVybCA9PT0gJycgJiYgZy5sb2NhdGlvbi5ocmVmID8gZy5sb2NhdGlvbi5ocmVmIDogdXJsXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiB1cmxcbiAgICAgIH1cbiAgICB9XG5cbiAgICB4aHIub3BlbihyZXF1ZXN0Lm1ldGhvZCwgZml4VXJsKHJlcXVlc3QudXJsKSwgdHJ1ZSlcblxuICAgIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnaW5jbHVkZScpIHtcbiAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlXG4gICAgfSBlbHNlIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnb21pdCcpIHtcbiAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSBmYWxzZVxuICAgIH1cblxuICAgIGlmICgncmVzcG9uc2VUeXBlJyBpbiB4aHIpIHtcbiAgICAgIGlmIChzdXBwb3J0LmJsb2IpIHtcbiAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdibG9iJ1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgc3VwcG9ydC5hcnJheUJ1ZmZlclxuICAgICAgKSB7XG4gICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYXJyYXlidWZmZXInXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGluaXQgJiYgdHlwZW9mIGluaXQuaGVhZGVycyA9PT0gJ29iamVjdCcgJiYgIShpbml0LmhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzIHx8IChnLkhlYWRlcnMgJiYgaW5pdC5oZWFkZXJzIGluc3RhbmNlb2YgZy5IZWFkZXJzKSkpIHtcbiAgICAgIHZhciBuYW1lcyA9IFtdO1xuICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaW5pdC5oZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgbmFtZXMucHVzaChub3JtYWxpemVOYW1lKG5hbWUpKVxuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCBub3JtYWxpemVWYWx1ZShpbml0LmhlYWRlcnNbbmFtZV0pKVxuICAgICAgfSlcbiAgICAgIHJlcXVlc3QuaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICAgIGlmIChuYW1lcy5pbmRleE9mKG5hbWUpID09PSAtMSkge1xuICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIHZhbHVlKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICByZXF1ZXN0LmhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCB2YWx1ZSlcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgaWYgKHJlcXVlc3Quc2lnbmFsKSB7XG4gICAgICByZXF1ZXN0LnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIGFib3J0WGhyKVxuXG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIERPTkUgKHN1Y2Nlc3Mgb3IgZmFpbHVyZSlcbiAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgcmVxdWVzdC5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydFhocilcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHhoci5zZW5kKHR5cGVvZiByZXF1ZXN0Ll9ib2R5SW5pdCA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogcmVxdWVzdC5fYm9keUluaXQpXG4gIH0pXG59XG5cbmZldGNoLnBvbHlmaWxsID0gdHJ1ZVxuXG5pZiAoIWcuZmV0Y2gpIHtcbiAgZy5mZXRjaCA9IGZldGNoXG4gIGcuSGVhZGVycyA9IEhlYWRlcnNcbiAgZy5SZXF1ZXN0ID0gUmVxdWVzdFxuICBnLlJlc3BvbnNlID0gUmVzcG9uc2Vcbn1cbiIsICJpbXBvcnQgJ3doYXR3Zy1mZXRjaCc7XG5cbmNvbnN0IHZlcnNpb24gPSBcIjAuNS4xMVwiO1xuXG52YXIgX19kZWZQcm9wJDEgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19kZWZOb3JtYWxQcm9wJDEgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wJDEob2JqLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSwgdmFsdWUgfSkgOiBvYmpba2V5XSA9IHZhbHVlO1xudmFyIF9fcHVibGljRmllbGQkMSA9IChvYmosIGtleSwgdmFsdWUpID0+IHtcbiAgX19kZWZOb3JtYWxQcm9wJDEob2JqLCB0eXBlb2Yga2V5ICE9PSBcInN5bWJvbFwiID8ga2V5ICsgXCJcIiA6IGtleSwgdmFsdWUpO1xuICByZXR1cm4gdmFsdWU7XG59O1xuY2xhc3MgUmVzcG9uc2VFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IoZXJyb3IsIHN0YXR1c19jb2RlKSB7XG4gICAgc3VwZXIoZXJyb3IpO1xuICAgIHRoaXMuZXJyb3IgPSBlcnJvcjtcbiAgICB0aGlzLnN0YXR1c19jb2RlID0gc3RhdHVzX2NvZGU7XG4gICAgdGhpcy5uYW1lID0gXCJSZXNwb25zZUVycm9yXCI7XG4gICAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBSZXNwb25zZUVycm9yKTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIEFib3J0YWJsZUFzeW5jSXRlcmF0b3Ige1xuICBjb25zdHJ1Y3RvcihhYm9ydENvbnRyb2xsZXIsIGl0ciwgZG9uZUNhbGxiYWNrKSB7XG4gICAgX19wdWJsaWNGaWVsZCQxKHRoaXMsIFwiYWJvcnRDb250cm9sbGVyXCIpO1xuICAgIF9fcHVibGljRmllbGQkMSh0aGlzLCBcIml0clwiKTtcbiAgICBfX3B1YmxpY0ZpZWxkJDEodGhpcywgXCJkb25lQ2FsbGJhY2tcIik7XG4gICAgdGhpcy5hYm9ydENvbnRyb2xsZXIgPSBhYm9ydENvbnRyb2xsZXI7XG4gICAgdGhpcy5pdHIgPSBpdHI7XG4gICAgdGhpcy5kb25lQ2FsbGJhY2sgPSBkb25lQ2FsbGJhY2s7XG4gIH1cbiAgYWJvcnQoKSB7XG4gICAgdGhpcy5hYm9ydENvbnRyb2xsZXIuYWJvcnQoKTtcbiAgfVxuICBhc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBmb3IgYXdhaXQgKGNvbnN0IG1lc3NhZ2Ugb2YgdGhpcy5pdHIpIHtcbiAgICAgIGlmIChcImVycm9yXCIgaW4gbWVzc2FnZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZS5lcnJvcik7XG4gICAgICB9XG4gICAgICB5aWVsZCBtZXNzYWdlO1xuICAgICAgaWYgKG1lc3NhZ2UuZG9uZSB8fCBtZXNzYWdlLnN0YXR1cyA9PT0gXCJzdWNjZXNzXCIpIHtcbiAgICAgICAgdGhpcy5kb25lQ2FsbGJhY2soKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJEaWQgbm90IHJlY2VpdmUgZG9uZSBvciBzdWNjZXNzIHJlc3BvbnNlIGluIHN0cmVhbS5cIik7XG4gIH1cbn1cbmNvbnN0IGNoZWNrT2sgPSBhc3luYyAocmVzcG9uc2UpID0+IHtcbiAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCBtZXNzYWdlID0gYEVycm9yICR7cmVzcG9uc2Uuc3RhdHVzfTogJHtyZXNwb25zZS5zdGF0dXNUZXh0fWA7XG4gIGxldCBlcnJvckRhdGEgPSBudWxsO1xuICBpZiAocmVzcG9uc2UuaGVhZGVycy5nZXQoXCJjb250ZW50LXR5cGVcIik/LmluY2x1ZGVzKFwiYXBwbGljYXRpb24vanNvblwiKSkge1xuICAgIHRyeSB7XG4gICAgICBlcnJvckRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICBtZXNzYWdlID0gZXJyb3JEYXRhLmVycm9yIHx8IG1lc3NhZ2U7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiRmFpbGVkIHRvIHBhcnNlIGVycm9yIHJlc3BvbnNlIGFzIEpTT05cIik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRyeSB7XG4gICAgICBjb25zb2xlLmxvZyhcIkdldHRpbmcgdGV4dCBmcm9tIHJlc3BvbnNlXCIpO1xuICAgICAgY29uc3QgdGV4dFJlc3BvbnNlID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICAgICAgbWVzc2FnZSA9IHRleHRSZXNwb25zZSB8fCBtZXNzYWdlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIkZhaWxlZCB0byBnZXQgdGV4dCBmcm9tIGVycm9yIHJlc3BvbnNlXCIpO1xuICAgIH1cbiAgfVxuICB0aHJvdyBuZXcgUmVzcG9uc2VFcnJvcihtZXNzYWdlLCByZXNwb25zZS5zdGF0dXMpO1xufTtcbmZ1bmN0aW9uIGdldFBsYXRmb3JtKCkge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubmF2aWdhdG9yKSB7XG4gICAgcmV0dXJuIGAke3dpbmRvdy5uYXZpZ2F0b3IucGxhdGZvcm0udG9Mb3dlckNhc2UoKX0gQnJvd3Nlci8ke25hdmlnYXRvci51c2VyQWdlbnR9O2A7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4gYCR7cHJvY2Vzcy5hcmNofSAke3Byb2Nlc3MucGxhdGZvcm19IE5vZGUuanMvJHtwcm9jZXNzLnZlcnNpb259YDtcbiAgfVxuICByZXR1cm4gXCJcIjtcbn1cbmNvbnN0IGZldGNoV2l0aEhlYWRlcnMgPSBhc3luYyAoZmV0Y2gsIHVybCwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gIGNvbnN0IGRlZmF1bHRIZWFkZXJzID0ge1xuICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIEFjY2VwdDogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgXCJVc2VyLUFnZW50XCI6IGBvbGxhbWEtanMvJHt2ZXJzaW9ufSAoJHtnZXRQbGF0Zm9ybSgpfSlgXG4gIH07XG4gIGlmICghb3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgb3B0aW9ucy5oZWFkZXJzID0ge307XG4gIH1cbiAgY29uc3QgY3VzdG9tSGVhZGVycyA9IE9iamVjdC5mcm9tRW50cmllcyhcbiAgICBPYmplY3QuZW50cmllcyhvcHRpb25zLmhlYWRlcnMpLmZpbHRlcigoW2tleV0pID0+ICFPYmplY3Qua2V5cyhkZWZhdWx0SGVhZGVycykuc29tZSgoZGVmYXVsdEtleSkgPT4gZGVmYXVsdEtleS50b0xvd2VyQ2FzZSgpID09PSBrZXkudG9Mb3dlckNhc2UoKSkpXG4gICk7XG4gIG9wdGlvbnMuaGVhZGVycyA9IHtcbiAgICAuLi5kZWZhdWx0SGVhZGVycyxcbiAgICAuLi5jdXN0b21IZWFkZXJzXG4gIH07XG4gIHJldHVybiBmZXRjaCh1cmwsIG9wdGlvbnMpO1xufTtcbmNvbnN0IGdldCA9IGFzeW5jIChmZXRjaCwgaG9zdCwgb3B0aW9ucykgPT4ge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoV2l0aEhlYWRlcnMoZmV0Y2gsIGhvc3QsIHtcbiAgICBoZWFkZXJzOiBvcHRpb25zPy5oZWFkZXJzXG4gIH0pO1xuICBhd2FpdCBjaGVja09rKHJlc3BvbnNlKTtcbiAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmNvbnN0IGhlYWQgPSBhc3luYyAoZmV0Y2gsIGhvc3QpID0+IHtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaFdpdGhIZWFkZXJzKGZldGNoLCBob3N0LCB7XG4gICAgbWV0aG9kOiBcIkhFQURcIlxuICB9KTtcbiAgYXdhaXQgY2hlY2tPayhyZXNwb25zZSk7XG4gIHJldHVybiByZXNwb25zZTtcbn07XG5jb25zdCBwb3N0ID0gYXN5bmMgKGZldGNoLCBob3N0LCBkYXRhLCBvcHRpb25zKSA9PiB7XG4gIGNvbnN0IGlzUmVjb3JkID0gKGlucHV0KSA9PiB7XG4gICAgcmV0dXJuIGlucHV0ICE9PSBudWxsICYmIHR5cGVvZiBpbnB1dCA9PT0gXCJvYmplY3RcIiAmJiAhQXJyYXkuaXNBcnJheShpbnB1dCk7XG4gIH07XG4gIGNvbnN0IGZvcm1hdHRlZERhdGEgPSBpc1JlY29yZChkYXRhKSA/IEpTT04uc3RyaW5naWZ5KGRhdGEpIDogZGF0YTtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaFdpdGhIZWFkZXJzKGZldGNoLCBob3N0LCB7XG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBib2R5OiBmb3JtYXR0ZWREYXRhLFxuICAgIHNpZ25hbDogb3B0aW9ucz8uc2lnbmFsLFxuICAgIGhlYWRlcnM6IG9wdGlvbnM/LmhlYWRlcnNcbiAgfSk7XG4gIGF3YWl0IGNoZWNrT2socmVzcG9uc2UpO1xuICByZXR1cm4gcmVzcG9uc2U7XG59O1xuY29uc3QgZGVsID0gYXN5bmMgKGZldGNoLCBob3N0LCBkYXRhLCBvcHRpb25zKSA9PiB7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2hXaXRoSGVhZGVycyhmZXRjaCwgaG9zdCwge1xuICAgIG1ldGhvZDogXCJERUxFVEVcIixcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKSxcbiAgICBoZWFkZXJzOiBvcHRpb25zPy5oZWFkZXJzXG4gIH0pO1xuICBhd2FpdCBjaGVja09rKHJlc3BvbnNlKTtcbiAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmNvbnN0IHBhcnNlSlNPTiA9IGFzeW5jIGZ1bmN0aW9uKiAoaXRyKSB7XG4gIGNvbnN0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoXCJ1dGYtOFwiKTtcbiAgbGV0IGJ1ZmZlciA9IFwiXCI7XG4gIGNvbnN0IHJlYWRlciA9IGl0ci5nZXRSZWFkZXIoKTtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBjb25zdCB7IGRvbmUsIHZhbHVlOiBjaHVuayB9ID0gYXdhaXQgcmVhZGVyLnJlYWQoKTtcbiAgICBpZiAoZG9uZSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGJ1ZmZlciArPSBkZWNvZGVyLmRlY29kZShjaHVuayk7XG4gICAgY29uc3QgcGFydHMgPSBidWZmZXIuc3BsaXQoXCJcXG5cIik7XG4gICAgYnVmZmVyID0gcGFydHMucG9wKCkgPz8gXCJcIjtcbiAgICBmb3IgKGNvbnN0IHBhcnQgb2YgcGFydHMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHlpZWxkIEpTT04ucGFyc2UocGFydCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJpbnZhbGlkIGpzb246IFwiLCBwYXJ0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZm9yIChjb25zdCBwYXJ0IG9mIGJ1ZmZlci5zcGxpdChcIlxcblwiKS5maWx0ZXIoKHApID0+IHAgIT09IFwiXCIpKSB7XG4gICAgdHJ5IHtcbiAgICAgIHlpZWxkIEpTT04ucGFyc2UocGFydCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUud2FybihcImludmFsaWQganNvbjogXCIsIHBhcnQpO1xuICAgIH1cbiAgfVxufTtcbmNvbnN0IGZvcm1hdEhvc3QgPSAoaG9zdCkgPT4ge1xuICBpZiAoIWhvc3QpIHtcbiAgICByZXR1cm4gXCJodHRwOi8vMTI3LjAuMC4xOjExNDM0XCI7XG4gIH1cbiAgbGV0IGlzRXhwbGljaXRQcm90b2NvbCA9IGhvc3QuaW5jbHVkZXMoXCI6Ly9cIik7XG4gIGlmIChob3N0LnN0YXJ0c1dpdGgoXCI6XCIpKSB7XG4gICAgaG9zdCA9IGBodHRwOi8vMTI3LjAuMC4xJHtob3N0fWA7XG4gICAgaXNFeHBsaWNpdFByb3RvY29sID0gdHJ1ZTtcbiAgfVxuICBpZiAoIWlzRXhwbGljaXRQcm90b2NvbCkge1xuICAgIGhvc3QgPSBgaHR0cDovLyR7aG9zdH1gO1xuICB9XG4gIGNvbnN0IHVybCA9IG5ldyBVUkwoaG9zdCk7XG4gIGxldCBwb3J0ID0gdXJsLnBvcnQ7XG4gIGlmICghcG9ydCkge1xuICAgIGlmICghaXNFeHBsaWNpdFByb3RvY29sKSB7XG4gICAgICBwb3J0ID0gXCIxMTQzNFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICBwb3J0ID0gdXJsLnByb3RvY29sID09PSBcImh0dHBzOlwiID8gXCI0NDNcIiA6IFwiODBcIjtcbiAgICB9XG4gIH1cbiAgbGV0IGZvcm1hdHRlZEhvc3QgPSBgJHt1cmwucHJvdG9jb2x9Ly8ke3VybC5ob3N0bmFtZX06JHtwb3J0fSR7dXJsLnBhdGhuYW1lfWA7XG4gIGlmIChmb3JtYXR0ZWRIb3N0LmVuZHNXaXRoKFwiL1wiKSkge1xuICAgIGZvcm1hdHRlZEhvc3QgPSBmb3JtYXR0ZWRIb3N0LnNsaWNlKDAsIC0xKTtcbiAgfVxuICByZXR1cm4gZm9ybWF0dGVkSG9zdDtcbn07XG5cbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19kZWZOb3JtYWxQcm9wID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ga2V5IGluIG9iaiA/IF9fZGVmUHJvcChvYmosIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZSB9KSA6IG9ialtrZXldID0gdmFsdWU7XG52YXIgX19wdWJsaWNGaWVsZCA9IChvYmosIGtleSwgdmFsdWUpID0+IHtcbiAgX19kZWZOb3JtYWxQcm9wKG9iaiwgdHlwZW9mIGtleSAhPT0gXCJzeW1ib2xcIiA/IGtleSArIFwiXCIgOiBrZXksIHZhbHVlKTtcbiAgcmV0dXJuIHZhbHVlO1xufTtcbmxldCBPbGxhbWEkMSA9IGNsYXNzIE9sbGFtYSB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJjb25maWdcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImZldGNoXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJvbmdvaW5nU3RyZWFtZWRSZXF1ZXN0c1wiLCBbXSk7XG4gICAgdGhpcy5jb25maWcgPSB7XG4gICAgICBob3N0OiBcIlwiLFxuICAgICAgaGVhZGVyczogY29uZmlnPy5oZWFkZXJzXG4gICAgfTtcbiAgICBpZiAoIWNvbmZpZz8ucHJveHkpIHtcbiAgICAgIHRoaXMuY29uZmlnLmhvc3QgPSBmb3JtYXRIb3N0KGNvbmZpZz8uaG9zdCA/PyBcImh0dHA6Ly8xMjcuMC4wLjE6MTE0MzRcIik7XG4gICAgfVxuICAgIHRoaXMuZmV0Y2ggPSBjb25maWc/LmZldGNoID8/IGZldGNoO1xuICB9XG4gIC8vIEFib3J0IGFueSBvbmdvaW5nIHN0cmVhbWVkIHJlcXVlc3RzIHRvIE9sbGFtYVxuICBhYm9ydCgpIHtcbiAgICBmb3IgKGNvbnN0IHJlcXVlc3Qgb2YgdGhpcy5vbmdvaW5nU3RyZWFtZWRSZXF1ZXN0cykge1xuICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgIH1cbiAgICB0aGlzLm9uZ29pbmdTdHJlYW1lZFJlcXVlc3RzLmxlbmd0aCA9IDA7XG4gIH1cbiAgLyoqXG4gICAqIFByb2Nlc3NlcyBhIHJlcXVlc3QgdG8gdGhlIE9sbGFtYSBzZXJ2ZXIuIElmIHRoZSByZXF1ZXN0IGlzIHN0cmVhbWFibGUsIGl0IHdpbGwgcmV0dXJuIGFcbiAgICogQWJvcnRhYmxlQXN5bmNJdGVyYXRvciB0aGF0IHlpZWxkcyB0aGUgcmVzcG9uc2UgbWVzc2FnZXMuIE90aGVyd2lzZSwgaXQgd2lsbCByZXR1cm4gdGhlIHJlc3BvbnNlXG4gICAqIG9iamVjdC5cbiAgICogQHBhcmFtIGVuZHBvaW50IHtzdHJpbmd9IC0gVGhlIGVuZHBvaW50IHRvIHNlbmQgdGhlIHJlcXVlc3QgdG8uXG4gICAqIEBwYXJhbSByZXF1ZXN0IHtvYmplY3R9IC0gVGhlIHJlcXVlc3Qgb2JqZWN0IHRvIHNlbmQgdG8gdGhlIGVuZHBvaW50LlxuICAgKiBAcHJvdGVjdGVkIHtUIHwgQWJvcnRhYmxlQXN5bmNJdGVyYXRvcjxUPn0gLSBUaGUgcmVzcG9uc2Ugb2JqZWN0IG9yIGEgQWJvcnRhYmxlQXN5bmNJdGVyYXRvciB0aGF0IHlpZWxkc1xuICAgKiByZXNwb25zZSBtZXNzYWdlcy5cbiAgICogQHRocm93cyB7RXJyb3J9IC0gSWYgdGhlIHJlc3BvbnNlIGJvZHkgaXMgbWlzc2luZyBvciBpZiB0aGUgcmVzcG9uc2UgaXMgYW4gZXJyb3IuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFQgfCBBYm9ydGFibGVBc3luY0l0ZXJhdG9yPFQ+Pn0gLSBUaGUgcmVzcG9uc2Ugb2JqZWN0IG9yIGEgQWJvcnRhYmxlQXN5bmNJdGVyYXRvciB0aGF0IHlpZWxkcyB0aGUgc3RyZWFtZWQgcmVzcG9uc2UuXG4gICAqL1xuICBhc3luYyBwcm9jZXNzU3RyZWFtYWJsZVJlcXVlc3QoZW5kcG9pbnQsIHJlcXVlc3QpIHtcbiAgICByZXF1ZXN0LnN0cmVhbSA9IHJlcXVlc3Quc3RyZWFtID8/IGZhbHNlO1xuICAgIGNvbnN0IGhvc3QgPSBgJHt0aGlzLmNvbmZpZy5ob3N0fS9hcGkvJHtlbmRwb2ludH1gO1xuICAgIGlmIChyZXF1ZXN0LnN0cmVhbSkge1xuICAgICAgY29uc3QgYWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgICAgY29uc3QgcmVzcG9uc2UyID0gYXdhaXQgcG9zdCh0aGlzLmZldGNoLCBob3N0LCByZXF1ZXN0LCB7XG4gICAgICAgIHNpZ25hbDogYWJvcnRDb250cm9sbGVyLnNpZ25hbCxcbiAgICAgICAgaGVhZGVyczogdGhpcy5jb25maWcuaGVhZGVyc1xuICAgICAgfSk7XG4gICAgICBpZiAoIXJlc3BvbnNlMi5ib2R5KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgYm9keVwiKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGl0ciA9IHBhcnNlSlNPTihyZXNwb25zZTIuYm9keSk7XG4gICAgICBjb25zdCBhYm9ydGFibGVBc3luY0l0ZXJhdG9yID0gbmV3IEFib3J0YWJsZUFzeW5jSXRlcmF0b3IoXG4gICAgICAgIGFib3J0Q29udHJvbGxlcixcbiAgICAgICAgaXRyLFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgY29uc3QgaSA9IHRoaXMub25nb2luZ1N0cmVhbWVkUmVxdWVzdHMuaW5kZXhPZihhYm9ydGFibGVBc3luY0l0ZXJhdG9yKTtcbiAgICAgICAgICBpZiAoaSA+IC0xKSB7XG4gICAgICAgICAgICB0aGlzLm9uZ29pbmdTdHJlYW1lZFJlcXVlc3RzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgICB0aGlzLm9uZ29pbmdTdHJlYW1lZFJlcXVlc3RzLnB1c2goYWJvcnRhYmxlQXN5bmNJdGVyYXRvcik7XG4gICAgICByZXR1cm4gYWJvcnRhYmxlQXN5bmNJdGVyYXRvcjtcbiAgICB9XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBwb3N0KHRoaXMuZmV0Y2gsIGhvc3QsIHJlcXVlc3QsIHtcbiAgICAgIGhlYWRlcnM6IHRoaXMuY29uZmlnLmhlYWRlcnNcbiAgICB9KTtcbiAgICByZXR1cm4gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICB9XG4gIC8qKlxuICAqIEVuY29kZXMgYW4gaW1hZ2UgdG8gYmFzZTY0IGlmIGl0IGlzIGEgVWludDhBcnJheS5cbiAgKiBAcGFyYW0gaW1hZ2Uge1VpbnQ4QXJyYXkgfCBzdHJpbmd9IC0gVGhlIGltYWdlIHRvIGVuY29kZS5cbiAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fSAtIFRoZSBiYXNlNjQgZW5jb2RlZCBpbWFnZS5cbiAgKi9cbiAgYXN5bmMgZW5jb2RlSW1hZ2UoaW1hZ2UpIHtcbiAgICBpZiAodHlwZW9mIGltYWdlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICBjb25zdCB1aW50OEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoaW1hZ2UpO1xuICAgICAgbGV0IGJ5dGVTdHJpbmcgPSBcIlwiO1xuICAgICAgY29uc3QgbGVuID0gdWludDhBcnJheS5ieXRlTGVuZ3RoO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBieXRlU3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUodWludDhBcnJheVtpXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYnRvYShieXRlU3RyaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIGltYWdlO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSByZXNwb25zZSBmcm9tIGEgdGV4dCBwcm9tcHQuXG4gICAqIEBwYXJhbSByZXF1ZXN0IHtHZW5lcmF0ZVJlcXVlc3R9IC0gVGhlIHJlcXVlc3Qgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxHZW5lcmF0ZVJlc3BvbnNlIHwgQWJvcnRhYmxlQXN5bmNJdGVyYXRvcjxHZW5lcmF0ZVJlc3BvbnNlPj59IC0gVGhlIHJlc3BvbnNlIG9iamVjdCBvclxuICAgKiBhbiBBYm9ydGFibGVBc3luY0l0ZXJhdG9yIHRoYXQgeWllbGRzIHJlc3BvbnNlIG1lc3NhZ2VzLlxuICAgKi9cbiAgYXN5bmMgZ2VuZXJhdGUocmVxdWVzdCkge1xuICAgIGlmIChyZXF1ZXN0LmltYWdlcykge1xuICAgICAgcmVxdWVzdC5pbWFnZXMgPSBhd2FpdCBQcm9taXNlLmFsbChyZXF1ZXN0LmltYWdlcy5tYXAodGhpcy5lbmNvZGVJbWFnZS5iaW5kKHRoaXMpKSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnByb2Nlc3NTdHJlYW1hYmxlUmVxdWVzdChcImdlbmVyYXRlXCIsIHJlcXVlc3QpO1xuICB9XG4gIC8qKlxuICAgKiBDaGF0cyB3aXRoIHRoZSBtb2RlbC4gVGhlIHJlcXVlc3Qgb2JqZWN0IGNhbiBjb250YWluIG1lc3NhZ2VzIHdpdGggaW1hZ2VzIHRoYXQgYXJlIGVpdGhlclxuICAgKiBVaW50OEFycmF5cyBvciBiYXNlNjQgZW5jb2RlZCBzdHJpbmdzLiBUaGUgaW1hZ2VzIHdpbGwgYmUgYmFzZTY0IGVuY29kZWQgYmVmb3JlIHNlbmRpbmcgdGhlXG4gICAqIHJlcXVlc3QuXG4gICAqIEBwYXJhbSByZXF1ZXN0IHtDaGF0UmVxdWVzdH0gLSBUaGUgcmVxdWVzdCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPENoYXRSZXNwb25zZSB8IEFib3J0YWJsZUFzeW5jSXRlcmF0b3I8Q2hhdFJlc3BvbnNlPj59IC0gVGhlIHJlc3BvbnNlIG9iamVjdCBvciBhblxuICAgKiBBYm9ydGFibGVBc3luY0l0ZXJhdG9yIHRoYXQgeWllbGRzIHJlc3BvbnNlIG1lc3NhZ2VzLlxuICAgKi9cbiAgYXN5bmMgY2hhdChyZXF1ZXN0KSB7XG4gICAgaWYgKHJlcXVlc3QubWVzc2FnZXMpIHtcbiAgICAgIGZvciAoY29uc3QgbWVzc2FnZSBvZiByZXF1ZXN0Lm1lc3NhZ2VzKSB7XG4gICAgICAgIGlmIChtZXNzYWdlLmltYWdlcykge1xuICAgICAgICAgIG1lc3NhZ2UuaW1hZ2VzID0gYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICAgICAgICBtZXNzYWdlLmltYWdlcy5tYXAodGhpcy5lbmNvZGVJbWFnZS5iaW5kKHRoaXMpKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucHJvY2Vzc1N0cmVhbWFibGVSZXF1ZXN0KFwiY2hhdFwiLCByZXF1ZXN0KTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBtb2RlbCBmcm9tIGEgc3RyZWFtIG9mIGRhdGEuXG4gICAqIEBwYXJhbSByZXF1ZXN0IHtDcmVhdGVSZXF1ZXN0fSAtIFRoZSByZXF1ZXN0IG9iamVjdC5cbiAgICogQHJldHVybnMge1Byb21pc2U8UHJvZ3Jlc3NSZXNwb25zZSB8IEFib3J0YWJsZUFzeW5jSXRlcmF0b3I8UHJvZ3Jlc3NSZXNwb25zZT4+fSAtIFRoZSByZXNwb25zZSBvYmplY3Qgb3IgYSBzdHJlYW0gb2YgcHJvZ3Jlc3MgcmVzcG9uc2VzLlxuICAgKi9cbiAgYXN5bmMgY3JlYXRlKHJlcXVlc3QpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9jZXNzU3RyZWFtYWJsZVJlcXVlc3QoXCJjcmVhdGVcIiwge1xuICAgICAgbmFtZTogcmVxdWVzdC5tb2RlbCxcbiAgICAgIHN0cmVhbTogcmVxdWVzdC5zdHJlYW0sXG4gICAgICBtb2RlbGZpbGU6IHJlcXVlc3QubW9kZWxmaWxlLFxuICAgICAgcXVhbnRpemU6IHJlcXVlc3QucXVhbnRpemVcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogUHVsbHMgYSBtb2RlbCBmcm9tIHRoZSBPbGxhbWEgcmVnaXN0cnkuIFRoZSByZXF1ZXN0IG9iamVjdCBjYW4gY29udGFpbiBhIHN0cmVhbSBmbGFnIHRvIGluZGljYXRlIGlmIHRoZVxuICAgKiByZXNwb25zZSBzaG91bGQgYmUgc3RyZWFtZWQuXG4gICAqIEBwYXJhbSByZXF1ZXN0IHtQdWxsUmVxdWVzdH0gLSBUaGUgcmVxdWVzdCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFByb2dyZXNzUmVzcG9uc2UgfCBBYm9ydGFibGVBc3luY0l0ZXJhdG9yPFByb2dyZXNzUmVzcG9uc2U+Pn0gLSBUaGUgcmVzcG9uc2Ugb2JqZWN0IG9yXG4gICAqIGFuIEFib3J0YWJsZUFzeW5jSXRlcmF0b3IgdGhhdCB5aWVsZHMgcmVzcG9uc2UgbWVzc2FnZXMuXG4gICAqL1xuICBhc3luYyBwdWxsKHJlcXVlc3QpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9jZXNzU3RyZWFtYWJsZVJlcXVlc3QoXCJwdWxsXCIsIHtcbiAgICAgIG5hbWU6IHJlcXVlc3QubW9kZWwsXG4gICAgICBzdHJlYW06IHJlcXVlc3Quc3RyZWFtLFxuICAgICAgaW5zZWN1cmU6IHJlcXVlc3QuaW5zZWN1cmVcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogUHVzaGVzIGEgbW9kZWwgdG8gdGhlIE9sbGFtYSByZWdpc3RyeS4gVGhlIHJlcXVlc3Qgb2JqZWN0IGNhbiBjb250YWluIGEgc3RyZWFtIGZsYWcgdG8gaW5kaWNhdGUgaWYgdGhlXG4gICAqIHJlc3BvbnNlIHNob3VsZCBiZSBzdHJlYW1lZC5cbiAgICogQHBhcmFtIHJlcXVlc3Qge1B1c2hSZXF1ZXN0fSAtIFRoZSByZXF1ZXN0IG9iamVjdC5cbiAgICogQHJldHVybnMge1Byb21pc2U8UHJvZ3Jlc3NSZXNwb25zZSB8IEFib3J0YWJsZUFzeW5jSXRlcmF0b3I8UHJvZ3Jlc3NSZXNwb25zZT4+fSAtIFRoZSByZXNwb25zZSBvYmplY3Qgb3JcbiAgICogYW4gQWJvcnRhYmxlQXN5bmNJdGVyYXRvciB0aGF0IHlpZWxkcyByZXNwb25zZSBtZXNzYWdlcy5cbiAgICovXG4gIGFzeW5jIHB1c2gocmVxdWVzdCkge1xuICAgIHJldHVybiB0aGlzLnByb2Nlc3NTdHJlYW1hYmxlUmVxdWVzdChcInB1c2hcIiwge1xuICAgICAgbmFtZTogcmVxdWVzdC5tb2RlbCxcbiAgICAgIHN0cmVhbTogcmVxdWVzdC5zdHJlYW0sXG4gICAgICBpbnNlY3VyZTogcmVxdWVzdC5pbnNlY3VyZVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBEZWxldGVzIGEgbW9kZWwgZnJvbSB0aGUgc2VydmVyLiBUaGUgcmVxdWVzdCBvYmplY3Qgc2hvdWxkIGNvbnRhaW4gdGhlIG5hbWUgb2YgdGhlIG1vZGVsIHRvXG4gICAqIGRlbGV0ZS5cbiAgICogQHBhcmFtIHJlcXVlc3Qge0RlbGV0ZVJlcXVlc3R9IC0gVGhlIHJlcXVlc3Qgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxTdGF0dXNSZXNwb25zZT59IC0gVGhlIHJlc3BvbnNlIG9iamVjdC5cbiAgICovXG4gIGFzeW5jIGRlbGV0ZShyZXF1ZXN0KSB7XG4gICAgYXdhaXQgZGVsKFxuICAgICAgdGhpcy5mZXRjaCxcbiAgICAgIGAke3RoaXMuY29uZmlnLmhvc3R9L2FwaS9kZWxldGVgLFxuICAgICAgeyBuYW1lOiByZXF1ZXN0Lm1vZGVsIH0sXG4gICAgICB7IGhlYWRlcnM6IHRoaXMuY29uZmlnLmhlYWRlcnMgfVxuICAgICk7XG4gICAgcmV0dXJuIHsgc3RhdHVzOiBcInN1Y2Nlc3NcIiB9O1xuICB9XG4gIC8qKlxuICAgKiBDb3BpZXMgYSBtb2RlbCBmcm9tIG9uZSBuYW1lIHRvIGFub3RoZXIuIFRoZSByZXF1ZXN0IG9iamVjdCBzaG91bGQgY29udGFpbiB0aGUgbmFtZSBvZiB0aGVcbiAgICogbW9kZWwgdG8gY29weSBhbmQgdGhlIG5ldyBuYW1lLlxuICAgKiBAcGFyYW0gcmVxdWVzdCB7Q29weVJlcXVlc3R9IC0gVGhlIHJlcXVlc3Qgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxTdGF0dXNSZXNwb25zZT59IC0gVGhlIHJlc3BvbnNlIG9iamVjdC5cbiAgICovXG4gIGFzeW5jIGNvcHkocmVxdWVzdCkge1xuICAgIGF3YWl0IHBvc3QodGhpcy5mZXRjaCwgYCR7dGhpcy5jb25maWcuaG9zdH0vYXBpL2NvcHlgLCB7IC4uLnJlcXVlc3QgfSwge1xuICAgICAgaGVhZGVyczogdGhpcy5jb25maWcuaGVhZGVyc1xuICAgIH0pO1xuICAgIHJldHVybiB7IHN0YXR1czogXCJzdWNjZXNzXCIgfTtcbiAgfVxuICAvKipcbiAgICogTGlzdHMgdGhlIG1vZGVscyBvbiB0aGUgc2VydmVyLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxMaXN0UmVzcG9uc2U+fSAtIFRoZSByZXNwb25zZSBvYmplY3QuXG4gICAqIEB0aHJvd3Mge0Vycm9yfSAtIElmIHRoZSByZXNwb25zZSBib2R5IGlzIG1pc3NpbmcuXG4gICAqL1xuICBhc3luYyBsaXN0KCkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZ2V0KHRoaXMuZmV0Y2gsIGAke3RoaXMuY29uZmlnLmhvc3R9L2FwaS90YWdzYCwge1xuICAgICAgaGVhZGVyczogdGhpcy5jb25maWcuaGVhZGVyc1xuICAgIH0pO1xuICAgIHJldHVybiBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gIH1cbiAgLyoqXG4gICAqIFNob3dzIHRoZSBtZXRhZGF0YSBvZiBhIG1vZGVsLiBUaGUgcmVxdWVzdCBvYmplY3Qgc2hvdWxkIGNvbnRhaW4gdGhlIG5hbWUgb2YgdGhlIG1vZGVsLlxuICAgKiBAcGFyYW0gcmVxdWVzdCB7U2hvd1JlcXVlc3R9IC0gVGhlIHJlcXVlc3Qgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxTaG93UmVzcG9uc2U+fSAtIFRoZSByZXNwb25zZSBvYmplY3QuXG4gICAqL1xuICBhc3luYyBzaG93KHJlcXVlc3QpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHBvc3QodGhpcy5mZXRjaCwgYCR7dGhpcy5jb25maWcuaG9zdH0vYXBpL3Nob3dgLCB7XG4gICAgICAuLi5yZXF1ZXN0XG4gICAgfSwge1xuICAgICAgaGVhZGVyczogdGhpcy5jb25maWcuaGVhZGVyc1xuICAgIH0pO1xuICAgIHJldHVybiBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gIH1cbiAgLyoqXG4gICAqIEVtYmVkcyB0ZXh0IGlucHV0IGludG8gdmVjdG9ycy5cbiAgICogQHBhcmFtIHJlcXVlc3Qge0VtYmVkUmVxdWVzdH0gLSBUaGUgcmVxdWVzdCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEVtYmVkUmVzcG9uc2U+fSAtIFRoZSByZXNwb25zZSBvYmplY3QuXG4gICAqL1xuICBhc3luYyBlbWJlZChyZXF1ZXN0KSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBwb3N0KHRoaXMuZmV0Y2gsIGAke3RoaXMuY29uZmlnLmhvc3R9L2FwaS9lbWJlZGAsIHtcbiAgICAgIC4uLnJlcXVlc3RcbiAgICB9LCB7XG4gICAgICBoZWFkZXJzOiB0aGlzLmNvbmZpZy5oZWFkZXJzXG4gICAgfSk7XG4gICAgcmV0dXJuIGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgfVxuICAvKipcbiAgICogRW1iZWRzIGEgdGV4dCBwcm9tcHQgaW50byBhIHZlY3Rvci5cbiAgICogQHBhcmFtIHJlcXVlc3Qge0VtYmVkZGluZ3NSZXF1ZXN0fSAtIFRoZSByZXF1ZXN0IG9iamVjdC5cbiAgICogQHJldHVybnMge1Byb21pc2U8RW1iZWRkaW5nc1Jlc3BvbnNlPn0gLSBUaGUgcmVzcG9uc2Ugb2JqZWN0LlxuICAgKi9cbiAgYXN5bmMgZW1iZWRkaW5ncyhyZXF1ZXN0KSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBwb3N0KHRoaXMuZmV0Y2gsIGAke3RoaXMuY29uZmlnLmhvc3R9L2FwaS9lbWJlZGRpbmdzYCwge1xuICAgICAgLi4ucmVxdWVzdFxuICAgIH0sIHtcbiAgICAgIGhlYWRlcnM6IHRoaXMuY29uZmlnLmhlYWRlcnNcbiAgICB9KTtcbiAgICByZXR1cm4gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICB9XG4gIC8qKlxuICAgKiBMaXN0cyB0aGUgcnVubmluZyBtb2RlbHMgb24gdGhlIHNlcnZlclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxMaXN0UmVzcG9uc2U+fSAtIFRoZSByZXNwb25zZSBvYmplY3QuXG4gICAqIEB0aHJvd3Mge0Vycm9yfSAtIElmIHRoZSByZXNwb25zZSBib2R5IGlzIG1pc3NpbmcuXG4gICAqL1xuICBhc3luYyBwcygpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGdldCh0aGlzLmZldGNoLCBgJHt0aGlzLmNvbmZpZy5ob3N0fS9hcGkvcHNgLCB7XG4gICAgICBoZWFkZXJzOiB0aGlzLmNvbmZpZy5oZWFkZXJzXG4gICAgfSk7XG4gICAgcmV0dXJuIGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgfVxufTtcbmNvbnN0IGJyb3dzZXIgPSBuZXcgT2xsYW1hJDEoKTtcblxuZXhwb3J0IHsgT2xsYW1hJDEgYXMgTywgYnJvd3NlciBhcyBiLCBoZWFkIGFzIGgsIHBvc3QgYXMgcCB9O1xuIiwgImltcG9ydCB7IE8gYXMgT2xsYW1hJDEsIGggYXMgaGVhZCwgcCBhcyBwb3N0IH0gZnJvbSAnLi9zaGFyZWQvb2xsYW1hLmNkZGJjODViLm1qcyc7XG5pbXBvcnQgZnMsIHsgcHJvbWlzZXMsIGNyZWF0ZVJlYWRTdHJlYW0gfSBmcm9tICdmcyc7XG5pbXBvcnQgeyByZXNvbHZlLCBqb2luLCBkaXJuYW1lIH0gZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBjcmVhdGVIYXNoIH0gZnJvbSAnY3J5cHRvJztcbmltcG9ydCB7IGhvbWVkaXIgfSBmcm9tICdvcyc7XG5pbXBvcnQgJ3doYXR3Zy1mZXRjaCc7XG5cbmNsYXNzIE9sbGFtYSBleHRlbmRzIE9sbGFtYSQxIHtcbiAgYXN5bmMgZW5jb2RlSW1hZ2UoaW1hZ2UpIHtcbiAgICBpZiAodHlwZW9mIGltYWdlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICByZXR1cm4gQnVmZmVyLmZyb20oaW1hZ2UpLnRvU3RyaW5nKFwiYmFzZTY0XCIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgaWYgKGZzLmV4aXN0c1N5bmMoaW1hZ2UpKSB7XG4gICAgICAgIGNvbnN0IGZpbGVCdWZmZXIgPSBhd2FpdCBwcm9taXNlcy5yZWFkRmlsZShyZXNvbHZlKGltYWdlKSk7XG4gICAgICAgIHJldHVybiBCdWZmZXIuZnJvbShmaWxlQnVmZmVyKS50b1N0cmluZyhcImJhc2U2NFwiKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIHtcbiAgICB9XG4gICAgcmV0dXJuIGltYWdlO1xuICB9XG4gIC8qKlxuICAgKiBQYXJzZSB0aGUgbW9kZWxmaWxlIGFuZCByZXBsYWNlIHRoZSBGUk9NIGFuZCBBREFQVEVSIGNvbW1hbmRzIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgYmxvYiBoYXNoZXMuXG4gICAqIEBwYXJhbSBtb2RlbGZpbGUge3N0cmluZ30gLSBUaGUgbW9kZWxmaWxlIGNvbnRlbnRcbiAgICogQHBhcmFtIG1mRGlyIHtzdHJpbmd9IC0gVGhlIGRpcmVjdG9yeSBvZiB0aGUgbW9kZWxmaWxlXG4gICAqIEBwcml2YXRlIEBpbnRlcm5hbFxuICAgKi9cbiAgYXN5bmMgcGFyc2VNb2RlbGZpbGUobW9kZWxmaWxlLCBtZkRpciA9IHByb2Nlc3MuY3dkKCkpIHtcbiAgICBjb25zdCBvdXQgPSBbXTtcbiAgICBjb25zdCBsaW5lcyA9IG1vZGVsZmlsZS5zcGxpdChcIlxcblwiKTtcbiAgICBmb3IgKGNvbnN0IGxpbmUgb2YgbGluZXMpIHtcbiAgICAgIGNvbnN0IFtjb21tYW5kLCBhcmdzXSA9IGxpbmUuc3BsaXQoXCIgXCIsIDIpO1xuICAgICAgaWYgKFtcIkZST01cIiwgXCJBREFQVEVSXCJdLmluY2x1ZGVzKGNvbW1hbmQudG9VcHBlckNhc2UoKSkpIHtcbiAgICAgICAgY29uc3QgcGF0aCA9IHRoaXMucmVzb2x2ZVBhdGgoYXJncy50cmltKCksIG1mRGlyKTtcbiAgICAgICAgaWYgKGF3YWl0IHRoaXMuZmlsZUV4aXN0cyhwYXRoKSkge1xuICAgICAgICAgIG91dC5wdXNoKGAke2NvbW1hbmR9IEAke2F3YWl0IHRoaXMuY3JlYXRlQmxvYihwYXRoKX1gKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQucHVzaChgJHtjb21tYW5kfSAke2FyZ3N9YCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dC5wdXNoKGxpbmUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0LmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgLyoqXG4gICAqIFJlc29sdmUgdGhlIHBhdGggdG8gYW4gYWJzb2x1dGUgcGF0aC5cbiAgICogQHBhcmFtIGlucHV0UGF0aCB7c3RyaW5nfSAtIFRoZSBpbnB1dCBwYXRoXG4gICAqIEBwYXJhbSBtZkRpciB7c3RyaW5nfSAtIFRoZSBkaXJlY3Rvcnkgb2YgdGhlIG1vZGVsZmlsZVxuICAgKiBAcHJpdmF0ZSBAaW50ZXJuYWxcbiAgICovXG4gIHJlc29sdmVQYXRoKGlucHV0UGF0aCwgbWZEaXIpIHtcbiAgICBpZiAoaW5wdXRQYXRoLnN0YXJ0c1dpdGgoXCJ+XCIpKSB7XG4gICAgICByZXR1cm4gam9pbihob21lZGlyKCksIGlucHV0UGF0aC5zbGljZSgxKSk7XG4gICAgfVxuICAgIHJldHVybiByZXNvbHZlKG1mRGlyLCBpbnB1dFBhdGgpO1xuICB9XG4gIC8qKlxuICAgKiBjaGVja3MgaWYgYSBmaWxlIGV4aXN0c1xuICAgKiBAcGFyYW0gcGF0aCB7c3RyaW5nfSAtIFRoZSBwYXRoIHRvIHRoZSBmaWxlXG4gICAqIEBwcml2YXRlIEBpbnRlcm5hbFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn0gLSBXaGV0aGVyIHRoZSBmaWxlIGV4aXN0cyBvciBub3RcbiAgICovXG4gIGFzeW5jIGZpbGVFeGlzdHMocGF0aCkge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBwcm9taXNlcy5hY2Nlc3MocGF0aCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgY3JlYXRlQmxvYihwYXRoKSB7XG4gICAgaWYgKHR5cGVvZiBSZWFkYWJsZVN0cmVhbSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU3RyZWFtaW5nIHVwbG9hZHMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBlbnZpcm9ubWVudC5cIik7XG4gICAgfVxuICAgIGNvbnN0IGZpbGVTdHJlYW0gPSBjcmVhdGVSZWFkU3RyZWFtKHBhdGgpO1xuICAgIGNvbnN0IHNoYTI1NnN1bSA9IGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlMiwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBoYXNoID0gY3JlYXRlSGFzaChcInNoYTI1NlwiKTtcbiAgICAgIGZpbGVTdHJlYW0ub24oXCJkYXRhXCIsIChkYXRhKSA9PiBoYXNoLnVwZGF0ZShkYXRhKSk7XG4gICAgICBmaWxlU3RyZWFtLm9uKFwiZW5kXCIsICgpID0+IHJlc29sdmUyKGhhc2guZGlnZXN0KFwiaGV4XCIpKSk7XG4gICAgICBmaWxlU3RyZWFtLm9uKFwiZXJyb3JcIiwgcmVqZWN0KTtcbiAgICB9KTtcbiAgICBjb25zdCBkaWdlc3QgPSBgc2hhMjU2OiR7c2hhMjU2c3VtfWA7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGhlYWQodGhpcy5mZXRjaCwgYCR7dGhpcy5jb25maWcuaG9zdH0vYXBpL2Jsb2JzLyR7ZGlnZXN0fWApO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlIGluc3RhbmNlb2YgRXJyb3IgJiYgZS5tZXNzYWdlLmluY2x1ZGVzKFwiNDA0XCIpKSB7XG4gICAgICAgIGNvbnN0IHJlYWRhYmxlU3RyZWFtID0gbmV3IFJlYWRhYmxlU3RyZWFtKHtcbiAgICAgICAgICBzdGFydChjb250cm9sbGVyKSB7XG4gICAgICAgICAgICBmaWxlU3RyZWFtLm9uKFwiZGF0YVwiLCAoY2h1bmspID0+IHtcbiAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKGNodW5rKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZmlsZVN0cmVhbS5vbihcImVuZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnRyb2xsZXIuY2xvc2UoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZmlsZVN0cmVhbS5vbihcImVycm9yXCIsIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgY29udHJvbGxlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgYXdhaXQgcG9zdChcbiAgICAgICAgICB0aGlzLmZldGNoLFxuICAgICAgICAgIGAke3RoaXMuY29uZmlnLmhvc3R9L2FwaS9ibG9icy8ke2RpZ2VzdH1gLFxuICAgICAgICAgIHJlYWRhYmxlU3RyZWFtXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGlnZXN0O1xuICB9XG4gIGFzeW5jIGNyZWF0ZShyZXF1ZXN0KSB7XG4gICAgbGV0IG1vZGVsZmlsZUNvbnRlbnQgPSBcIlwiO1xuICAgIGlmIChyZXF1ZXN0LnBhdGgpIHtcbiAgICAgIG1vZGVsZmlsZUNvbnRlbnQgPSBhd2FpdCBwcm9taXNlcy5yZWFkRmlsZShyZXF1ZXN0LnBhdGgsIHsgZW5jb2Rpbmc6IFwidXRmOFwiIH0pO1xuICAgICAgbW9kZWxmaWxlQ29udGVudCA9IGF3YWl0IHRoaXMucGFyc2VNb2RlbGZpbGUoXG4gICAgICAgIG1vZGVsZmlsZUNvbnRlbnQsXG4gICAgICAgIGRpcm5hbWUocmVxdWVzdC5wYXRoKVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKHJlcXVlc3QubW9kZWxmaWxlKSB7XG4gICAgICBtb2RlbGZpbGVDb250ZW50ID0gYXdhaXQgdGhpcy5wYXJzZU1vZGVsZmlsZShyZXF1ZXN0Lm1vZGVsZmlsZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk11c3QgcHJvdmlkZSBlaXRoZXIgcGF0aCBvciBtb2RlbGZpbGUgdG8gY3JlYXRlIGEgbW9kZWxcIik7XG4gICAgfVxuICAgIHJlcXVlc3QubW9kZWxmaWxlID0gbW9kZWxmaWxlQ29udGVudDtcbiAgICBpZiAocmVxdWVzdC5zdHJlYW0pIHtcbiAgICAgIHJldHVybiBzdXBlci5jcmVhdGUocmVxdWVzdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBzdXBlci5jcmVhdGUocmVxdWVzdCk7XG4gICAgfVxuICB9XG59XG5jb25zdCBpbmRleCA9IG5ldyBPbGxhbWEoKTtcblxuZXhwb3J0IHsgT2xsYW1hLCBpbmRleCBhcyBkZWZhdWx0IH07XG4iLCAiaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tIFwiLi9wcm92aWRlclwiO1xuaW1wb3J0IHsgT2xsYW1hIH0gZnJvbSBcIm9sbGFtYVwiO1xuaW1wb3J0IHsgU3VnZ2VzdGlvbiB9IGZyb20gXCJjb2RlbWlycm9yLWNvbXBhbmlvbi1leHRlbnNpb25cIjtcbmltcG9ydCB7IE9sbGFtYVNldHRpbmdzIH0gZnJvbSBcIi4uL3NldHRpbmdzL3NldHRpbmdzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9sbGFtYVByb3ZpZGVyIGltcGxlbWVudHMgUHJvdmlkZXIge1xuICAgIGlkID0gXCJvbGxhbWFcIjtcbiAgICBuYW1lID0gXCJPbGxhbWFcIjtcbiAgICBkZXNjcmlwdGlvbiA9IFwiT2xsYW1hIG1vZGVsIGZvciBjb21wbGV0aW9uXCI7XG4gICAgb2xsYW1hOiBPbGxhbWFcbiAgICBzZXR0aW5nczogT2xsYW1hU2V0dGluZ3M7XG5cbiAgICBjb25zdHJ1Y3RvcihzZXR0aW5zOiBPbGxhbWFTZXR0aW5ncykge1xuICAgICAgICB0aGlzLnNldHRpbmdzID0gc2V0dGlucztcbiAgICAgICAgdGhpcy5vbGxhbWEgPSBuZXcgT2xsYW1hKHsgaG9zdDogdGhpcy5zZXR0aW5ncy5ob3N0IH0pO1xuICAgIH1cblxuICAgIGFzeW5jIGxvYWQoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiTG9hZGluZyBPbGxhbWEgbW9kZWxcIik7XG4gICAgICAgIHRoaXMub2xsYW1hID0gbmV3IE9sbGFtYSh7IGhvc3Q6IHRoaXMuc2V0dGluZ3MuaG9zdCB9KTtcbiAgICB9XG5cbiAgICBhc3luYyAqZ2VuZXJhdGUocHJlZml4OiBzdHJpbmcsIHN1ZmZpeDogc3RyaW5nKTogQXN5bmNHZW5lcmF0b3I8U3VnZ2VzdGlvbj4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcImZldGNoaW5nIGNvbXBsZXRpb25cIik7XG5cbiAgICAgICAgY29uc3QgcHJvbWlzZUl0ZXJhdG9yID0gYXdhaXQgdGhpcy5vbGxhbWEuZ2VuZXJhdGUoe1xuICAgICAgICAgICAgbW9kZWw6IHRoaXMuc2V0dGluZ3MubW9kZWwsXG4gICAgICAgICAgICBwcm9tcHQ6IHByZWZpeCxcbiAgICAgICAgICAgIHN0cmVhbTogdHJ1ZSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IGNvbXBsZXRpb24gPSBcIlwiO1xuICAgICAgICBmb3IgYXdhaXQgKGxldCByZXNwb25zZSBvZiBwcm9taXNlSXRlcmF0b3IpIHtcbiAgICAgICAgICAgIGNvbXBsZXRpb24gKz0gcmVzcG9uc2UucmVzcG9uc2U7XG4gICAgICAgICAgICB5aWVsZCB7IGNvbXBsZXRlX3N1Z2dlc3Rpb246IGNvbXBsZXRpb24sIGRpc3BsYXlfc3VnZ2VzdGlvbjogY29tcGxldGlvbiB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBhYm9ydCgpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJjYW5jZWxpbmcgY29tcGxldGlvblwiKTtcbiAgICAgICAgdGhpcy5vbGxhbWEuYWJvcnQoKTtcbiAgICB9XG59XG5cblxuIiwgImV4cG9ydCBpbnRlcmZhY2UgU2V0dGluZ3Mge1xuICAgIHByb3ZpZGVyOiBQcm92aWRlclR5cGUsXG4gICAgcHJvdmlkZXJTZXR0aW5nczoge1xuICAgICAgICBvbGxhbWE6IE9sbGFtYVNldHRpbmdzLFxuICAgICAgICBvcGVuYWk6IE9wZW5BSVNldHRpbmdzLFxuICAgIH1cbn1cblxuZXhwb3J0IGVudW0gUHJvdmlkZXJUeXBlIHtcbiAgICBPTExBTUEgPSBcIm9sbGFtYVwiLFxuICAgIE9QRU5BSSA9IFwib3BlbmFpXCIsXG59XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX1NFVFRJTkdTOiBTZXR0aW5ncyA9IHtcbiAgICBwcm92aWRlcjogUHJvdmlkZXJUeXBlLk9MTEFNQSxcbiAgICBwcm92aWRlclNldHRpbmdzOiB7XG4gICAgICAgIG9wZW5haToge1xuICAgICAgICAgICAgYXBpS2V5OiBcIlwiLFxuICAgICAgICAgICAgbW9kZWw6IFwiZ3B0LTRcIlxuICAgICAgICB9LFxuICAgICAgICBvbGxhbWE6IHtcbiAgICAgICAgICAgIGhvc3Q6IFwiaHR0cDovL2xvY2FsaG9zdDoxMTQzNFwiLFxuICAgICAgICAgICAgbW9kZWw6IFwibWlzdHJhbC1uZW1vXCJcbiAgICAgICAgfSxcbiAgICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgT2xsYW1hU2V0dGluZ3Mge1xuICAgIGhvc3Q6IHN0cmluZztcbiAgICBtb2RlbDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE9wZW5BSVNldHRpbmdzIHtcbiAgICBhcGlLZXk6IHN0cmluZztcbiAgICBtb2RlbDogc3RyaW5nO1xufVxuXG5cbiIsICJpbXBvcnQgeyBTZXR0aW5nLCBBcHAsIFBsdWdpblNldHRpbmdUYWIgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCBJbnNjcmliZSBmcm9tIFwiLi4vbWFpblwiO1xuaW1wb3J0IHsgUHJvdmlkZXJUeXBlIH0gZnJvbSBcIi4uL3NldHRpbmdzL3NldHRpbmdzXCI7XG5cbmV4cG9ydCBjbGFzcyBJbnNjcmliZVNldHRpbmdzVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIHByaXZhdGUgcGx1Z2luOiBJbnNjcmliZSkge1xuICAgICAgICBzdXBlcihhcHAsIHBsdWdpbik7XG4gICAgfVxuXG4gICAgYXN5bmMgZGlzcGxheSgpIHtcbiAgICAgICAgY29uc3QgeyBjb250YWluZXJFbCB9ID0gdGhpcztcbiAgICAgICAgbmV3IFByb3ZpZGVyU2V0dGluZ3ModGhpcy5wbHVnaW4sIGNvbnRhaW5lckVsKS5kaXNwbGF5KCk7XG4gICAgfVxufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgSW5zY3JpYmVTZXR0aW5ncyB7XG4gICAgcHJvdGVjdGVkIHBsdWdpbjogSW5zY3JpYmU7XG4gICAgcHJvdGVjdGVkIGNvbnRhaW5lckVsOiBIVE1MRWxlbWVudDtcblxuICAgIGNvbnN0cnVjdG9yKHBsdWdpbjogSW5zY3JpYmUsIGNvbnRhaW5lckVsOiBIVE1MRWxlbWVudCkge1xuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgICAgICAgdGhpcy5jb250YWluZXJFbCA9IGNvbnRhaW5lckVsO1xuICAgIH1cblxuICAgIHB1YmxpYyBhYnN0cmFjdCBkaXNwbGF5KCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBjbGFzcyBQcm92aWRlclNldHRpbmdzIGV4dGVuZHMgSW5zY3JpYmVTZXR0aW5ncyB7XG4gICAgcHVibGljIGRpc3BsYXkoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XG5cbiAgICAgICAgY29udGFpbmVyRWwuZW1wdHkoKTtcbiAgICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoXCJoMVwiLCB7IHRleHQ6IFwiUHJvdmlkZXIgU2V0dGluZ3NcIiB9KTtcblxuICAgICAgICAvLyBQcm92aWRlciBTZWxlY3Rpb25cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZShcIkFJIFByb3ZpZGVyXCIpXG4gICAgICAgICAgICAuc2V0RGVzYyhcIkNob29zZSB5b3VyIHByZWZlcnJlZCBBSSBwcm92aWRlci5cIilcbiAgICAgICAgICAgIC5hZGREcm9wZG93bigoZHJvcGRvd24pID0+IHtcbiAgICAgICAgICAgICAgICBkcm9wZG93blxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFByb3ZpZGVyVHlwZS5PUEVOQUksIFwiT3BlbkFJXCIpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oUHJvdmlkZXJUeXBlLk9MTEFNQSwgXCJPbGxhbWFcIilcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnByb3ZpZGVyKVxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcm92aWRlciA9IHZhbHVlIGFzIFByb3ZpZGVyVHlwZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gc3dpdGNoIGNhc2UgZm9yIHByb3ZpZGVyc1xuICAgICAgICBzd2l0Y2ggKHRoaXMucGx1Z2luLnNldHRpbmdzLnByb3ZpZGVyKSB7XG4gICAgICAgICAgICBjYXNlIFwib3BlbmFpXCI6XG4gICAgICAgICAgICAgICAgdGhpcy5vcGVuQUlTZXR0aW5ncyhjb250YWluZXJFbCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwib2xsYW1hXCI6XG4gICAgICAgICAgICAgICAgdGhpcy5vbGxhbWFTZXR0aW5ncyhjb250YWluZXJFbCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvcGVuQUlTZXR0aW5ncyhjb250YWluZXJFbDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoXCJoM1wiLCB7IHRleHQ6IFwiT3BlbkFJIFNldHRpbmdzXCIgfSk7XG5cbiAgICAgICAgLy8gY3JlYXRlIGEgYm94IFxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKFwiQVBJIEtleVwiKVxuICAgICAgICAgICAgLnNldERlc2MoXCJFbnRlciB5b3VyIE9wZW5BSSBBUEkgS2V5LlwiKVxuICAgICAgICAgICAgLmFkZFRleHQoKHRleHQpID0+XG4gICAgICAgICAgICAgICAgdGV4dFxuICAgICAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoXCJzay0uLi5cIilcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnByb3ZpZGVyU2V0dGluZ3Mub3BlbmFpLmFwaUtleSlcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MucHJvdmlkZXJTZXR0aW5ncy5vcGVuYWkuYXBpS2V5ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoXCJNb2RlbFwiKVxuICAgICAgICAgICAgLnNldERlc2MoXCJDaG9vc2UgdGhlIE9wZW5BSSBtb2RlbC5cIilcbiAgICAgICAgICAgIC5hZGREcm9wZG93bigoZHJvcGRvd24pID0+IHtcbiAgICAgICAgICAgICAgICBkcm9wZG93blxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwiZ3B0LTRcIiwgXCJHUFQtNFwiKVxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwiZ3B0LTMuNVwiLCBcIkdQVC0zLjVcIilcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnByb3ZpZGVyU2V0dGluZ3Mub3BlbmFpLm1vZGVsKVxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcm92aWRlclNldHRpbmdzLm9wZW5haS5tb2RlbCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb2xsYW1hU2V0dGluZ3MoY29udGFpbmVyRWw6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiaDNcIiwgeyB0ZXh0OiBcIk9sbGFtYSBTZXR0aW5nc1wiIH0pO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoXCJIb3N0XCIpXG4gICAgICAgICAgICAuc2V0RGVzYyhcIkVudGVyIHRoZSBPbGxhbWEgaG9zdC5cIilcbiAgICAgICAgICAgIC5hZGRUZXh0KCh0ZXh0KSA9PlxuICAgICAgICAgICAgICAgIHRleHRcbiAgICAgICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKHRoaXMucGx1Z2luLnNldHRpbmdzLnByb3ZpZGVyU2V0dGluZ3Mub2xsYW1hLmhvc3QpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcm92aWRlclNldHRpbmdzLm9sbGFtYS5ob3N0KVxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcm92aWRlclNldHRpbmdzLm9sbGFtYS5ob3N0ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoXCJNb2RlbFwiKVxuICAgICAgICAgICAgLnNldERlc2MoXCJDaG9vc2UgdGhlIE9sbGFtYSBtb2RlbC5cIilcbiAgICAgICAgICAgIC5hZGREcm9wZG93bigoZHJvcGRvd24pID0+IHtcbiAgICAgICAgICAgICAgICBkcm9wZG93blxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKFwibWlzdHJhbC1uZW1vXCIsIFwiTWlzdHJhbC1OZW1vXCIpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oXCJtaXN0cmFsLWdwdFwiLCBcIk1pc3RyYWwtR1BUXCIpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcm92aWRlclNldHRpbmdzLm9sbGFtYS5tb2RlbClcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MucHJvdmlkZXJTZXR0aW5ncy5vbGxhbWEubW9kZWwgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbn0iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBQUFBLG1CQUErQjs7Ozs7OztBQzRDeEIsU0FBU0MsRUFDZEMsR0FDQUMsR0FDQUMsSUFBa0IsUUFJbEI7QUFDQSxRQUFNQyxLQUFRO0lBQ1osT0FBTyxNQUFNO0lBRWI7RUFBQTtBQUVGLE1BQUlDLElBQXVCO0FBRTNCLGtCQUFnQkMsS0FBWUMsSUFBZ0Q7QUFDMUVGLFNBQVMsYUFBYUEsQ0FBSztBQUMzQixRQUFJRyxLQUEyQjtBQUUzQixRQUFBO0FBQ0ksWUFBQSxJQUFJLFFBQWMsQ0FBQ0MsTUFBWTtBQUNuQ0QsUUFBQUEsS0FBWUgsSUFBUSxXQUFXLE1BQU1JLEVBQUFBLEdBQVdQLENBQUksR0FDcERFLEdBQU0sUUFBUSxNQUFNO0FBQ2xCQyxlQUFTLGFBQWFBLENBQUssR0FDbkJJLEVBQUFBO1FBQUE7TUFDVixDQUNEO0lBQUEsU0FBQUMsSUFBQTtBQUVELFVBQUlQLE1BQWU7QUFDWCxjQUFBQTtJQUVWO0FBRUEscUJBQWlCUSxLQUFRVixFQUFHLEdBQUdNLEVBQUksR0FBRztBQUNwQyxVQUFJQyxPQUFjSDtBQUNoQjtBQUVJLFlBQUFNO0lBQ1I7RUFDRjtBQUNBLFNBQU8sRUFBRSxXQUFXTCxHQUFVLE9BQU8sTUFBTUYsR0FBTSxNQUFBLEVBQUE7QUFDbkQ7Ozs7OztBQ3hEQSxJQUFNUSxJQUF3QkMsYUFBQUEsV0FBVyxPQUV0QztFQUNELFNBQVM7QUFDQSxXQUFBLEVBQUUsWUFBWSxLQUFBO0VBQ3ZCO0VBQ0EsT0FBT0MsR0FBU0MsR0FBUztBQUNqQkMsVUFBQUEsSUFBbUJELEVBQUcsUUFBUTtNQUFLLENBQUNF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Q3BCLFNBQUssV0FBVyxPQUFPO0FBQUEsTUFDdEIsQ0FBQztBQUFBLE1BQ0Q7QUFBQSxNQUNBLE1BQU0sS0FBSyxTQUFTO0FBQUEsSUFDckI7QUFBQSxFQUNEO0FBQUEsRUFFQSxNQUFNLGVBQWU7QUFDcEIsVUFBTSxLQUFLLFNBQVMsS0FBSyxRQUFRO0FBQ2pDLFVBQU0sS0FBSyxVQUFVO0FBQUEsRUFDdEI7QUFDRDsiLAogICJuYW1lcyI6IFsiaW1wb3J0X29ic2lkaWFuIiwgImRlYm91bmNlQXN5bmNHZW5lcmF0b3IiLCAiZm4iLCAid2FpdCIsICJhYm9ydFZhbHVlIiwgImZvcmNlIiwgInRpbWVyIiwgIndyYXBGdW5jIiwgImFyZ3MiLCAib3duX3RpbWVyIiwgInJlc29sdmUiLCAiZSIsICJpdGVtIiwgIklubGluZVN1Z2dlc3Rpb25TdGF0ZSIsICJTdGF0ZUZpZWxkIiwgIl9fIiwgInRyIiwgImlubGluZVN1Z2dlc3Rpb24iLCAiZSIsICJJbmxpbmVTdWdnZXN0aW9uRWZmZWN0IiwgIlN0YXRlRWZmZWN0IiwgImlubGluZVN1Z2dlc3Rpb25EZWNvcmF0aW9uIiwgInZpZXciLCAicHJlZml4IiwgInBvcyIsICJ3aWRnZXRzIiwgInciLCAiRGVjb3JhdGlvbiIsICJJbmxpbmVTdWdnZXN0aW9uV2lkZ2V0IiwgIldpZGdldFR5cGUiLCAic3VnZ2VzdGlvbiIsICJfX3B1YmxpY0ZpZWxkIiwgImRpdiIsICJmZXRjaFN1Z2dlc3Rpb24iLCAiZmV0Y2hGbiIsICJzdWdnZXN0aW9uSWQiLCAiVmlld1BsdWdpbiIsICJ1cGRhdGUiLCAiZG9jIiwgImN1cnJlbnRTdWdnZXN0aW9uSWQiLCAicmVzdWx0IiwgIlJlbmRlclBsdWdpbiIsICJfYSIsICJyZW5kZXJJbmxpbmVTdWdnZXN0aW9uUGx1Z2luIiwgInYiLCAiaW5saW5lU3VnZ2VzdGlvbktleW1hcCIsICJzdWdnZXN0Rm4iLCAiYWNjZXB0X3Nob3J0Y3V0IiwgImluc2VydENvbXBsZXRpb25UZXh0IiwgIl9iIiwgImNvbXBsZXRpb25JZCIsICJQcmVjIiwgImtleW1hcCIsICJzdGF0ZSIsICJ0ZXh0IiwgImZyb20iLCAidG8iLCAicmFuZ2UiLCAiRWRpdG9yU2VsZWN0aW9uIiwgImxlbiIsICJ0b1N1Z2dlc3Rpb24iLCAidG9TdWdnZXN0aW9uRm4iLCAib3B0aW9ucyIsICJkZWxheSIsICJkZWJvdW5jZWRfZmV0Y2hGbiIsICJkZWJvdW5jZUFzeW5jR2VuZXJhdG9yIiwgImciLCAicmVzb2x2ZSIsICJmZXRjaCIsICJmZXRjaCIsICJwIiwgIl9fZGVmUHJvcCIsICJPbGxhbWEiLCAiZnMiLCAiT2xsYW1hIl0KfQo=
