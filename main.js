/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => Inscribe
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/extension/index.ts
var import_view = require("@codemirror/view");
var import_state = require("@codemirror/state");
var TextSplitStrategies = {
  /**
   * Word-level segmentation (space-delimited).
   * Accepts text until (and including) the first space.
   */
  word: (text) => {
    const nextSpace = text.indexOf(" ");
    return nextSpace === -1 ? { accepted: text, remaining: "" } : {
      accepted: text.slice(0, nextSpace + 1),
      remaining: text.slice(nextSpace + 1)
    };
  },
  /**
   * Sentence-level segmentation (punctuation followed by whitespace).
   */
  sentence: (text) => {
    const match = text.match(/[.!?]\s+/);
    if (match && match.index !== void 0) {
      return {
        accepted: text.slice(0, match.index + 1),
        remaining: text.slice(match.index + 1)
      };
    }
    return { accepted: text, remaining: "" };
  },
  /**
   * Paragraph-level segmentation (double newline).
   */
  paragraph: (text) => {
    const paragraphEnd = text.indexOf("\n\n");
    return paragraphEnd === -1 ? { accepted: text, remaining: "" } : {
      accepted: text.slice(0, paragraphEnd + 2),
      remaining: text.slice(paragraphEnd + 2)
    };
  },
  /**
   * Atomic acceptance â€“ consume the entire suggestion.
   */
  full: (text) => ({ accepted: text, remaining: "" })
};
var SuggestionUpdateEffect = import_state.StateEffect.define();
var suggestionSessionState = import_state.StateField.define({
  create: () => getResetSession(),
  update(session, transaction) {
    const effect = transaction.effects.find(
      (e) => e.is(SuggestionUpdateEffect)
    );
    if (effect)
      return updateSessionFromEffect(effect.value);
    if (transaction.docChanged && session.remainingText && session.anchorPosition !== null) {
      return updateSessionOnDocumentChange(session, transaction);
    }
    if (session.remainingText !== null && session.anchorPosition !== null) {
      return updateSessionOnCursorDrift(session, transaction);
    }
    return session;
  }
});
function getResetSession() {
  return {
    fullText: null,
    remainingText: null,
    baselineDocument: null,
    anchorPosition: null
  };
}
function updateSessionFromEffect(effect) {
  return effect.content === null ? getResetSession() : initializeSession(effect);
}
function initializeSession(effect) {
  return {
    fullText: effect.content,
    remainingText: effect.content,
    baselineDocument: effect.document,
    anchorPosition: effect.anchor
  };
}
function updateSessionOnDocumentChange(session, transaction) {
  let insertedContent = "";
  let insertionAtAnchor = false;
  transaction.changes.iterChanges((fromA, toA, _fromB, _toB, inserted) => {
    if (fromA === session.anchorPosition && toA === fromA) {
      insertedContent = inserted.toString();
      insertionAtAnchor = true;
    }
  });
  if (!insertionAtAnchor || !session.remainingText) {
    return invalidateSession(session);
  }
  if (session.remainingText.startsWith(insertedContent)) {
    return advanceSession(session, insertedContent.length);
  }
  return invalidateSession(session);
}
function advanceSession(session, consumedLength) {
  return {
    ...session,
    remainingText: session.remainingText.slice(consumedLength).length > 0 ? session.remainingText.slice(consumedLength) : null,
    anchorPosition: session.anchorPosition + consumedLength
  };
}
function invalidateSession(session) {
  return {
    ...session,
    remainingText: null,
    anchorPosition: null
  };
}
function updateSessionOnCursorDrift(session, transaction) {
  return transaction.state.selection.main.head !== session.anchorPosition ? invalidateSession(session) : session;
}
var _SuggestionWidget = class extends import_view.WidgetType {
  constructor(content) {
    super();
    this.content = content;
  }
  toDOM() {
    const span = document.createElement("span");
    span.className = _SuggestionWidget.CSS_CLASS;
    span.style.opacity = _SuggestionWidget.OPACITY.toString();
    span.textContent = this.content;
    return span;
  }
};
var SuggestionWidget = _SuggestionWidget;
SuggestionWidget.OPACITY = 0.4;
SuggestionWidget.CSS_CLASS = "cm-inline-prediction";
var suggestionRenderer = import_view.ViewPlugin.fromClass(
  class {
    constructor() {
      this.decorations = import_view.Decoration.none;
    }
    update(update) {
      const session = update.state.field(suggestionSessionState);
      this.decorations = session.remainingText ? this.createDecoration(update.view, session.remainingText) : import_view.Decoration.none;
    }
    createDecoration(view, suggestionText) {
      const cursorPosition = view.state.selection.main.head;
      return import_view.Decoration.set([
        import_view.Decoration.widget({
          widget: new SuggestionWidget(suggestionText),
          side: 1
        }).range(cursorPosition)
      ]);
    }
  },
  { decorations: (v) => v.decorations }
);
var createDebouncedFetcher = (fetch3, getDelay) => {
  let activeRequest = true;
  let timeoutId;
  const throttledFetch = async function* (state) {
    clearTimeout(timeoutId);
    activeRequest = true;
    await new Promise((resolve2) => {
      timeoutId = setTimeout(resolve2, getDelay());
    });
    if (activeRequest)
      yield* fetch3(state);
  };
  const fetcherPlugin = import_view.ViewPlugin.fromClass(
    class {
      constructor() {
        this.currentRequestId = 0;
      }
      async update(update) {
        const state = update.state;
        if (!update.docChanged || state.field(suggestionSessionState).remainingText)
          return;
        const requestId = ++this.currentRequestId;
        for await (const suggestion of throttledFetch(state)) {
          if (requestId !== this.currentRequestId)
            return;
          update.view.dispatch({
            effects: SuggestionUpdateEffect.of({
              content: suggestion.text,
              document: state.doc,
              anchor: state.selection.main.head
            })
          });
        }
      }
    }
  );
  return {
    fetcherPlugin,
    terminate: () => {
      activeRequest = false;
      clearTimeout(timeoutId);
    }
  };
};
var createAcceptanceHandler = (terminateFetch, hotkey, getOptions) => import_state.Prec.highest(
  import_view.keymap.of([
    {
      key: hotkey,
      run: (view) => {
        var _a;
        const session = view.state.field(suggestionSessionState);
        if (!session.remainingText)
          return false;
        const dynamicOptions = getOptions();
        const segmentationKey = (_a = dynamicOptions.splitStrategy) != null ? _a : "word";
        const { accepted, remaining } = TextSplitStrategies[segmentationKey](session.remainingText);
        if (!accepted)
          return false;
        view.dispatch({
          ...insertCompletion(view.state, accepted),
          effects: SuggestionUpdateEffect.of({
            content: remaining || null,
            document: remaining ? session.baselineDocument : null,
            anchor: remaining ? session.anchorPosition + accepted.length : null
          })
        });
        if (!remaining)
          terminateFetch();
        return true;
      }
    }
  ])
);
var insertCompletion = (state, text) => {
  const cursorPos = state.selection.main.head;
  return {
    ...state.changeByRange(() => ({
      changes: { from: cursorPos, insert: text },
      range: import_state.EditorSelection.cursor(cursorPos + text.length)
    })),
    userEvent: "completion.accept"
  };
};
function inlineSuggestions(config) {
  const { fetchFunc, getOptions } = config;
  const staticHotkey = config.acceptanceHotkey || "Tab";
  const normalizeFetch = async function* (state) {
    const result = await fetchFunc(state);
    if (Symbol.asyncIterator in result) {
      yield* result;
    } else {
      yield result;
    }
  };
  const getDelay = () => {
    var _a;
    return (_a = getOptions().delayMs) != null ? _a : 300;
  };
  const { fetcherPlugin, terminate } = createDebouncedFetcher(normalizeFetch, getDelay);
  const acceptanceHandler = createAcceptanceHandler(terminate, staticHotkey, getOptions);
  return [
    suggestionSessionState,
    fetcherPlugin,
    suggestionRenderer,
    acceptanceHandler
  ];
}

// src/providers/openai/provider.ts
var OpenAIProvider = class {
  constructor(settings) {
    this.settings = settings;
  }
  updateModels() {
    return ["gpt-4", "davinci"];
  }
};

// node_modules/ollama/dist/index.mjs
var import_fs = __toESM(require("fs"), 1);
var import_path = require("path");

// node_modules/whatwg-fetch/fetch.js
var g = typeof globalThis !== "undefined" && globalThis || typeof self !== "undefined" && self || // eslint-disable-next-line no-undef
typeof global !== "undefined" && global || {};
var support = {
  searchParams: "URLSearchParams" in g,
  iterable: "Symbol" in g && "iterator" in Symbol,
  blob: "FileReader" in g && "Blob" in g && function() {
    try {
      new Blob();
      return true;
    } catch (e) {
      return false;
    }
  }(),
  formData: "FormData" in g,
  arrayBuffer: "ArrayBuffer" in g
};
function isDataView(obj) {
  return obj && DataView.prototype.isPrototypeOf(obj);
}
if (support.arrayBuffer) {
  viewClasses = [
    "[object Int8Array]",
    "[object Uint8Array]",
    "[object Uint8ClampedArray]",
    "[object Int16Array]",
    "[object Uint16Array]",
    "[object Int32Array]",
    "[object Uint32Array]",
    "[object Float32Array]",
    "[object Float64Array]"
  ];
  isArrayBufferView = ArrayBuffer.isView || function(obj) {
    return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
  };
}
var viewClasses;
var isArrayBufferView;
function normalizeName(name) {
  if (typeof name !== "string") {
    name = String(name);
  }
  if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === "") {
    throw new TypeError('Invalid character in header field name: "' + name + '"');
  }
  return name.toLowerCase();
}
function normalizeValue(value) {
  if (typeof value !== "string") {
    value = String(value);
  }
  return value;
}
function iteratorFor(items) {
  var iterator = {
    next: function() {
      var value = items.shift();
      return { done: value === void 0, value };
    }
  };
  if (support.iterable) {
    iterator[Symbol.iterator] = function() {
      return iterator;
    };
  }
  return iterator;
}
function Headers(headers) {
  this.map = {};
  if (headers instanceof Headers) {
    headers.forEach(function(value, name) {
      this.append(name, value);
    }, this);
  } else if (Array.isArray(headers)) {
    headers.forEach(function(header) {
      if (header.length != 2) {
        throw new TypeError("Headers constructor: expected name/value pair to be length 2, found" + header.length);
      }
      this.append(header[0], header[1]);
    }, this);
  } else if (headers) {
    Object.getOwnPropertyNames(headers).forEach(function(name) {
      this.append(name, headers[name]);
    }, this);
  }
}
Headers.prototype.append = function(name, value) {
  name = normalizeName(name);
  value = normalizeValue(value);
  var oldValue = this.map[name];
  this.map[name] = oldValue ? oldValue + ", " + value : value;
};
Headers.prototype["delete"] = function(name) {
  delete this.map[normalizeName(name)];
};
Headers.prototype.get = function(name) {
  name = normalizeName(name);
  return this.has(name) ? this.map[name] : null;
};
Headers.prototype.has = function(name) {
  return this.map.hasOwnProperty(normalizeName(name));
};
Headers.prototype.set = function(name, value) {
  this.map[normalizeName(name)] = normalizeValue(value);
};
Headers.prototype.forEach = function(callback, thisArg) {
  for (var name in this.map) {
    if (this.map.hasOwnProperty(name)) {
      callback.call(thisArg, this.map[name], name, this);
    }
  }
};
Headers.prototype.keys = function() {
  var items = [];
  this.forEach(function(value, name) {
    items.push(name);
  });
  return iteratorFor(items);
};
Headers.prototype.values = function() {
  var items = [];
  this.forEach(function(value) {
    items.push(value);
  });
  return iteratorFor(items);
};
Headers.prototype.entries = function() {
  var items = [];
  this.forEach(function(value, name) {
    items.push([name, value]);
  });
  return iteratorFor(items);
};
if (support.iterable) {
  Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
}
function consumed(body) {
  if (body._noBody)
    return;
  if (body.bodyUsed) {
    return Promise.reject(new TypeError("Already read"));
  }
  body.bodyUsed = true;
}
function fileReaderReady(reader) {
  return new Promise(function(resolve2, reject) {
    reader.onload = function() {
      resolve2(reader.result);
    };
    reader.onerror = function() {
      reject(reader.error);
    };
  });
}
function readBlobAsArrayBuffer(blob) {
  var reader = new FileReader();
  var promise = fileReaderReady(reader);
  reader.readAsArrayBuffer(blob);
  return promise;
}
function readBlobAsText(blob) {
  var reader = new FileReader();
  var promise = fileReaderReady(reader);
  var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);
  var encoding = match ? match[1] : "utf-8";
  reader.readAsText(blob, encoding);
  return promise;
}
function readArrayBufferAsText(buf) {
  var view = new Uint8Array(buf);
  var chars = new Array(view.length);
  for (var i = 0; i < view.length; i++) {
    chars[i] = String.fromCharCode(view[i]);
  }
  return chars.join("");
}
function bufferClone(buf) {
  if (buf.slice) {
    return buf.slice(0);
  } else {
    var view = new Uint8Array(buf.byteLength);
    view.set(new Uint8Array(buf));
    return view.buffer;
  }
}
function Body() {
  this.bodyUsed = false;
  this._initBody = function(body) {
    this.bodyUsed = this.bodyUsed;
    this._bodyInit = body;
    if (!body) {
      this._noBody = true;
      this._bodyText = "";
    } else if (typeof body === "string") {
      this._bodyText = body;
    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
      this._bodyBlob = body;
    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
      this._bodyFormData = body;
    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
      this._bodyText = body.toString();
    } else if (support.arrayBuffer && support.blob && isDataView(body)) {
      this._bodyArrayBuffer = bufferClone(body.buffer);
      this._bodyInit = new Blob([this._bodyArrayBuffer]);
    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
      this._bodyArrayBuffer = bufferClone(body);
    } else {
      this._bodyText = body = Object.prototype.toString.call(body);
    }
    if (!this.headers.get("content-type")) {
      if (typeof body === "string") {
        this.headers.set("content-type", "text/plain;charset=UTF-8");
      } else if (this._bodyBlob && this._bodyBlob.type) {
        this.headers.set("content-type", this._bodyBlob.type);
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
      }
    }
  };
  if (support.blob) {
    this.blob = function() {
      var rejected = consumed(this);
      if (rejected) {
        return rejected;
      }
      if (this._bodyBlob) {
        return Promise.resolve(this._bodyBlob);
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(new Blob([this._bodyArrayBuffer]));
      } else if (this._bodyFormData) {
        throw new Error("could not read FormData body as blob");
      } else {
        return Promise.resolve(new Blob([this._bodyText]));
      }
    };
  }
  this.arrayBuffer = function() {
    if (this._bodyArrayBuffer) {
      var isConsumed = consumed(this);
      if (isConsumed) {
        return isConsumed;
      } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
        return Promise.resolve(
          this._bodyArrayBuffer.buffer.slice(
            this._bodyArrayBuffer.byteOffset,
            this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
          )
        );
      } else {
        return Promise.resolve(this._bodyArrayBuffer);
      }
    } else if (support.blob) {
      return this.blob().then(readBlobAsArrayBuffer);
    } else {
      throw new Error("could not read as ArrayBuffer");
    }
  };
  this.text = function() {
    var rejected = consumed(this);
    if (rejected) {
      return rejected;
    }
    if (this._bodyBlob) {
      return readBlobAsText(this._bodyBlob);
    } else if (this._bodyArrayBuffer) {
      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
    } else if (this._bodyFormData) {
      throw new Error("could not read FormData body as text");
    } else {
      return Promise.resolve(this._bodyText);
    }
  };
  if (support.formData) {
    this.formData = function() {
      return this.text().then(decode);
    };
  }
  this.json = function() {
    return this.text().then(JSON.parse);
  };
  return this;
}
var methods = ["CONNECT", "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT", "TRACE"];
function normalizeMethod(method) {
  var upcased = method.toUpperCase();
  return methods.indexOf(upcased) > -1 ? upcased : method;
}
function Request(input, options) {
  if (!(this instanceof Request)) {
    throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
  }
  options = options || {};
  var body = options.body;
  if (input instanceof Request) {
    if (input.bodyUsed) {
      throw new TypeError("Already read");
    }
    this.url = input.url;
    this.credentials = input.credentials;
    if (!options.headers) {
      this.headers = new Headers(input.headers);
    }
    this.method = input.method;
    this.mode = input.mode;
    this.signal = input.signal;
    if (!body && input._bodyInit != null) {
      body = input._bodyInit;
      input.bodyUsed = true;
    }
  } else {
    this.url = String(input);
  }
  this.credentials = options.credentials || this.credentials || "same-origin";
  if (options.headers || !this.headers) {
    this.headers = new Headers(options.headers);
  }
  this.method = normalizeMethod(options.method || this.method || "GET");
  this.mode = options.mode || this.mode || null;
  this.signal = options.signal || this.signal || function() {
    if ("AbortController" in g) {
      var ctrl = new AbortController();
      return ctrl.signal;
    }
  }();
  this.referrer = null;
  if ((this.method === "GET" || this.method === "HEAD") && body) {
    throw new TypeError("Body not allowed for GET or HEAD requests");
  }
  this._initBody(body);
  if (this.method === "GET" || this.method === "HEAD") {
    if (options.cache === "no-store" || options.cache === "no-cache") {
      var reParamSearch = /([?&])_=[^&]*/;
      if (reParamSearch.test(this.url)) {
        this.url = this.url.replace(reParamSearch, "$1_=" + new Date().getTime());
      } else {
        var reQueryString = /\?/;
        this.url += (reQueryString.test(this.url) ? "&" : "?") + "_=" + new Date().getTime();
      }
    }
  }
}
Request.prototype.clone = function() {
  return new Request(this, { body: this._bodyInit });
};
function decode(body) {
  var form = new FormData();
  body.trim().split("&").forEach(function(bytes) {
    if (bytes) {
      var split = bytes.split("=");
      var name = split.shift().replace(/\+/g, " ");
      var value = split.join("=").replace(/\+/g, " ");
      form.append(decodeURIComponent(name), decodeURIComponent(value));
    }
  });
  return form;
}
function parseHeaders(rawHeaders) {
  var headers = new Headers();
  var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
  preProcessedHeaders.split("\r").map(function(header) {
    return header.indexOf("\n") === 0 ? header.substr(1, header.length) : header;
  }).forEach(function(line) {
    var parts = line.split(":");
    var key = parts.shift().trim();
    if (key) {
      var value = parts.join(":").trim();
      try {
        headers.append(key, value);
      } catch (error) {
        console.warn("Response " + error.message);
      }
    }
  });
  return headers;
}
Body.call(Request.prototype);
function Response(bodyInit, options) {
  if (!(this instanceof Response)) {
    throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
  }
  if (!options) {
    options = {};
  }
  this.type = "default";
  this.status = options.status === void 0 ? 200 : options.status;
  if (this.status < 200 || this.status > 599) {
    throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].");
  }
  this.ok = this.status >= 200 && this.status < 300;
  this.statusText = options.statusText === void 0 ? "" : "" + options.statusText;
  this.headers = new Headers(options.headers);
  this.url = options.url || "";
  this._initBody(bodyInit);
}
Body.call(Response.prototype);
Response.prototype.clone = function() {
  return new Response(this._bodyInit, {
    status: this.status,
    statusText: this.statusText,
    headers: new Headers(this.headers),
    url: this.url
  });
};
Response.error = function() {
  var response = new Response(null, { status: 200, statusText: "" });
  response.ok = false;
  response.status = 0;
  response.type = "error";
  return response;
};
var redirectStatuses = [301, 302, 303, 307, 308];
Response.redirect = function(url, status) {
  if (redirectStatuses.indexOf(status) === -1) {
    throw new RangeError("Invalid status code");
  }
  return new Response(null, { status, headers: { location: url } });
};
var DOMException = g.DOMException;
try {
  new DOMException();
} catch (err) {
  DOMException = function(message, name) {
    this.message = message;
    this.name = name;
    var error = Error(message);
    this.stack = error.stack;
  };
  DOMException.prototype = Object.create(Error.prototype);
  DOMException.prototype.constructor = DOMException;
}
function fetch2(input, init) {
  return new Promise(function(resolve2, reject) {
    var request = new Request(input, init);
    if (request.signal && request.signal.aborted) {
      return reject(new DOMException("Aborted", "AbortError"));
    }
    var xhr = new XMLHttpRequest();
    function abortXhr() {
      xhr.abort();
    }
    xhr.onload = function() {
      var options = {
        statusText: xhr.statusText,
        headers: parseHeaders(xhr.getAllResponseHeaders() || "")
      };
      if (request.url.indexOf("file://") === 0 && (xhr.status < 200 || xhr.status > 599)) {
        options.status = 200;
      } else {
        options.status = xhr.status;
      }
      options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
      var body = "response" in xhr ? xhr.response : xhr.responseText;
      setTimeout(function() {
        resolve2(new Response(body, options));
      }, 0);
    };
    xhr.onerror = function() {
      setTimeout(function() {
        reject(new TypeError("Network request failed"));
      }, 0);
    };
    xhr.ontimeout = function() {
      setTimeout(function() {
        reject(new TypeError("Network request timed out"));
      }, 0);
    };
    xhr.onabort = function() {
      setTimeout(function() {
        reject(new DOMException("Aborted", "AbortError"));
      }, 0);
    };
    function fixUrl(url) {
      try {
        return url === "" && g.location.href ? g.location.href : url;
      } catch (e) {
        return url;
      }
    }
    xhr.open(request.method, fixUrl(request.url), true);
    if (request.credentials === "include") {
      xhr.withCredentials = true;
    } else if (request.credentials === "omit") {
      xhr.withCredentials = false;
    }
    if ("responseType" in xhr) {
      if (support.blob) {
        xhr.responseType = "blob";
      } else if (support.arrayBuffer) {
        xhr.responseType = "arraybuffer";
      }
    }
    if (init && typeof init.headers === "object" && !(init.headers instanceof Headers || g.Headers && init.headers instanceof g.Headers)) {
      var names = [];
      Object.getOwnPropertyNames(init.headers).forEach(function(name) {
        names.push(normalizeName(name));
        xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
      });
      request.headers.forEach(function(value, name) {
        if (names.indexOf(name) === -1) {
          xhr.setRequestHeader(name, value);
        }
      });
    } else {
      request.headers.forEach(function(value, name) {
        xhr.setRequestHeader(name, value);
      });
    }
    if (request.signal) {
      request.signal.addEventListener("abort", abortXhr);
      xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
          request.signal.removeEventListener("abort", abortXhr);
        }
      };
    }
    xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
  });
}
fetch2.polyfill = true;
if (!g.fetch) {
  g.fetch = fetch2;
  g.Headers = Headers;
  g.Request = Request;
  g.Response = Response;
}

// node_modules/ollama/dist/browser.mjs
var version = "0.5.12";
var __defProp$1 = Object.defineProperty;
var __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField$1 = (obj, key, value) => {
  __defNormalProp$1(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var ResponseError = class extends Error {
  constructor(error, status_code) {
    super(error);
    this.error = error;
    this.status_code = status_code;
    this.name = "ResponseError";
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, ResponseError);
    }
  }
};
var AbortableAsyncIterator = class {
  constructor(abortController, itr, doneCallback) {
    __publicField$1(this, "abortController");
    __publicField$1(this, "itr");
    __publicField$1(this, "doneCallback");
    this.abortController = abortController;
    this.itr = itr;
    this.doneCallback = doneCallback;
  }
  abort() {
    this.abortController.abort();
  }
  async *[Symbol.asyncIterator]() {
    for await (const message of this.itr) {
      if ("error" in message) {
        throw new Error(message.error);
      }
      yield message;
      if (message.done || message.status === "success") {
        this.doneCallback();
        return;
      }
    }
    throw new Error("Did not receive done or success response in stream.");
  }
};
var checkOk = async (response) => {
  var _a;
  if (response.ok) {
    return;
  }
  let message = `Error ${response.status}: ${response.statusText}`;
  let errorData = null;
  if ((_a = response.headers.get("content-type")) == null ? void 0 : _a.includes("application/json")) {
    try {
      errorData = await response.json();
      message = errorData.error || message;
    } catch (error) {
      console.log("Failed to parse error response as JSON");
    }
  } else {
    try {
      console.log("Getting text from response");
      const textResponse = await response.text();
      message = textResponse || message;
    } catch (error) {
      console.log("Failed to get text from error response");
    }
  }
  throw new ResponseError(message, response.status);
};
function getPlatform() {
  if (typeof window !== "undefined" && window.navigator) {
    return `${window.navigator.platform.toLowerCase()} Browser/${navigator.userAgent};`;
  } else if (typeof process !== "undefined") {
    return `${process.arch} ${process.platform} Node.js/${process.version}`;
  }
  return "";
}
var fetchWithHeaders = async (fetch3, url, options = {}) => {
  const defaultHeaders = {
    "Content-Type": "application/json",
    Accept: "application/json",
    "User-Agent": `ollama-js/${version} (${getPlatform()})`
  };
  if (!options.headers) {
    options.headers = {};
  }
  const customHeaders = Object.fromEntries(
    Object.entries(options.headers).filter(([key]) => !Object.keys(defaultHeaders).some((defaultKey) => defaultKey.toLowerCase() === key.toLowerCase()))
  );
  options.headers = {
    ...defaultHeaders,
    ...customHeaders
  };
  return fetch3(url, options);
};
var get = async (fetch3, host, options) => {
  const response = await fetchWithHeaders(fetch3, host, {
    headers: options == null ? void 0 : options.headers
  });
  await checkOk(response);
  return response;
};
var post = async (fetch3, host, data, options) => {
  const isRecord = (input) => {
    return input !== null && typeof input === "object" && !Array.isArray(input);
  };
  const formattedData = isRecord(data) ? JSON.stringify(data) : data;
  const response = await fetchWithHeaders(fetch3, host, {
    method: "POST",
    body: formattedData,
    signal: options == null ? void 0 : options.signal,
    headers: options == null ? void 0 : options.headers
  });
  await checkOk(response);
  return response;
};
var del = async (fetch3, host, data, options) => {
  const response = await fetchWithHeaders(fetch3, host, {
    method: "DELETE",
    body: JSON.stringify(data),
    headers: options == null ? void 0 : options.headers
  });
  await checkOk(response);
  return response;
};
var parseJSON = async function* (itr) {
  var _a;
  const decoder = new TextDecoder("utf-8");
  let buffer = "";
  const reader = itr.getReader();
  while (true) {
    const { done, value: chunk } = await reader.read();
    if (done) {
      break;
    }
    buffer += decoder.decode(chunk);
    const parts = buffer.split("\n");
    buffer = (_a = parts.pop()) != null ? _a : "";
    for (const part of parts) {
      try {
        yield JSON.parse(part);
      } catch (error) {
        console.warn("invalid json: ", part);
      }
    }
  }
  for (const part of buffer.split("\n").filter((p) => p !== "")) {
    try {
      yield JSON.parse(part);
    } catch (error) {
      console.warn("invalid json: ", part);
    }
  }
};
var formatHost = (host) => {
  if (!host) {
    return "http://127.0.0.1:11434";
  }
  let isExplicitProtocol = host.includes("://");
  if (host.startsWith(":")) {
    host = `http://127.0.0.1${host}`;
    isExplicitProtocol = true;
  }
  if (!isExplicitProtocol) {
    host = `http://${host}`;
  }
  const url = new URL(host);
  let port = url.port;
  if (!port) {
    if (!isExplicitProtocol) {
      port = "11434";
    } else {
      port = url.protocol === "https:" ? "443" : "80";
    }
  }
  let formattedHost = `${url.protocol}//${url.hostname}:${port}${url.pathname}`;
  if (formattedHost.endsWith("/")) {
    formattedHost = formattedHost.slice(0, -1);
  }
  return formattedHost;
};
var __defProp2 = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var Ollama$1 = class Ollama {
  constructor(config) {
    var _a, _b;
    __publicField(this, "config");
    __publicField(this, "fetch");
    __publicField(this, "ongoingStreamedRequests", []);
    this.config = {
      host: "",
      headers: config == null ? void 0 : config.headers
    };
    if (!(config == null ? void 0 : config.proxy)) {
      this.config.host = formatHost((_a = config == null ? void 0 : config.host) != null ? _a : "http://127.0.0.1:11434");
    }
    this.fetch = (_b = config == null ? void 0 : config.fetch) != null ? _b : fetch;
  }
  // Abort any ongoing streamed requests to Ollama
  abort() {
    for (const request of this.ongoingStreamedRequests) {
      request.abort();
    }
    this.ongoingStreamedRequests.length = 0;
  }
  /**
   * Processes a request to the Ollama server. If the request is streamable, it will return a
   * AbortableAsyncIterator that yields the response messages. Otherwise, it will return the response
   * object.
   * @param endpoint {string} - The endpoint to send the request to.
   * @param request {object} - The request object to send to the endpoint.
   * @protected {T | AbortableAsyncIterator<T>} - The response object or a AbortableAsyncIterator that yields
   * response messages.
   * @throws {Error} - If the response body is missing or if the response is an error.
   * @returns {Promise<T | AbortableAsyncIterator<T>>} - The response object or a AbortableAsyncIterator that yields the streamed response.
   */
  async processStreamableRequest(endpoint, request) {
    var _a;
    request.stream = (_a = request.stream) != null ? _a : false;
    const host = `${this.config.host}/api/${endpoint}`;
    if (request.stream) {
      const abortController = new AbortController();
      const response2 = await post(this.fetch, host, request, {
        signal: abortController.signal,
        headers: this.config.headers
      });
      if (!response2.body) {
        throw new Error("Missing body");
      }
      const itr = parseJSON(response2.body);
      const abortableAsyncIterator = new AbortableAsyncIterator(
        abortController,
        itr,
        () => {
          const i = this.ongoingStreamedRequests.indexOf(abortableAsyncIterator);
          if (i > -1) {
            this.ongoingStreamedRequests.splice(i, 1);
          }
        }
      );
      this.ongoingStreamedRequests.push(abortableAsyncIterator);
      return abortableAsyncIterator;
    }
    const response = await post(this.fetch, host, request, {
      headers: this.config.headers
    });
    return await response.json();
  }
  /**
   * Encodes an image to base64 if it is a Uint8Array.
   * @param image {Uint8Array | string} - The image to encode.
   * @returns {Promise<string>} - The base64 encoded image.
   */
  async encodeImage(image) {
    if (typeof image !== "string") {
      const uint8Array = new Uint8Array(image);
      let byteString = "";
      const len = uint8Array.byteLength;
      for (let i = 0; i < len; i++) {
        byteString += String.fromCharCode(uint8Array[i]);
      }
      return btoa(byteString);
    }
    return image;
  }
  /**
   * Generates a response from a text prompt.
   * @param request {GenerateRequest} - The request object.
   * @returns {Promise<GenerateResponse | AbortableAsyncIterator<GenerateResponse>>} - The response object or
   * an AbortableAsyncIterator that yields response messages.
   */
  async generate(request) {
    if (request.images) {
      request.images = await Promise.all(request.images.map(this.encodeImage.bind(this)));
    }
    return this.processStreamableRequest("generate", request);
  }
  /**
   * Chats with the model. The request object can contain messages with images that are either
   * Uint8Arrays or base64 encoded strings. The images will be base64 encoded before sending the
   * request.
   * @param request {ChatRequest} - The request object.
   * @returns {Promise<ChatResponse | AbortableAsyncIterator<ChatResponse>>} - The response object or an
   * AbortableAsyncIterator that yields response messages.
   */
  async chat(request) {
    if (request.messages) {
      for (const message of request.messages) {
        if (message.images) {
          message.images = await Promise.all(
            message.images.map(this.encodeImage.bind(this))
          );
        }
      }
    }
    return this.processStreamableRequest("chat", request);
  }
  /**
   * Creates a new model from a stream of data.
   * @param request {CreateRequest} - The request object.
   * @returns {Promise<ProgressResponse | AbortableAsyncIterator<ProgressResponse>>} - The response object or a stream of progress responses.
   */
  async create(request) {
    return this.processStreamableRequest("create", {
      ...request
    });
  }
  /**
   * Pulls a model from the Ollama registry. The request object can contain a stream flag to indicate if the
   * response should be streamed.
   * @param request {PullRequest} - The request object.
   * @returns {Promise<ProgressResponse | AbortableAsyncIterator<ProgressResponse>>} - The response object or
   * an AbortableAsyncIterator that yields response messages.
   */
  async pull(request) {
    return this.processStreamableRequest("pull", {
      name: request.model,
      stream: request.stream,
      insecure: request.insecure
    });
  }
  /**
   * Pushes a model to the Ollama registry. The request object can contain a stream flag to indicate if the
   * response should be streamed.
   * @param request {PushRequest} - The request object.
   * @returns {Promise<ProgressResponse | AbortableAsyncIterator<ProgressResponse>>} - The response object or
   * an AbortableAsyncIterator that yields response messages.
   */
  async push(request) {
    return this.processStreamableRequest("push", {
      name: request.model,
      stream: request.stream,
      insecure: request.insecure
    });
  }
  /**
   * Deletes a model from the server. The request object should contain the name of the model to
   * delete.
   * @param request {DeleteRequest} - The request object.
   * @returns {Promise<StatusResponse>} - The response object.
   */
  async delete(request) {
    await del(
      this.fetch,
      `${this.config.host}/api/delete`,
      { name: request.model },
      { headers: this.config.headers }
    );
    return { status: "success" };
  }
  /**
   * Copies a model from one name to another. The request object should contain the name of the
   * model to copy and the new name.
   * @param request {CopyRequest} - The request object.
   * @returns {Promise<StatusResponse>} - The response object.
   */
  async copy(request) {
    await post(this.fetch, `${this.config.host}/api/copy`, { ...request }, {
      headers: this.config.headers
    });
    return { status: "success" };
  }
  /**
   * Lists the models on the server.
   * @returns {Promise<ListResponse>} - The response object.
   * @throws {Error} - If the response body is missing.
   */
  async list() {
    const response = await get(this.fetch, `${this.config.host}/api/tags`, {
      headers: this.config.headers
    });
    return await response.json();
  }
  /**
   * Shows the metadata of a model. The request object should contain the name of the model.
   * @param request {ShowRequest} - The request object.
   * @returns {Promise<ShowResponse>} - The response object.
   */
  async show(request) {
    const response = await post(this.fetch, `${this.config.host}/api/show`, {
      ...request
    }, {
      headers: this.config.headers
    });
    return await response.json();
  }
  /**
   * Embeds text input into vectors.
   * @param request {EmbedRequest} - The request object.
   * @returns {Promise<EmbedResponse>} - The response object.
   */
  async embed(request) {
    const response = await post(this.fetch, `${this.config.host}/api/embed`, {
      ...request
    }, {
      headers: this.config.headers
    });
    return await response.json();
  }
  /**
   * Embeds a text prompt into a vector.
   * @param request {EmbeddingsRequest} - The request object.
   * @returns {Promise<EmbeddingsResponse>} - The response object.
   */
  async embeddings(request) {
    const response = await post(this.fetch, `${this.config.host}/api/embeddings`, {
      ...request
    }, {
      headers: this.config.headers
    });
    return await response.json();
  }
  /**
   * Lists the running models on the server
   * @returns {Promise<ListResponse>} - The response object.
   * @throws {Error} - If the response body is missing.
   */
  async ps() {
    const response = await get(this.fetch, `${this.config.host}/api/ps`, {
      headers: this.config.headers
    });
    return await response.json();
  }
};
var browser = new Ollama$1();

// node_modules/ollama/dist/index.mjs
var Ollama2 = class extends Ollama$1 {
  async encodeImage(image) {
    if (typeof image !== "string") {
      return Buffer.from(image).toString("base64");
    }
    try {
      if (import_fs.default.existsSync(image)) {
        const fileBuffer = await import_fs.promises.readFile((0, import_path.resolve)(image));
        return Buffer.from(fileBuffer).toString("base64");
      }
    } catch (e) {
    }
    return image;
  }
  /**
   * checks if a file exists
   * @param path {string} - The path to the file
   * @private @internal
   * @returns {Promise<boolean>} - Whether the file exists or not
   */
  async fileExists(path) {
    try {
      await import_fs.promises.access(path);
      return true;
    } catch (e) {
      return false;
    }
  }
  async create(request) {
    if (request.from && await this.fileExists((0, import_path.resolve)(request.from))) {
      throw Error("Creating with a local path is not currently supported from ollama-js");
    }
    if (request.stream) {
      return super.create(request);
    } else {
      return super.create(request);
    }
  }
};
var index = new Ollama2();

// node_modules/mustache/mustache.mjs
var objectToString = Object.prototype.toString;
var isArray = Array.isArray || function isArrayPolyfill(object) {
  return objectToString.call(object) === "[object Array]";
};
function isFunction(object) {
  return typeof object === "function";
}
function typeStr(obj) {
  return isArray(obj) ? "array" : typeof obj;
}
function escapeRegExp(string) {
  return string.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
}
function hasProperty(obj, propName) {
  return obj != null && typeof obj === "object" && propName in obj;
}
function primitiveHasOwnProperty(primitive, propName) {
  return primitive != null && typeof primitive !== "object" && primitive.hasOwnProperty && primitive.hasOwnProperty(propName);
}
var regExpTest = RegExp.prototype.test;
function testRegExp(re, string) {
  return regExpTest.call(re, string);
}
var nonSpaceRe = /\S/;
function isWhitespace(string) {
  return !testRegExp(nonSpaceRe, string);
}
var entityMap = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;",
  "/": "&#x2F;",
  "`": "&#x60;",
  "=": "&#x3D;"
};
function escapeHtml(string) {
  return String(string).replace(/[&<>"'`=\/]/g, function fromEntityMap(s) {
    return entityMap[s];
  });
}
var whiteRe = /\s*/;
var spaceRe = /\s+/;
var equalsRe = /\s*=/;
var curlyRe = /\s*\}/;
var tagRe = /#|\^|\/|>|\{|&|=|!/;
function parseTemplate(template, tags) {
  if (!template)
    return [];
  var lineHasNonSpace = false;
  var sections = [];
  var tokens = [];
  var spaces = [];
  var hasTag = false;
  var nonSpace = false;
  var indentation = "";
  var tagIndex = 0;
  function stripSpace() {
    if (hasTag && !nonSpace) {
      while (spaces.length)
        delete tokens[spaces.pop()];
    } else {
      spaces = [];
    }
    hasTag = false;
    nonSpace = false;
  }
  var openingTagRe, closingTagRe, closingCurlyRe;
  function compileTags(tagsToCompile) {
    if (typeof tagsToCompile === "string")
      tagsToCompile = tagsToCompile.split(spaceRe, 2);
    if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)
      throw new Error("Invalid tags: " + tagsToCompile);
    openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + "\\s*");
    closingTagRe = new RegExp("\\s*" + escapeRegExp(tagsToCompile[1]));
    closingCurlyRe = new RegExp("\\s*" + escapeRegExp("}" + tagsToCompile[1]));
  }
  compileTags(tags || mustache.tags);
  var scanner = new Scanner(template);
  var start, type, value, chr, token, openSection;
  while (!scanner.eos()) {
    start = scanner.pos;
    value = scanner.scanUntil(openingTagRe);
    if (value) {
      for (var i = 0, valueLength = value.length; i < valueLength; ++i) {
        chr = value.charAt(i);
        if (isWhitespace(chr)) {
          spaces.push(tokens.length);
          indentation += chr;
        } else {
          nonSpace = true;
          lineHasNonSpace = true;
          indentation += " ";
        }
        tokens.push(["text", chr, start, start + 1]);
        start += 1;
        if (chr === "\n") {
          stripSpace();
          indentation = "";
          tagIndex = 0;
          lineHasNonSpace = false;
        }
      }
    }
    if (!scanner.scan(openingTagRe))
      break;
    hasTag = true;
    type = scanner.scan(tagRe) || "name";
    scanner.scan(whiteRe);
    if (type === "=") {
      value = scanner.scanUntil(equalsRe);
      scanner.scan(equalsRe);
      scanner.scanUntil(closingTagRe);
    } else if (type === "{") {
      value = scanner.scanUntil(closingCurlyRe);
      scanner.scan(curlyRe);
      scanner.scanUntil(closingTagRe);
      type = "&";
    } else {
      value = scanner.scanUntil(closingTagRe);
    }
    if (!scanner.scan(closingTagRe))
      throw new Error("Unclosed tag at " + scanner.pos);
    if (type == ">") {
      token = [type, value, start, scanner.pos, indentation, tagIndex, lineHasNonSpace];
    } else {
      token = [type, value, start, scanner.pos];
    }
    tagIndex++;
    tokens.push(token);
    if (type === "#" || type === "^") {
      sections.push(token);
    } else if (type === "/") {
      openSection = sections.pop();
      if (!openSection)
        throw new Error('Unopened section "' + value + '" at ' + start);
      if (openSection[1] !== value)
        throw new Error('Unclosed section "' + openSection[1] + '" at ' + start);
    } else if (type === "name" || type === "{" || type === "&") {
      nonSpace = true;
    } else if (type === "=") {
      compileTags(value);
    }
  }
  stripSpace();
  openSection = sections.pop();
  if (openSection)
    throw new Error('Unclosed section "' + openSection[1] + '" at ' + scanner.pos);
  return nestTokens(squashTokens(tokens));
}
function squashTokens(tokens) {
  var squashedTokens = [];
  var token, lastToken;
  for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {
    token = tokens[i];
    if (token) {
      if (token[0] === "text" && lastToken && lastToken[0] === "text") {
        lastToken[1] += token[1];
        lastToken[3] = token[3];
      } else {
        squashedTokens.push(token);
        lastToken = token;
      }
    }
  }
  return squashedTokens;
}
function nestTokens(tokens) {
  var nestedTokens = [];
  var collector = nestedTokens;
  var sections = [];
  var token, section;
  for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {
    token = tokens[i];
    switch (token[0]) {
      case "#":
      case "^":
        collector.push(token);
        sections.push(token);
        collector = token[4] = [];
        break;
      case "/":
        section = sections.pop();
        section[5] = token[2];
        collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;
        break;
      default:
        collector.push(token);
    }
  }
  return nestedTokens;
}
function Scanner(string) {
  this.string = string;
  this.tail = string;
  this.pos = 0;
}
Scanner.prototype.eos = function eos() {
  return this.tail === "";
};
Scanner.prototype.scan = function scan(re) {
  var match = this.tail.match(re);
  if (!match || match.index !== 0)
    return "";
  var string = match[0];
  this.tail = this.tail.substring(string.length);
  this.pos += string.length;
  return string;
};
Scanner.prototype.scanUntil = function scanUntil(re) {
  var index2 = this.tail.search(re), match;
  switch (index2) {
    case -1:
      match = this.tail;
      this.tail = "";
      break;
    case 0:
      match = "";
      break;
    default:
      match = this.tail.substring(0, index2);
      this.tail = this.tail.substring(index2);
  }
  this.pos += match.length;
  return match;
};
function Context(view, parentContext) {
  this.view = view;
  this.cache = { ".": this.view };
  this.parent = parentContext;
}
Context.prototype.push = function push(view) {
  return new Context(view, this);
};
Context.prototype.lookup = function lookup(name) {
  var cache = this.cache;
  var value;
  if (cache.hasOwnProperty(name)) {
    value = cache[name];
  } else {
    var context = this, intermediateValue, names, index2, lookupHit = false;
    while (context) {
      if (name.indexOf(".") > 0) {
        intermediateValue = context.view;
        names = name.split(".");
        index2 = 0;
        while (intermediateValue != null && index2 < names.length) {
          if (index2 === names.length - 1)
            lookupHit = hasProperty(intermediateValue, names[index2]) || primitiveHasOwnProperty(intermediateValue, names[index2]);
          intermediateValue = intermediateValue[names[index2++]];
        }
      } else {
        intermediateValue = context.view[name];
        lookupHit = hasProperty(context.view, name);
      }
      if (lookupHit) {
        value = intermediateValue;
        break;
      }
      context = context.parent;
    }
    cache[name] = value;
  }
  if (isFunction(value))
    value = value.call(this.view);
  return value;
};
function Writer() {
  this.templateCache = {
    _cache: {},
    set: function set(key, value) {
      this._cache[key] = value;
    },
    get: function get2(key) {
      return this._cache[key];
    },
    clear: function clear() {
      this._cache = {};
    }
  };
}
Writer.prototype.clearCache = function clearCache() {
  if (typeof this.templateCache !== "undefined") {
    this.templateCache.clear();
  }
};
Writer.prototype.parse = function parse(template, tags) {
  var cache = this.templateCache;
  var cacheKey = template + ":" + (tags || mustache.tags).join(":");
  var isCacheEnabled = typeof cache !== "undefined";
  var tokens = isCacheEnabled ? cache.get(cacheKey) : void 0;
  if (tokens == void 0) {
    tokens = parseTemplate(template, tags);
    isCacheEnabled && cache.set(cacheKey, tokens);
  }
  return tokens;
};
Writer.prototype.render = function render(template, view, partials, config) {
  var tags = this.getConfigTags(config);
  var tokens = this.parse(template, tags);
  var context = view instanceof Context ? view : new Context(view, void 0);
  return this.renderTokens(tokens, context, partials, template, config);
};
Writer.prototype.renderTokens = function renderTokens(tokens, context, partials, originalTemplate, config) {
  var buffer = "";
  var token, symbol, value;
  for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {
    value = void 0;
    token = tokens[i];
    symbol = token[0];
    if (symbol === "#")
      value = this.renderSection(token, context, partials, originalTemplate, config);
    else if (symbol === "^")
      value = this.renderInverted(token, context, partials, originalTemplate, config);
    else if (symbol === ">")
      value = this.renderPartial(token, context, partials, config);
    else if (symbol === "&")
      value = this.unescapedValue(token, context);
    else if (symbol === "name")
      value = this.escapedValue(token, context, config);
    else if (symbol === "text")
      value = this.rawValue(token);
    if (value !== void 0)
      buffer += value;
  }
  return buffer;
};
Writer.prototype.renderSection = function renderSection(token, context, partials, originalTemplate, config) {
  var self2 = this;
  var buffer = "";
  var value = context.lookup(token[1]);
  function subRender(template) {
    return self2.render(template, context, partials, config);
  }
  if (!value)
    return;
  if (isArray(value)) {
    for (var j = 0, valueLength = value.length; j < valueLength; ++j) {
      buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate, config);
    }
  } else if (typeof value === "object" || typeof value === "string" || typeof value === "number") {
    buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate, config);
  } else if (isFunction(value)) {
    if (typeof originalTemplate !== "string")
      throw new Error("Cannot use higher-order sections without the original template");
    value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);
    if (value != null)
      buffer += value;
  } else {
    buffer += this.renderTokens(token[4], context, partials, originalTemplate, config);
  }
  return buffer;
};
Writer.prototype.renderInverted = function renderInverted(token, context, partials, originalTemplate, config) {
  var value = context.lookup(token[1]);
  if (!value || isArray(value) && value.length === 0)
    return this.renderTokens(token[4], context, partials, originalTemplate, config);
};
Writer.prototype.indentPartial = function indentPartial(partial, indentation, lineHasNonSpace) {
  var filteredIndentation = indentation.replace(/[^ \t]/g, "");
  var partialByNl = partial.split("\n");
  for (var i = 0; i < partialByNl.length; i++) {
    if (partialByNl[i].length && (i > 0 || !lineHasNonSpace)) {
      partialByNl[i] = filteredIndentation + partialByNl[i];
    }
  }
  return partialByNl.join("\n");
};
Writer.prototype.renderPartial = function renderPartial(token, context, partials, config) {
  if (!partials)
    return;
  var tags = this.getConfigTags(config);
  var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];
  if (value != null) {
    var lineHasNonSpace = token[6];
    var tagIndex = token[5];
    var indentation = token[4];
    var indentedValue = value;
    if (tagIndex == 0 && indentation) {
      indentedValue = this.indentPartial(value, indentation, lineHasNonSpace);
    }
    var tokens = this.parse(indentedValue, tags);
    return this.renderTokens(tokens, context, partials, indentedValue, config);
  }
};
Writer.prototype.unescapedValue = function unescapedValue(token, context) {
  var value = context.lookup(token[1]);
  if (value != null)
    return value;
};
Writer.prototype.escapedValue = function escapedValue(token, context, config) {
  var escape = this.getConfigEscape(config) || mustache.escape;
  var value = context.lookup(token[1]);
  if (value != null)
    return typeof value === "number" && escape === mustache.escape ? String(value) : escape(value);
};
Writer.prototype.rawValue = function rawValue(token) {
  return token[1];
};
Writer.prototype.getConfigTags = function getConfigTags(config) {
  if (isArray(config)) {
    return config;
  } else if (config && typeof config === "object") {
    return config.tags;
  } else {
    return void 0;
  }
};
Writer.prototype.getConfigEscape = function getConfigEscape(config) {
  if (config && typeof config === "object" && !isArray(config)) {
    return config.escape;
  } else {
    return void 0;
  }
};
var mustache = {
  name: "mustache.js",
  version: "4.2.0",
  tags: ["{{", "}}"],
  clearCache: void 0,
  escape: void 0,
  parse: void 0,
  render: void 0,
  Scanner: void 0,
  Context: void 0,
  Writer: void 0,
  /**
   * Allows a user to override the default caching strategy, by providing an
   * object with set, get and clear methods. This can also be used to disable
   * the cache by setting it to the literal `undefined`.
   */
  set templateCache(cache) {
    defaultWriter.templateCache = cache;
  },
  /**
   * Gets the default or overridden caching object from the default writer.
   */
  get templateCache() {
    return defaultWriter.templateCache;
  }
};
var defaultWriter = new Writer();
mustache.clearCache = function clearCache2() {
  return defaultWriter.clearCache();
};
mustache.parse = function parse2(template, tags) {
  return defaultWriter.parse(template, tags);
};
mustache.render = function render2(template, view, partials, config) {
  if (typeof template !== "string") {
    throw new TypeError('Invalid template! Template should be a "string" but "' + typeStr(template) + '" was given as the first argument for mustache#render(template, view, partials)');
  }
  return defaultWriter.render(template, view, partials, config);
};
mustache.escape = escapeHtml;
mustache.Scanner = Scanner;
mustache.Context = Context;
mustache.Writer = Writer;
var mustache_default = mustache;

// src/prompt/prompt.ts
var TEMPLATE_VARIABLES = `{{pre_cursor}}
{{post_cursor}} 
{{active_sentence}} 
{{last_line}}`;
function buildPrompt(template, args) {
  return mustache_default.render(template, args);
}
function preparePrompt(editor, template = TEMPLATE_VARIABLES) {
  const cursor = editor.getCursor();
  const preCursor = editor.getRange({ line: 0, ch: 0 }, cursor);
  const postCursor = editor.getRange(cursor, { line: editor.lastLine(), ch: editor.getLine(editor.lastLine()).length });
  const activeSentence = sentenceAtCursor(editor);
  const lastLine = editor.getLine(editor.lastLine());
  return buildPrompt(template, {
    pre_cursor: preCursor,
    post_cursor: postCursor,
    active_sentence: activeSentence,
    last_line: lastLine
  });
}
function sentenceAtCursor(editor) {
  const cursor = editor.getCursor();
  let currentLine = cursor.line;
  let sentenceLines = [editor.getLine(currentLine)];
  while (currentLine > 0) {
    currentLine--;
    const line = editor.getLine(currentLine);
    if (/[.!?]\s*$/.test(line)) {
      break;
    }
    sentenceLines.unshift(line);
  }
  return sentenceLines.join(" ").replace(/\s+/g, " ").trim();
}

// src/providers/ollama/provider.ts
var OllamaProvider = class {
  constructor(settins) {
    this.aborted = false;
    this.settings = settins;
    this.client = new Ollama2({ host: this.settings.host });
  }
  async *generate(editor, options) {
    this.aborted = false;
    const prompt = preparePrompt(editor, options.userPrompt);
    const completionIterator = await this.client.generate({
      model: options.model,
      prompt,
      system: options.systemPrompt,
      stream: true,
      options: {
        temperature: options.temperature
      }
    });
    const initialPosition = editor.getCursor();
    let completion = "";
    for await (let response of completionIterator) {
      if (this.aborted) {
        return;
      }
      const currentPosition = editor.getCursor();
      if (currentPosition.line !== initialPosition.line || currentPosition.ch !== initialPosition.ch) {
        console.log("cursor moved, aborting completion");
        this.abort();
        return;
      }
      completion += response.response;
      yield completion;
    }
  }
  async abort() {
    if (this.aborted)
      return;
    this.client.abort();
    this.aborted = true;
    console.log("aborted completion");
  }
  async updateModels() {
    const response = await this.client.list();
    this.settings.models = response.models.map((model) => model.name);
    return this.settings.models;
  }
};

// src/providers/index.ts
var buildProviders = (settings) => {
  return {
    ["ollama" /* OLLAMA */]: new OllamaProvider(settings.providers.ollama),
    ["openai" /* OPENAI */]: new OpenAIProvider(settings.providers.openai)
  };
};

// src/settings/settings.ts
var DEFAULT_PROFILE = "default";
var DEFAULT_SETTINGS = {
  providers: {
    openai: {
      integration: "openai" /* OPENAI */,
      name: "Open AI",
      description: "Use OpenAI APIs to generate text.",
      apiKey: "",
      model: "gpt-4o",
      models: ["gpt-4", "gpt-3.5-turbo", "gpt-3.5", "gpt-3", "gpt-2", "gpt-1"],
      configured: false
    },
    ollama: {
      integration: "ollama" /* OLLAMA */,
      name: "Ollama",
      description: "Use your own Ollama instance to generate text.",
      host: "http://localhost:11434",
      models: ["llama3.2:latest", "mistral-nemo"],
      configured: true
    }
  },
  profiles: {
    default: {
      name: "Default Profile",
      provider: "ollama" /* OLLAMA */,
      delayMs: 500,
      splitStrategy: "word",
      completionOptions: {
        model: "mistral-nemo",
        userPrompt: "Complete following text:\n {{pre_cursor}}}",
        systemPrompt: "You are an helpful AI completer. Follow instructions",
        temperature: 0.5
      }
    }
  },
  path_profile_mappings: {
    "/": DEFAULT_PROFILE
  }
};
function newProfile(profiles) {
  const id = Math.random().toString(36).substring(2, 6);
  let name = "New Profile";
  let i = 1;
  Object.entries(profiles).forEach(([, value]) => {
    if (value.name === name) {
      name = `New Profile ${i}`;
      i++;
    }
  });
  const defaultProfile = profiles[DEFAULT_PROFILE];
  const profile = {
    ...defaultProfile,
    name
  };
  profiles[id] = profile;
  return id;
}

// src/settings/settings-tab.ts
var import_obsidian2 = require("obsidian");

// src/settings/provider-settings-modal.ts
var import_obsidian = require("obsidian");
var ProviderSettingsModal = class extends import_obsidian.Modal {
  constructor(app, plugin, providerType) {
    super(app);
    this.plugin = plugin;
    this.providerType = providerType;
    this.modalEl.addClass("inscribe-provider-settings-modal");
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    switch (this.providerType) {
      case "ollama" /* OLLAMA */:
        this.renderOllamaSettings();
        break;
      case "openai" /* OPENAI */:
        this.renderOpenAISettings();
        break;
    }
  }
  async renderOllamaSettings() {
    const { contentEl } = this;
    this.setTitle("Ollama Settings");
    let host = this.plugin.settings.providers.ollama.host;
    new import_obsidian.Setting(contentEl).setName("Ollama Host").setDesc("The host of the Ollama API").addText((text) => {
      text.setValue(host).onChange((value) => {
        host = value;
      });
    });
    new import_obsidian.Setting(contentEl).setTooltip("Save changes").addButton((btn) => btn.setButtonText("Save").setCta().onClick(async () => {
      this.close();
      this.plugin.settings.providers.ollama.host = host;
      await this.plugin.saveSettings();
    }));
  }
  async renderOpenAISettings() {
    const { contentEl } = this;
    this.setTitle("OpenAI Settings");
    let apiKey = this.plugin.settings.providers.openai.apiKey;
    new import_obsidian.Setting(contentEl).setName("OpenAI API Key").setDesc("The API key for OpenAI").addText((text) => {
      text.setValue(apiKey).onChange((value) => {
        apiKey = value;
      });
    });
    new import_obsidian.Setting(contentEl).setTooltip("Save changes").addButton((btn) => btn.setButtonText("Save").setCta().onClick(async () => {
      this.close();
      this.plugin.settings.providers.openai.apiKey = apiKey;
      await this.plugin.saveSettings();
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/settings/settings-tab.ts
var InscribeSettingsTab = class extends import_obsidian2.PluginSettingTab {
  constructor(plugin) {
    super(plugin.app, plugin);
    this.plugin = plugin;
  }
  async display() {
    this.containerEl.empty();
    const providersContainer = document.createElement("div");
    this.containerEl.appendChild(providersContainer);
    this.providersSection = new ProvidersSection(providersContainer, this.app, this.plugin);
    await this.providersSection.render();
    const profilesContainer = document.createElement("div");
    this.containerEl.appendChild(profilesContainer);
    this.profilesSection = new ProfilesSection(profilesContainer, this.plugin);
    await this.profilesSection.render();
    const pathMappingsContainer = document.createElement("div");
    this.containerEl.appendChild(pathMappingsContainer);
    this.pathMappingsSection = new PathMappingsSection(pathMappingsContainer, this.plugin);
    await this.pathMappingsSection.render();
  }
};
var ProvidersSection = class {
  constructor(container, app, plugin) {
    this.app = app;
    this.container = container;
    this.plugin = plugin;
  }
  async render() {
    this.container.empty();
    this.container.createEl("h3", { text: "Providers" });
    this.container.createEl("p", {
      text: "Configure the AI providers you want to use for completions"
    });
    new import_obsidian2.Setting(this.container).setName("Ollama").setDesc("Local AI provider running on your machine").addButton((button) => {
      button.setButtonText("Configure").setTooltip("Configure Ollama").onClick(() => this.openProviderModal("ollama" /* OLLAMA */));
    });
    new import_obsidian2.Setting(this.container).setName("OpenAI").setDesc("OpenAI API provider").addButton((button) => {
      button.setButtonText("Configure").setTooltip("Configure OpenAI").onClick(() => this.openProviderModal("openai" /* OPENAI */));
    });
  }
  openProviderModal(type) {
    new ProviderSettingsModal(this.app, this.plugin, type).open();
  }
};
var ProfilesSection = class {
  constructor(container, plugin) {
    this.displayedProfileId = DEFAULT_PROFILE;
    this.container = container;
    this.plugin = plugin;
    this.selectionContainer = document.createElement("div");
    this.profileContainer = document.createElement("div");
    this.container.appendChild(this.selectionContainer);
    this.container.appendChild(this.profileContainer);
  }
  async render() {
    this.container.empty();
    this.container.createEl("h3", { text: "Profiles" });
    this.container.createEl("p", {
      text: "Configure the settings for each profile. A profile can be assigned to paths. The default profile is used when no profile is assigned."
    });
    this.container.appendChild(this.selectionContainer);
    this.container.appendChild(this.profileContainer);
    await this.renderProfileSelection();
    const displayedProfile = this.plugin.settings.profiles[this.displayedProfileId];
    await this.renderProfileSettings(displayedProfile);
  }
  async renderProfileSelection() {
    this.selectionContainer.empty();
    this.selectionContainer.createEl("br");
    new import_obsidian2.Setting(this.selectionContainer).setHeading().setName("Manage profile").setDesc("Select a profile to configure its settings").addDropdown((dropdown) => this.createProfileDropdown(dropdown)).addExtraButton((button) => this.createNewProfileButton(button)).addExtraButton((button) => this.createDeleteProfileButton(button));
  }
  createProfileDropdown(dropdown) {
    Object.entries(this.plugin.settings.profiles).forEach(([id, profile]) => {
      dropdown.addOption(id, profile.name);
    });
    dropdown.setValue(this.displayedProfileId).onChange(async (value) => {
      this.displayedProfileId = value;
      await this.renderProfileSettings(this.plugin.settings.profiles[value]);
    });
  }
  createNewProfileButton(button) {
    button.setIcon("plus").setTooltip("Create new profile").onClick(async () => {
      this.displayedProfileId = newProfile(this.plugin.settings.profiles);
      await this.plugin.saveSettings();
      await this.render();
    });
  }
  createDeleteProfileButton(button) {
    const isDefault = this.displayedProfileId === DEFAULT_PROFILE;
    button.setDisabled(isDefault).setIcon("trash").setTooltip(isDefault ? "Cannot delete default profile" : "Delete profile").onClick(async () => {
      delete this.plugin.settings.profiles[this.displayedProfileId];
      this.displayedProfileId = DEFAULT_PROFILE;
      await this.plugin.saveSettings();
      await this.render();
    });
  }
  async renderProfileSettings(profile) {
    this.profileContainer.empty();
    new import_obsidian2.Setting(this.profileContainer).setName("Profile Name").setDesc("Name of the profile").addText((text) => {
      text.setValue(profile.name).onChange(async (value) => {
        profile.name = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian2.Setting(this.profileContainer).setName("AI Provider").setDesc("Choose your preferred AI provider").addDropdown((dropdown) => {
      dropdown.addOption("ollama" /* OLLAMA */, "Ollama").addOption("openai" /* OPENAI */, "OpenAI").setValue(profile.provider).onChange(async (value) => {
        profile.provider = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian2.Setting(this.profileContainer).setName("Model").setDesc("Select the model to use for completions").addExtraButton((button) => {
      button.setIcon("refresh-ccw").setTooltip("Update model list").onClick(async () => {
        this.plugin.providerManager.updateModels(profile.provider);
        await this.plugin.saveSettings();
        await this.renderProfileSettings(profile);
      });
    }).addDropdown(async (dropdown) => {
      const models = this.plugin.settings.providers[profile.provider].models;
      dropdown.addOptions(Object.fromEntries(models.map((model) => [model, model]))).setValue(profile.completionOptions.model).onChange(async (value) => {
        profile.completionOptions.model = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian2.Setting(this.profileContainer).setName("Temperature").setDesc("Control the randomness of completions (0 = deterministic, 1 = creative)").addSlider((slider) => {
      slider.setLimits(0, 1, 0.1).setValue(profile.completionOptions.temperature).setDynamicTooltip().onChange(async (value) => {
        profile.completionOptions.temperature = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian2.Setting(this.profileContainer).setName("Suggestion Delay").setDesc("Delay in milliseconds before fetching suggestions").addText((text) => {
      text.inputEl.setAttr("type", "number");
      text.setPlaceholder("1000").setValue(String(profile.delayMs)).onChange(async (value) => {
        profile.delayMs = parseInt(value);
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian2.Setting(this.profileContainer).setName("Completion Strategy").setDesc("Choose how completions should be split and accepted").addDropdown((dropdown) => {
      dropdown.addOption("word", "Word by Word").addOption("sentence", "Sentence by Sentence").addOption("paragraph", "Paragraph by Paragraph").addOption("full", "Full Completion").setValue(profile.splitStrategy).onChange(async (value) => {
        profile.splitStrategy = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian2.Setting(this.profileContainer).setName("System Prompt").setDesc("Set system prompt").addTextArea((text) => {
      text.inputEl.rows = 3;
      text.inputEl.setCssStyles({
        width: "100%",
        resize: "vertical",
        position: "relative"
      });
      text.setValue(profile.completionOptions.systemPrompt).onChange(
        async (value) => {
          profile.completionOptions.systemPrompt = value;
          await this.plugin.saveSettings();
        }
      );
    });
    new import_obsidian2.Setting(this.profileContainer).setName("User Prompt").setDesc("User prompt template").addExtraButton((button) => {
      button.setIcon("list").setTooltip("Insert mustache template variables").onClick(async () => {
        const text = profile.completionOptions.userPrompt + "\n" + TEMPLATE_VARIABLES;
        profile.completionOptions.userPrompt = text;
        await this.plugin.saveSettings();
        await this.renderProfileSettings(profile);
      });
    }).addTextArea((text) => {
      text.inputEl.rows = 3;
      text.inputEl.setCssStyles({
        width: "100%",
        resize: "vertical",
        position: "relative"
      });
      text.setValue(profile.completionOptions.userPrompt).onChange(
        async (value) => {
          profile.completionOptions.userPrompt = value;
          await this.plugin.saveSettings();
        }
      );
    });
  }
};
var PathMappingsSection = class {
  constructor(container, plugin) {
    this.container = container;
    this.plugin = plugin;
    this.tableContainer = document.createElement("div");
  }
  async render() {
    this.container.empty();
    this.container.createEl("h3", { text: "Dynamic Profile Mapping" });
    this.container.createEl("p", {
      text: "You can assign profiles to paths. Paths are matched by prefix, with longer paths taking precedence. For example, '/Daily' will match all files in the Daily folder."
    });
    this.container.createEl("br");
    this.container.appendChild(this.tableContainer);
    await this.renderMappingsTable();
  }
  async renderMappingsTable() {
    this.tableContainer.empty();
    const table = this.tableContainer.createEl("table", { cls: "mapping-table" });
    const header = table.createEl("tr");
    header.createEl("th", { text: "Path" });
    header.createEl("th", { text: "Profile" });
    header.createEl("th", { text: "" });
    const newRow = table.createEl("tr", { cls: "new-mapping-row" });
    let pathInput = "";
    let selectedProfile = DEFAULT_PROFILE;
    const pathCell = newRow.createEl("td");
    new import_obsidian2.TextComponent(pathCell).setPlaceholder("Enter path (e.g., Daily/Work)").onChange((value) => {
      pathInput = value;
    });
    const profileCell = newRow.createEl("td");
    const profileDropdown = new import_obsidian2.DropdownComponent(profileCell).setValue(selectedProfile);
    Object.entries(this.plugin.settings.profiles).forEach(([id, profile]) => {
      profileDropdown.addOption(id, profile.name);
    });
    profileDropdown.onChange((value) => {
      selectedProfile = value;
    });
    const actionCell = newRow.createEl("td");
    const addButton = new import_obsidian2.ExtraButtonComponent(actionCell).setIcon("plus").setTooltip("Add profile mapping").onClick(async () => {
      this.plugin.settings.path_profile_mappings[pathInput] = selectedProfile;
      await this.plugin.saveSettings();
      await this.render();
    });
    Object.entries(this.plugin.settings.path_profile_mappings).forEach(([path, profileId]) => {
      const row = table.createEl("tr");
      row.createEl("td", { text: path || "Root" });
      const isDefaultMapping = path === "";
      const profileCell2 = row.createEl("td");
      const profileDropdown2 = new import_obsidian2.DropdownComponent(profileCell2).setDisabled(isDefaultMapping);
      Object.entries(this.plugin.settings.profiles).forEach(([id, profile]) => {
        profileDropdown2.addOption(id, profile.name);
      });
      profileDropdown2.setValue(profileId);
      profileDropdown2.onChange(async (value) => {
        this.plugin.settings.path_profile_mappings[path] = value;
        await this.plugin.saveSettings();
        await this.render();
      });
      const actionsCell = row.createEl("td");
      new import_obsidian2.ExtraButtonComponent(actionsCell).setIcon("trash").setDisabled(isDefaultMapping).setTooltip("Delete mapping").onClick(async () => {
        delete this.plugin.settings.path_profile_mappings[path];
        await this.plugin.saveSettings();
        await this.render();
      });
    });
  }
};

// src/statusbar/status-bar-item.ts
var import_obsidian3 = require("obsidian");
var StatusBarItem = class {
  constructor(plugin, profile) {
    this.plugin = plugin;
    this.statusBarItem = this.plugin.addStatusBarItem();
    (0, import_obsidian3.setIcon)(this.statusBarItem, "feather");
    this.update(profile);
  }
  update(profile) {
    (0, import_obsidian3.setTooltip)(this.statusBarItem, `Profile: ${profile}`, { placement: "top" });
  }
};

// src/providers/manager.ts
var ProviderManager = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.inlineSuggestionOptions = { delayMs: 300, splitStrategy: "sentence" };
    this.app = this.plugin.app;
    this.settings = this.plugin.settings;
    this.providers = buildProviders(this.settings);
    this.activeProfile = this.settings.profiles[this.resolveProfileFromPath(this.getActiveFilePath())];
    this.statusBarComponent = new StatusBarItem(this.plugin, this.activeProfile.name);
  }
  async *fetchSuggestions() {
    const activeEditor = this.app.workspace.activeEditor;
    if (!activeEditor)
      return;
    if (!activeEditor.editor)
      return;
    const provider = this.providers[this.activeProfile.provider];
    yield* this.generateCompletion(activeEditor.editor, provider, this.activeProfile.completionOptions);
  }
  getOptions() {
    return this.inlineSuggestionOptions;
  }
  loadProviders() {
    this.providers = buildProviders(this.settings);
  }
  updateProfile(filePath) {
    const profileId = this.resolveProfileFromPath(filePath);
    this.activeProfile = this.settings.profiles[profileId];
    this.inlineSuggestionOptions = { delayMs: this.activeProfile.delayMs, splitStrategy: this.activeProfile.splitStrategy };
    this.statusBarComponent.update(this.activeProfile.name);
  }
  getActiveProfile() {
    return this.activeProfile;
  }
  async *generateCompletion(editor, provider, options) {
    await provider.abort();
    const cursor = editor.getCursor();
    const currentLine = editor.getLine(cursor.line);
    if (!currentLine.length)
      return;
    const lastChar = currentLine[cursor.ch - 1];
    if (lastChar !== " ")
      return;
    for await (const text of provider.generate(editor, options)) {
      yield { text };
    }
  }
  resolveProfileFromPath(filePath) {
    if (!this.settings.path_profile_mappings || Object.keys(this.settings.path_profile_mappings).length === 0) {
      return DEFAULT_PROFILE;
    }
    const normalizedPath = filePath.replace(/^\/+|\/+$/g, "");
    let longestMatch = "";
    let matchedProfile = DEFAULT_PROFILE;
    Object.entries(this.settings.path_profile_mappings).forEach(([path, profile]) => {
      const normalizedMappingPath = path.replace(/^\/+|\/+$/g, "");
      if (normalizedPath.startsWith(normalizedMappingPath)) {
        if (normalizedMappingPath.length > longestMatch.length) {
          longestMatch = normalizedMappingPath;
          matchedProfile = profile;
        }
      }
    });
    return matchedProfile;
  }
  async updateModels(provider) {
    return this.providers[provider].updateModels();
  }
  getActiveFilePath() {
    const activeEditor = this.app.workspace.activeEditor;
    if (!activeEditor)
      return "";
    if (!activeEditor.file)
      return "";
    return activeEditor.file.path;
  }
};

// src/main.ts
var Inscribe = class extends import_obsidian4.Plugin {
  async onload() {
    await this.loadSettings();
    await this.setupProviderManager();
    await this.setupExtention();
    this.addSettingTab(new InscribeSettingsTab(this));
    this.registerEvents();
  }
  registerEvents() {
    this.registerEvent(this.app.workspace.on("file-open", (file) => {
      this.providerManager.updateProfile(file.path);
    }));
  }
  async setupProviderManager() {
    this.providerManager = new ProviderManager(this);
  }
  async setupExtention() {
    const extension = inlineSuggestions({
      fetchFunc: () => this.providerManager.fetchSuggestions(),
      getOptions: () => this.providerManager.getOptions()
    });
    this.registerEditorExtension(extension);
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.providerManager.loadProviders();
  }
};
/*! Bundled license information:

mustache/mustache.mjs:
  (*!
   * mustache.js - Logic-less {{mustache}} templates with JavaScript
   * http://github.com/janl/mustache.js
   *)
*/
//# sourceMappingURL=data:application/json;base64,
